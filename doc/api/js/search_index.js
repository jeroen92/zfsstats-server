var search_data = {"index":{"searchIndex":["abstractcontroller","base","callbacks","classmethods","collector","doublerendererror","helpers","classmethods","missinghelpererror","layouts","classmethods","railties","routeshelpers","rendering","classmethods","translation","urlfor","classmethods","viewpaths","classmethods","actioncontroller","actioncontroller","actioncontroller","base","caching","classmethods","configmethods","fragments","conditionalget","classmethods","cookies","datastreaming","flash","classmethods","forcessl","classmethods","head","helpers","classmethods","hideactions","classmethods","httpauthentication","basic","controllermethods","classmethods","digest","controllermethods","token","controllermethods","implicitrender","instrumentation","classmethods","live","response","header","logsubscriber","metal","middleware","actionmiddleware","mimeresponds","classmethods","collector","modelnaming","parametermissing","parameters","paramswrapper","classmethods","rackdelegation","railties","helpers","recordidentifier","redirecting","renderers","all","classmethods","rendering","requestforgeryprotection","classmethods","protectionmethods","exception","nullsession","resetsession","rescue","responder","streaming","strongparameters","templateassertions","testcase","behavior","classmethods","raiseactionexceptions","testresponse","testing","classmethods","unpermittedparameters","urlfor","actiondispatch","assertions","domassertions","responseassertions","routingassertions","selectorassertions","tagassertions","callbacks","cookies","chainedcookiejars","verifyandupgradelegacysignedmessage","debugexceptions","exceptionwrapper","filehandler","flash","flashhash","http","cache","request","response","filterparameters","filterredirect","headers","mimenegotiation","parameterfilter","parameters","url","uploadedfile","integration","requesthelpers","runner","session","integrationtest","middlewarestack","middleware","paramsparser","parseerror","publicexceptions","railsentitystore","railsmetastore","reloader","remoteip","getip","ipspoofattackerror","request","requestid","response","routing","consoleformatter","htmltableformatter","mapper","base","concerns","httphelpers","resources","scoping","pathredirect","polymorphicroutes","redirection","routewrapper","urlfor","ssl","session","abstractstore","cachestore","compatibility","cookiestore","memcachestore","stalesessioncheck","showexceptions","static","testprocess","testrequest","testresponse","actionmailer","base","collector","deliverymethods","classmethods","logsubscriber","mailhelper","noninferrablemailererror","testcase","behavior","classmethods","testhelper","actionview","base","context","dependencytracker","erbtracker","digestor","filesystemresolver","fixtureresolver","helpers","activemodelhelper","activemodelinstancetag","assettaghelper","asseturlhelper","atomfeedhelper","cachehelper","capturehelper","csrfhelper","datehelper","debughelper","formbuilder","formhelper","formoptionshelper","formtaghelper","javascripthelper","numberhelper","invalidnumbererror","outputsafetyhelper","recordtaghelper","renderinghelper","sanitizehelper","taghelper","texthelper","translationhelper","urlhelper","classmethods","logsubscriber","lookupcontext","detailscache","viewpaths","modelnaming","nullresolver","partialrenderer","recordidentifier","renderer","resolver","cache","smallcache","path","routingurlfor","template","handlers","builder","erb","erubis","raw","types","type","testcase","behavior","classmethods","locals","renderedviewscollection","testcontroller","activemodel","attributemethods","classmethods","callbacks","conversion","dirty","errors","forbiddenattributeserror","lint","tests","missingattributeerror","model","name","naming","securepassword","classmethods","instancemethodsonactivation","serialization","serializers","json","xml","strictvalidationfailed","translation","validations","callbacks","classmethods","classmethods","helpermethods","validator","activerecord","activerecorderror","adapternotfound","adapternotspecified","aggregations","classmethods","associationtypemismatch","associations","classmethods","collectionproxy","attributeassignment","attributeassignmenterror","attributemethods","beforetypecast","classmethods","primarykey","classmethods","query","read","classmethods","serialization","classmethods","timezoneconversion","classmethods","write","classmethods","autosaveassociation","classmethods","base","batches","calculations","callbacks","classmethods","configurationerror","connectionadapters","abstractadapter","schemacreation","abstractmysqladapter","schemacreation","column","format","columndumper","connectionhandler","connectionmanagement","connectionpool","queue","reaper","databaselimits","databasestatements","mysql2adapter","mysqladapter","fields","boolean","date","datetime","decimal","float","identity","integer","time","type","statementpool","postgresqladapter","columndefinition","columnmethods","databasestatements","oid","array","bit","boolean","bytea","cidr","date","decimal","float","hstore","identity","integer","json","money","point","range","time","timestamp","type","typemap","vector","quoting","referentialintegrity","schemacreation","schemastatements","statementpool","table","tabledefinition","utils","postgresqlcolumn","arrayparser","cast","querycache","quoting","sqlite3adapter","explainprettyprinter","statementpool","version","schemacache","schemastatements","statementpool","table","tabledefinition","transactionstate","connectionhandling","connectionnotestablished","connectiontimeouterror","core","classmethods","countercache","classmethods","dangerousattributeerror","dynamicmatchers","findby","findbybang","finder","method","explain","findermethods","fixtureset","immutablerelation","inheritance","classmethods","integration","invalidforeignkey","irreversiblemigration","locking","optimistic","classmethods","pessimistic","logsubscriber","migration","checkpending","commandrecorder","straightreversions","migrationproxy","modelschema","classmethods","multiparameterassignmenterrors","nestedattributes","classmethods","toomanyrecords","persistence","classmethods","preparedstatementinvalid","querycache","classmethods","querymethods","wherechain","querying","readonlyrecord","readonlyattributes","classmethods","recordinvalid","recordnotdestroyed","recordnotfound","recordnotsaved","recordnotunique","reflection","classmethods","macroreflection","relation","result","rollback","sqlcounter","sanitization","classmethods","schema","schemamigration","scoping","classmethods","default","classmethods","named","classmethods","serialization","serializationtypemismatch","spawnmethods","staleobjecterror","statementcache","statementinvalid","store","classmethods","tasks","databasealreadyexists","databasenotsupported","databasetasks","testfixtures","classmethods","throwresult","timestamp","transactionisolationerror","transactions","classmethods","translation","unknownattributeerror","unknownprimarykey","validations","classmethods","wrappeddatabaseexception","activesupport","autoload","backtracecleaner","benchmarkable","bufferedlogger","cache","filestore","memcachestore","memorystore","nullstore","store","strategy","localcache","localstore","cachingkeygenerator","callbacks","classmethods","concern","concurrency","latch","configurable","classmethods","configuration","dependencies","classcache","watchstack","deprecation","behavior","deprecatedconstantproxy","deprecatedinstancevariableproxy","deprecatedobjectproxy","methodwrapper","reporting","descendantstracker","duration","fileupdatechecker","filewatcher","backend","gzip","stream","hashwithindifferentaccess","hashwithindifferentaccess","inflector","inflections","inheritableoptions","json","encoding","circularreferenceerror","encoder","variable","keygenerator","logsubscriber","testhelper","mocklogger","logger","simpleformatter","messageencryptor","invalidmessage","messageverifier","invalidsignature","multibyte","chars","unicode","codepoint","unicodedatabase","notifications","event","fanout","subscribers","timed","instrumenter","numberhelper","orderedhash","orderedoptions","perthreadregistry","proxyobject","rescuable","classmethods","safebuffer","safeconcaterror","stringinquirer","subscriber","taggedlogging","testcase","testing","assertions","constantlookup","declarative","isolation","forking","subprocess","proxytestresult","remoteerror","setupandteardown","classmethods","timewithzone","timezone","xmlconverter","disallowedtype","xmlmini","xmlmini_libxmlsax","hashbuilder","xmlmini_nokogirisax","hashbuilder","array","benchmark","bigdecimal","class","date","dateandtime","calculations","datetime","erb","util","enumerable","falseclass","file","float","html","fullsanitizer","linksanitizer","sanitizer","selector","tag","whitelistsanitizer","hash","i18n","exceptionhandler","railtie","integer","kernel","loaderror","logger","simpleformatter","loggersilence","marshal","mime","mimes","nulltype","type","module","mysql","result","stmt","time","nameerror","nilclass","numeric","object","missingsourcefile","process","status","qualifiedconstutils","rails","api","apptask","repotask","task","appbuilder","apprailsloader","application","bootstrap","configuration","finisher","routesreloader","backtracecleaner","configuration","middlewarestackproxy","console","consolemethods","dbconsole","deprecatedconstant","engine",":","configuration","railties","generators","actions","activemodel","base","migration","classmethods","namedbase","testcase","testing","assertions","behaviour","classmethods","setupandteardown","info","initializable","classmethods","collection","initializer","paths","path","root","pluginbuilder","rack","debugger","logtailer","logger","railtie","configurable","classmethods","configuration","server","options","testtask","testinfo","testunitrailtie","version","range","sourceannotationextractor","annotation","string","symbol","thread","time","trueclass","uri","!~()","%()","+()","+()","+()","+()","-()","-()","-()","-()","<<()","<<()","<<()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","===()","===()","=~()","=~()","=~()","get()","post()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","[]=()","__callback_runner_name()","__callback_runner_name_cache()","__generate_callback_runner_name()","__replay__()","__reset_runner()","_attr_readonly()","_dasherize()","_deprecation_warning()","_dump()","_dump_without_zone()","_get()","_handle_render_options()","_insert_callbacks()","_layout_for()","_layout_for()","_load()","_load_without_zone()","_normalize_callback_options()","_original_to_s()","_parse_file()","_prefixes()","_prepare_context()","_routes()","_routes()","_routes_context()","_run_class_setup()","_set_detail()","_set_wrapper_options()","_store_accessors_module()","_to_partial_path()","_url_for_modules()","_with_routes()","abstract!()","abstract_class?()","abstract_railtie?()","accept()","accept=()","accepts()","accepts_nested_attributes_for()","acronym()","action()","action()","action=()","action_has_layout?()","action_methods()","action_methods()","action_methods()","action_methods()","active?()","active?()","active?()","active?()","active?()","active_connection?()","active_connections?()","acts_like?()","acts_like_date?()","acts_like_date?()","acts_like_string?()","acts_like_time?()","acts_like_time?()","acts_like_time?()","adapter_name()","adapter_name()","add()","add()","add()","add()","add()","add()","add_belongs_to()","add_column()","add_column()","add_column_position!()","add_column_sql()","add_delivery_method()","add_error()","add_expr()","add_expr_escaped()","add_expr_literal()","add_filter()","add_flash_types()","add_index()","add_index_length()","add_index_options()","add_index_sort_order()","add_index_sql()","add_on_blank()","add_on_empty()","add_postamble()","add_preamble()","add_reference()","add_renderer()","add_shebang_option!()","add_silencer()","add_source()","add_stmt()","add_text()","add_timestamps()","add_timestamps_sql()","add_to_transaction()","add_transaction_record()","added?()","advance()","advance()","advance()","advance()","after()","after()","after_action()","after_commit()","after_initialize()","after_rollback()","after_teardown()","after_teardown()","after_validation()","ago()","ago()","ago()","ago()","ago()","ago()","alert()","alert=()","alias_attribute()","alias_attribute()","alias_method_chain()","alias_type()","alias_type()","all()","all()","all()","all()","all()","all_day()","all_helpers_from_path()","all_month()","all_paths()","all_quarter()","all_week()","all_year()","allow_concurrency?()","allowed_index_name_length()","allowed_index_name_length()","announce()","anonymous?()","any()","any()","any?()","any?()","any_waiting?()","api_behavior()","api_dir()","api_dir()","api_location()","api_main()","app()","app()","app()","app()","app()","app()","app()","app()","app=()","app_generators()","app_middleware()","append_after_action()","append_around_action()","append_before_action()","append_features()","append_view_path()","append_view_path()","application()","application_name()","application_trace()","apply_join_dependency()","arel()","arel_engine()","arel_table()","arguments()","around_action()","array_to_string()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","assert_blank()","assert_class_method()","assert_difference()","assert_directory()","assert_dom_equal()","assert_dom_not_equal()","assert_emails()","assert_field_default_value()","assert_field_type()","assert_file()","assert_generates()","assert_index()","assert_instance_method()","assert_method()","assert_migration()","assert_no_difference()","assert_no_directory()","assert_no_emails()","assert_no_file()","assert_no_migration()","assert_no_tag()","assert_not()","assert_nothing_raised()","assert_present()","assert_recognizes()","assert_redirected_to()","assert_response()","assert_routing()","assert_select()","assert_select_email()","assert_select_encoded()","assert_tag()","assert_template()","assert_valid_keys()","asset_path()","asset_url()","assign_attributes()","assigns()","assume_migrated_upto_version()","at()","at()","at()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_day()","at_beginning_of_hour()","at_beginning_of_hour()","at_beginning_of_minute()","at_beginning_of_minute()","at_beginning_of_month()","at_beginning_of_quarter()","at_beginning_of_week()","at_beginning_of_year()","at_end_of_day()","at_end_of_day()","at_end_of_day()","at_end_of_hour()","at_end_of_hour()","at_end_of_minute()","at_end_of_minute()","at_end_of_month()","at_end_of_quarter()","at_end_of_week()","at_end_of_year()","at_midnight()","at_midnight()","at_midnight()","at_with_coercion()","at_without_coercion()","atom_feed()","atomic_write()","attach_to()","attachments()","attachments()","attr_internal()","attr_internal_accessor()","attr_internal_reader()","attr_internal_writer()","attr_readonly()","attribute_for_inspect()","attribute_match()","attribute_method?()","attribute_method?()","attribute_method?()","attribute_method_affix()","attribute_method_prefix()","attribute_method_suffix()","attribute_missing()","attribute_names()","attribute_names()","attribute_present?()","attributes()","attributes=()","attributes_before_type_cast()","attributes_hash()","attributes_names()","audio_path()","audio_tag()","audio_url()","authenticate()","authenticate()","authenticate()","authenticate()","authenticate_or_request_with_http_basic()","authenticate_or_request_with_http_digest()","authenticate_or_request_with_http_token()","authenticate_with_http_basic()","authenticate_with_http_digest()","authenticate_with_http_token()","authentication_header()","authentication_request()","authentication_request()","authentication_request()","authorization()","auto_discovery_link_tag()","autoload()","autoload_at()","autoload_once()","autoload_once_paths()","autoload_paths()","autoload_paths()","autoload_under()","autoloads()","available_action?()","available_environments()","average()","await()","await_commit()","backend()","backend()","backend=()","backend=()","backtrace_cleaner()","banner()","base_class()","base_name()","base_root()","basename()","becomes()","becomes!()","before()","before()","before_action()","before_configuration()","before_eager_load()","before_filters()","before_initialize()","before_setup()","before_setup()","before_validation()","begin_db_transaction()","begin_db_transaction()","begin_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","begin_isolated_db_transaction()","beginning_of_day()","beginning_of_day()","beginning_of_day()","beginning_of_hour()","beginning_of_hour()","beginning_of_minute()","beginning_of_minute()","beginning_of_month()","beginning_of_quarter()","beginning_of_week()","beginning_of_week()","beginning_of_week=()","beginning_of_year()","behavior()","behavior=()","belongs_to()","belongs_to()","belongs_to()","belongs_to?()","benchmark()","between?()","bin()","bin()","bind()","bind()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","block_format()","body()","body()","body()","body()","body=()","body_parts()","breakpoint()","browser_generated_types()","build()","build()","build()","build()","build()","build()","build()","build_arel()","build_mem_cache()","build_request()","build_response()","button()","button_tag()","button_to()","button_to_function()","byte()","bytes()","cache()","cache()","cache()","cache()","cache_attribute?()","cache_attributes()","cache_fixtures()","cache_for_connection()","cache_fragment_name()","cache_if()","cache_key()","cache_store()","cache_store=()","cache_template_loading()","cache_template_loading=()","cache_unless()","cached_attributes()","cached_fixtures()","calculate()","calculate_ip()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_app()","camelcase()","camelize()","camelize()","capify!()","capitalize()","capture()","capture()","case_insensitive_comparison()","case_insensitive_comparison()","case_sensitive_equality_operator()","case_sensitive_modifier()","case_sensitive_modifier()","cattr_accessor()","cattr_reader()","cattr_writer()","cdata_block()","cdata_section()","change()","change()","change()","change()","change_column()","change_column()","change_column_default()","change_column_default()","change_column_default()","change_column_null()","change_column_null()","change_column_null()","change_column_null()","change_column_sql()","change_default()","change_table()","change_table()","changed()","changed?()","changed_attributes()","changed_for_autosave?()","changes()","characters()","charset()","charset()","charset_current()","check_box()","check_box()","check_box_tag()","check_class_collision()","check_pending!()","checkin()","checkout()","children()","cidr()","cidr_to_string()","civil_from_format()","class()","class_attribute()","class_eval()","class_name()","class_name()","class_path()","classify()","classify()","clean()","cleanup()","cleanup()","cleanup()","cleanup()","cleanup!()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear!()","clear!()","clear_action_methods!()","clear_active_connections!()","clear_all_connections!()","clear_cache()","clear_cache!()","clear_cache!()","clear_cache!()","clear_cache!()","clear_helpers()","clear_log()","clear_query_cache()","clear_reloadable_connections!()","clear_reloadable_connections!()","clear_respond_to()","clear_table_cache!()","clear_validators!()","client_encoding()","client_min_messages()","client_min_messages=()","clone()","clone_empty()","close()","close()","close()","close()","code()","collation()","collation()","collation()","collation_current()","collection()","collection_check_boxes()","collection_check_boxes()","collection_radio_buttons()","collection_radio_buttons()","collection_select()","collection_select()","color()","color_field()","color_field_tag()","colorize_logging()","colorize_logging=()","column()","column()","column()","column_defaults()","column_defaults()","column_exists?()","column_exists?()","column_for_attribute()","column_name_length()","column_names()","column_spec()","columns()","columns()","columns()","columns()","columns()","columns_for_remove()","columns_hash()","columns_hash()","columns_per_multicolumn_index()","columns_per_table()","commit!()","commit_db_transaction()","commit_db_transaction()","committed?()","committed?()","comparable_time()","compare_with_coercion()","compare_with_coercion()","compare_without_coercion()","compare_without_coercion()","compile_methods!()","compile_methods!()","component_root_dir()","component_root_dir()","compose()","compose()","composed_of()","compress()","compute_asset_extname()","compute_asset_host()","compute_asset_path()","compute_tags()","compute_type()","concat()","concat()","concat()","concat()","concern()","concerns()","config()","config()","config()","config()","config()","config()","config()","config()","config_accessor()","configru()","configuration()","configure()","configure()","configure_rdoc_files()","connected?()","connected?()","connected?()","connection()","connection()","connection()","connection()","connection_config()","connection_handler()","connection_handler()","connection_handler=()","connection_id()","connection_id=()","connection_pool()","connection_pool_list()","connection_pools()","console()","const_missing()","constantize()","constantize()","constraints()","constraints()","construct_join_dependency_for_association_find()","construct_limited_ids_condition()","construct_relation_for_association_calculations()","construct_relation_for_association_find()","consumes?()","contains_bad_protocols?()","content_columns()","content_for()","content_for?()","content_length()","content_mime_type()","content_tag()","content_tag()","content_tag_for()","content_type()","content_type()","content_type=()","content_type=()","controller()","controller()","controller()","controller_class()","controller_class=()","controller_name()","controller_name()","controller_path()","controller_path()","controller_path()","controller_path=()","convert_key()","convert_key()","convert_to_model()","convert_to_model()","convert_value()","convert_value()","cookie_jar()","cookies()","cookies()","cookies()","cookies()","copy()","count()","count()","count()","count_by_sql()","create()","create()","create()","create()","create()","create()","create()","create!()","create!()","create!()","create_all()","create_current()","create_database()","create_database()","create_database_url()","create_fixtures()","create_fixtures()","create_generated_attribute()","create_join_table()","create_reflection()","create_savepoint()","create_savepoint()","create_savepoint()","create_savepoint()","create_schema()","create_table()","create_table()","create_with()","csrf_meta_tag()","csrf_meta_tags()","css_select()","ctype()","current()","current()","current()","current_config()","current_cycle()","current_database()","current_database()","current_hash()","current_hash()","current_page?()","current_savepoint_name()","current_schema()","custom()","custom()","cycle()","dangerous_attribute_method?()","dasherize()","dasherize()","database_configuration()","database_yml()","date()","date=()","date?()","date_field()","date_field_tag()","date_select()","date_select()","daterange()","datetime_field()","datetime_field_tag()","datetime_local_field()","datetime_local_field_tag()","datetime_select()","datetime_select()","day()","days()","days_ago()","days_in_month()","days_since()","days_to_week_start()","db()","debug()","debugger()","debugger?()","decode()","decode_credentials()","decode_credentials()","decode_credentials_header()","decompose()","decompose()","decompress()","deconstantize()","deconstantize()","decrement()","decrement()","decrement()","decrement()","decrement()","decrement!()","decrement_counter()","decrement_open_transactions()","decrypt_and_verify()","deep_dup()","deep_dup()","deep_dup()","deep_merge()","deep_merge!()","deep_munge()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys()","deep_stringify_keys!()","deep_stringify_keys!()","deep_stringify_keys!()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys()","deep_symbolize_keys!()","deep_transform_keys()","deep_transform_keys!()","default()","default()","default()","default_action()","default_aliases_for_option()","default_for_option()","default_generator_root()","default_hsts_options()","default_i18n_subject()","default_inspect()","default_inspect()","default_options()","default_options=()","default_primary_key_type()","default_render()","default_render()","default_scope()","default_scopes?()","default_sequence_name()","default_source_root()","default_url_options()","default_url_options()","default_url_options=()","default_url_options=()","default_value_for_option()","defaults()","define()","define()","define_attribute_method()","define_attribute_methods()","define_callbacks()","define_method_attribute()","define_method_attribute()","define_method_attribute=()","define_method_attribute=()","define_model_callbacks()","delegate()","delegate_to()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete?()","delete_all()","delete_all()","delete_cookie()","delete_entry()","delete_entry()","delete_matched()","delete_matched()","delete_matched()","delete_matched()","delete_sql()","delete_via_redirect()","deliver()","demodulize()","demodulize()","dependencies()","dependencies()","deprecate()","deprecate()","deprecate_methods()","deprecation_warning()","desc()","desc()","descendants()","descendants()","descends_from_active_record?()","describe()","destination()","destroy()","destroy()","destroy()","destroy()","destroy!()","destroy_all()","destroy_all()","destroy_session()","destroy_session()","destroyed?()","destroyed_by_association()","destroyed_by_association=()","detail_args_for()","details_for_lookup()","determine_default_controller_class()","determine_default_helper_class()","determine_default_mailer()","diff()","digest()","digest()","direct_descendants()","direct_descendants()","directories()","dirname()","dirties_query_cache()","disable_cache()","disable_ddl_transaction!()","disable_extension()","disable_query_cache!()","disable_referential_integrity()","discard()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","disconnect!()","dispatch()","display()","display()","display_errors()","distance_of_time_in_words()","distance_of_time_in_words_to_now()","distinct()","distinct()","distinct()","div_for()","dom_class()","dom_class()","dom_class()","dom_id()","dom_id()","dom_id()","domain()","down()","downcase()","downcase()","drop()","drop_all()","drop_current()","drop_database_url()","drop_join_table()","drop_schema()","drop_table()","drop_table()","dst?()","dup()","dup()","dup()","dup()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duplicable?()","duration()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","eager_autoload()","eager_load()","eager_load()","eager_load!()","eager_load!()","eager_load_namespaces()","eager_load_paths()","eager_loading?()","email_field()","email_field_tag()","emitted_hidden_id?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_insert_statement_value()","empty_insert_statement_value()","emulate_booleans()","enable_extension()","enable_query_cache!()","enable_warnings()","encode()","encode()","encode!()","encode_credentials()","encode_credentials()","encode_credentials()","encode_json()","encode_with()","encode_with()","encode_with()","encode_with()","encode_with()","encoding()","encoding()","encoding=()","encoding_aware?()","encrypt_and_sign()","encrypted()","end_document()","end_element()","end_of_day()","end_of_day()","end_of_day()","end_of_hour()","end_of_hour()","end_of_minute()","end_of_minute()","end_of_month()","end_of_quarter()","end_of_week()","end_of_year()","endpoint()","endpoint()","engine()","engine=()","engine?()","engines()","enlist_fixture_connections()","enumerate()","env()","env()","env=()","env_config()","env_config()","env_filter()","environment()","environment()","environment()","environment?()","eof?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql_with_coercion()","eql_without_coercion()","error()","error_message()","error_number()","error_wrapping()","errors()","errors()","escape()","escape_bytea()","escape_glob_chars()","escape_javascript()","escape_once()","establish_connection()","establish_connection()","etag()","etag=()","etag_matches?()","exabyte()","exabytes()","except()","except()","except!()","excerpt()","exclude?()","exclude?()","exec_app_rails()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_delete()","exec_insert()","exec_insert()","exec_insert()","exec_migration()","exec_query()","exec_query()","exec_query()","exec_query()","exec_query()","exec_update()","exec_update()","exec_update()","exec_update()","exec_update()","exec_without_stmt()","execute()","execute()","execute()","execute()","execute()","execute()","execute_and_free()","execute_hook()","execute_if_updated()","exist?()","exist?()","existent()","existent_directories()","exists?()","exists?()","expand_cache_key()","expand_hash_conditions_for_aggregates()","expanded()","expected_response()","expire()","expire_fragment()","expires_in()","expires_now()","explain()","explain()","explain()","explain()","ext()","extending()","extension_enabled?()","extensions()","extensions()","extify()","extract!()","extract_annotations_from()","extract_bounds()","extract_domain()","extract_options!()","extract_schema_and_table()","extract_session_id()","extract_subdomain()","extract_subdomains()","extract_value_from_default()","extractable_options?()","extractable_options?()","extractable_options?()","extractable_options?()","fallbacks()","favicon_link_tag()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","field_set_tag()","fields_for()","fields_for()","fifth()","file_field()","file_field()","file_field_tag()","file_path()","filename()","filter()","filter()","filter_by()","filter_proxies()","filtered_env()","filtered_location()","filtered_parameters()","filtered_path()","filtered_query_string()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all_tag()","find_beginning_of_week!()","find_by()","find_by!()","find_by_sql()","find_cmd_and_exec()","find_dependencies()","find_each()","find_executable()","find_first()","find_in()","find_in_batches()","find_last()","find_one()","find_or_create_by()","find_or_create_by!()","find_or_initialize_by()","find_some()","find_tag()","find_take()","find_template()","find_tzinfo()","find_with_associations()","find_with_ids()","find_zone()","find_zone!()","finder()","finder()","finder()","finish()","finish()","finish()","finish()","finish()","first()","first()","first()","first()","first!()","fixture_file_upload()","fixture_is_cached?()","fixtures()","flash()","flash()","flush()","flush()","flush_all!()","flush_newline_if_pending()","follow_redirect!()","font_path()","font_url()","for_class()","for_id()","for_tag()","force_ssl()","force_ssl_redirect()","foreign_key()","foreign_key()","forking_env?()","form_authenticity_param()","form_authenticity_token()","form_data?()","form_for()","form_tag()","format()","format=()","format_paragraph()","formats()","formats=()","formatted_offset()","formatted_offset()","formatted_offset()","formatted_offset()","fortnight()","fortnights()","forty_two()","fourth()","fragment_cache_key()","fragment_exist?()","framework_trace()","framework_version()","frameworks()","freeze()","freeze()","fresh?()","fresh_when()","from()","from()","from()","from_json()","from_now()","from_now()","from_rails_root()","from_response()","from_session_value()","from_trusted_xml()","from_xml()","from_xml()","frozen?()","full_message()","full_messages()","full_messages_for()","full_trace()","fullpath()","future?()","future?()","future?()","gem()","gem_group()","gemfile()","gemfile()","gemfile_entry()","gemspec()","generate()","generate()","generate_key()","generate_key()","generate_message()","generate_method_for_mime()","generate_railtie_name()","generate_sid()","generate_test_dummy()","generated_feature_methods()","generator()","generator_name()","generators()","get()","get()","get()","get()","get()","get?()","get_session()","get_via_redirect()","getgm()","getlocal()","getutc()","getutc()","gigabyte()","gigabytes()","git()","gitignore()","gitignore()","gmt?()","gmt_offset()","gmtime()","gmtoff()","grapheme_length()","group()","grouped_collection_select()","grouped_collection_select()","grouped_options_for_select()","groups()","h()","ha1()","halted_callback()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","handle_unverified_request()","handler_for_rescue()","handles_encoding?()","has_and_belongs_to_many()","has_attribute?()","has_errors?()","has_key?()","has_many()","has_one()","has_secure_password()","hash()","hash()","having()","head()","head()","head()","head?()","header()","header()","headers()","headers()","headers=()","help()","helper()","helper()","helper_attr()","helper_class()","helper_method()","helper_method()","helpers()","helpers()","helpers_paths()","hidden_actions()","hidden_field()","hidden_field()","hidden_field_tag()","hidden_namespaces()","hide!()","hide_action()","hide_namespace()","hide_namespaces()","highlight()","hook_for()","host()","host()","host=()","host_with_port()","hour()","hours()","hstore()","hstore_to_string()","html?()","html_document()","html_escape()","html_escape_once()","html_safe()","html_safe?()","html_safe?()","html_safe?()","http_basic_authenticate_with()","httpdate()","https!()","https?()","human()","human()","human_attribute_name()","human_name()","humanize()","humanize()","i18n_scope()","i18n_scope()","id()","id=()","id?()","id_before_type_cast()","identify()","identity()","ids()","if_modified_since()","if_modified_since=()","if_none_match()","if_none_match=()","if_none_match_etags()","image_alt()","image_path()","image_submit_tag()","image_tag()","image_url()","in()","in()","in()","in?()","in_char_class?()","in_clause_length()","in_groups()","in_groups_of()","in_time_zone()","in_time_zone()","in_time_zone()","in_time_zone()","in_time_zone()","include?()","include?()","include?()","include_fallbacks_module()","include_with_range?()","included()","includes()","increment()","increment()","increment()","increment()","increment()","increment!()","increment_counter()","increment_open_transactions()","indent()","indent()","indent!()","index()","index()","index()","index_algorithms()","index_algorithms()","index_algorithms()","index_by()","index_exists?()","index_exists?()","index_helper()","index_name()","index_name_exists?()","index_name_for_remove()","index_name_length()","index_name_length()","indexes()","indexes_per_table()","inet()","infinity()","infinity?()","inflections()","info_signal()","inheritable_copy()","inheritance_column()","inheritance_column=()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","inherited()","init_fallbacks()","init_with()","initialize()","initialize!()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_generated_modules()","initialize_i18n()","initialize_schema_migrations_table()","initialize_schema_migrations_table()","initialize_sid()","initialize_test_deliveries()","initialized?()","initialized?()","initializer()","initializer()","initializers()","initializers()","initializers_chain()","initializers_for()","inquiry()","insert()","insert()","insert()","insert()","insert_after()","insert_after()","insert_before()","insert_before()","insert_fixture()","insert_sql()","insert_sql()","insert_sql()","inside_template()","inside_template?()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","instance()","instance()","instance_method_already_implemented?()","instance_values()","instance_variable_names()","instantiate()","instantiate_all_loaded_fixtures()","instantiate_fixtures()","instrument()","instrument()","instrument()","instrument=()","instrumenter()","int4range()","int8range()","internal?()","internal_methods()","invalid?()","inverse_of()","invoke()","ip()","ips_from()","irregular()","is_a?()","is_missing?()","is_missing?()","is_utf8?()","isdst()","iso8601()","isolate_namespace()","j()","javascript_include_tag()","javascript_path()","javascript_tag()","javascript_url()","javascripts()","joined_includes_values()","joins()","joins_per_query()","json()","json_escape()","json_regexp()","json_resource_errors()","json_to_string()","keep()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_generator()","key_matcher()","keys()","keys()","keys()","kilobyte()","kilobytes()","kind()","kind()","kind_of?()","klass()","klass()","l()","l()","label()","label()","label_tag()","last()","last()","last()","last()","last()","last()","last!()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_inserted_id()","last_modified()","last_modified=()","last_modified?()","last_month()","last_quarter()","last_week()","last_year()","layout()","lease()","length()","length()","length()","length()","length()","lib()","lib()","lib()","license()","limit()","limit()","limited_update_conditions()","limited_update_conditions()","link_to()","link_to_function()","link_to_if()","link_to_unless()","link_to_unless_current()","listeners_for()","listening?()","load()","load()","load_and_configure_sdoc()","load_and_configure_sdoc()","load_console()","load_generators()","load_paths()","load_rack_cache()","load_runner()","load_seed()","load_seed()","load_session()","load_session()","load_target()","load_tasks()","load_with_autoloading()","loaded?()","local()","local?()","local_constant_names()","local_offset()","local_time()","local_to_utc()","localize()","localize()","locals_for()","localtime()","location()","location()","location=()","location=()","lock()","lock!()","locking_column()","locking_column=()","locking_enabled?()","log()","log()","log()","log_error()","log_level()","log_path()","log_subscribers()","logged()","logger()","logger()","logger()","logger()","logger()","logger()","lookup()","lookup_ancestors()","lookup_by_extension()","lookup_context()","lookup_store()","ltree()","macaddr()","mail()","mail_to()","mailer()","mailer_class()","mailer_name()","mailer_name()","many?()","many?()","many?()","mark_for_destruction()","marked_for_destruction?()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_load()","marshal_load()","marshal_load()","match()","match()","match()","match()","match?()","mattr_accessor()","mattr_reader()","mattr_writer()","maximum()","mb_chars()","media_type()","megabyte()","megabytes()","member()","merge()","merge()","merge()","merge()","merge!()","message()","message()","method()","method_added()","method_for_action()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_symbol()","middleware()","middleware()","middleware()","middleware()","midnight()","midnight()","midnight()","migrate()","migrate()","migration_keys()","migration_keys()","migration_template()","migrations_paths()","mime_type()","minimum()","minus_with_coercion()","minus_without_coercion()","minus_without_duration()","minute()","minutes()","missing_name()","missing_name?()","model_name()","model_name_from_record_or_class()","model_name_from_record_or_class()","module_namespacing()","modules_for_helpers()","modules_for_helpers()","monday()","month()","month_field()","month_field_tag()","months()","months_ago()","months_since()","mount()","ms()","mtime()","multipart=()","multiple_of?()","mute()","name()","name()","names()","namespace()","namespace()","namespace()","namespace()","namespaced?()","namespaced_class_path()","namespaced_file_path()","namespaced_path()","native_database_types()","native_database_types()","navigation_behavior()","navigation_location()","negotiate_format()","negotiate_mime()","nested()","nested_dependencies()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","nested_under_indifferent_access()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_constants()","new_from_hash_copying_default()","new_from_hash_copying_default()","new_record?()","new_session()","next_element()","next_key()","next_migration_number()","next_month()","next_quarter()","next_selector()","next_week()","next_year()","nil?()","no_color!()","no_routes()","no_routes()","nonce()","none()","normalize()","normalize()","normalize_name()","normalize_path()","not()","not_modified?()","notice()","notice=()","now()","now()","now_is_loaded?()","nth_child()","num_waiting()","number_field()","number_field_tag()","number_to_currency()","number_to_currency()","number_to_delimited()","number_to_human()","number_to_human()","number_to_human_size()","number_to_human_size()","number_to_percentage()","number_to_percentage()","number_to_phone()","number_to_phone()","number_to_rounded()","number_with_delimiter()","number_with_precision()","numrange()","object()","odd?()","offset()","on_cdata_block()","on_characters()","on_end_document()","on_end_element()","on_load()","on_start_document()","on_start_element()","only()","only_child()","opaque()","open()","open()","open_session()","open_transactions()","opt_parser()","optimize_routes_generation?()","option_groups_from_collection_for_select()","optional_port()","options_for()","options_for_select()","options_from_collection_for_select()","options_include_default?()","order()","ordinal()","ordinal()","ordinalize()","ordinalize()","original_concat()","original_fullpath()","original_url()","outside_transaction?()","overlaps?()","pack_graphemes()","page_cache_extension()","page_cache_extension=()","param_key()","parameter_filter()","parameter_filter_for()","parameterize()","parameterize()","parameters()","paramify_values()","params()","params()","params()","params=()","params=()","params_array_from()","parent()","parent_name()","parent_of?()","parent_prefixes()","parents()","parse()","parse()","parse!()","parse_arguments()","parse_arguments()","parse_data_with_trailing_star()","parse_error()","parse_query()","parse_trailing_star()","parser()","password=()","password_confirmation=()","password_field()","password_field_tag()","past?()","past?()","past?()","patch()","patch()","patch()","patch?()","patch_via_redirect()","path()","path()","path()","path()","path()","path=()","path_parameters()","path_to_asset()","path_to_audio()","path_to_font()","path_to_image()","path_to_javascript()","path_to_stylesheet()","path_to_video()","paths()","paths()","pattern()","performed?()","period()","period_for_local()","period_for_utc()","permanent()","permit()","permit!()","permitted?()","persisted?()","persisted?()","petabyte()","petabytes()","phone_field()","phone_field_tag()","pk_and_sequence_for()","pluck()","plural()","plural()","plural_file_name()","plural_name()","plural_table_name()","pluralize()","pluralize()","pluralize()","pluralize_table_names?()","point_to_string()","poll()","polymorphic_path()","polymorphic_url()","populate_with_current_scope_attributes()","port()","port=()","port_string()","post()","post()","post()","post?()","post_via_redirect()","postgresql_version()","prefetch_primary_key?()","prefix()","prefix()","prefix()","preload()","prepare!()","prepare!()","prepare_column_options()","prepare_column_options()","prepare_controller_class()","prepend_after_action()","prepend_around_action()","prepend_before_action()","prepend_view_path()","prepend_view_path()","presence()","present?()","pretty_print()","prev_month()","prev_quarter()","prev_week()","prev_year()","previous_changes()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key()","primary_key=()","primary_keys()","process()","process()","process()","process()","process()","process_action()","process_action()","process_action()","process_action()","process_attributes_for()","process_node()","process_node()","process_node()","process_node()","property()","protect_against_forgery?()","protect_from_forgery()","protocol()","provide()","proxy_association()","proxy_class()","proxy_class=()","prune()","pruning?()","public_directory()","public_path()","publish()","publish()","publish()","purge()","push()","put()","put()","put()","put?()","put_via_redirect()","qualified_const_defined?()","qualified_const_get()","qualified_const_set()","query()","query_attribute()","query_parameters()","quietly()","quote()","quote()","quote()","quote_column_name()","quote_string()","quote_string()","quote_table_name()","quote_table_name()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quote_table_name_for_assignment()","quoted_columns_for_index()","quoted_columns_for_index()","quoted_date()","quoted_false()","quoted_false()","quoted_id()","quoted_locking_column()","quoted_primary_key()","quoted_table_name()","quoted_true()","quoted_true()","rack_app()","rack_cookies()","radio_button()","radio_button()","radio_button_tag()","rails_version()","rails_version()","railtie_name()","railtie_namespace()","railties()","raise()","raise_if_absolute()","rake()","rake_tasks()","rakefile()","rakefile()","rakefile()","range_field()","range_field_tag()","range_to_string()","raw()","raw_connection()","raw_host_with_port()","raw_params()","raw_post()","raw_write_attribute()","read()","read()","read()","read()","read_attribute()","read_attribute_before_type_cast()","read_entry()","read_entry()","read_fragment()","read_multi()","read_multi()","read_store_attribute()","readable_inspect()","readable_inspect()","readme()","readme()","readme()","readonly()","readonly!()","readonly?()","readonly_attributes()","reap()","receive()","receive()","reconnect!()","reconnect!()","reconnect!()","reconnect!()","record()","record_key_for_dom_id()","recreate_database()","recycle!()","redefine_method()","redirect()","redirect_to()","redirect_to()","redirect_to()","redirect_to()","redirect_to_url()","redirect_url()","ref()","ref()","ref()","references()","references()","references()","reflect_on_aggregation()","reflect_on_all_aggregations()","reflect_on_all_associations()","reflect_on_all_autosave_associations()","reflect_on_association()","refresh()","regexp()","register()","register()","register_alias()","register_callback()","register_interceptor()","register_interceptors()","register_observer()","register_observers()","register_task()","register_tracker()","register_type()","register_type()","registered_type?()","regular_class_path()","regular_update()","regular_update()","regular_writer()","regular_writer()","release()","release_connection()","release_savepoint()","release_savepoint()","release_savepoint()","release_savepoint()","reload()","reload()","reload()","reload!()","reload!()","reload_routes!()","remote_addr=()","remote_ip()","remove()","remove()","remove_belongs_to()","remove_belongs_to()","remove_column()","remove_column()","remove_column_sql()","remove_columns()","remove_columns_sql()","remove_connection()","remove_connection()","remove_filters!()","remove_hook_for()","remove_index()","remove_index()","remove_index_sql()","remove_possible_method()","remove_reference()","remove_references()","remove_silencers!()","remove_timestamps()","remove_timestamps()","remove_timestamps_sql()","remove_tracker()","rename()","rename_column()","rename_column()","rename_column_indexes()","rename_column_sql()","rename_index()","rename_index()","rename_index()","rename_key()","rename_table()","rename_table()","rename_table()","rename_table()","rename_table_indexes()","render()","render()","render()","render()","render()","render()","render()","render()","render_bind()","render_body()","render_collection()","render_collection()","render_partial()","render_partial()","render_template()","render_to_body()","render_to_body()","render_to_body()","render_to_string()","render_to_string()","rendered_views()","rendered_views()","reorder()","reorder_characters()","replace()","replace()","replace()","reqs()","request()","request_http_basic_authentication()","request_http_digest_authentication()","request_http_token_authentication()","request_method()","request_method=()","request_method_symbol()","request_parameters()","request_uri=()","request_via_redirect()","require()","require_debugger()","require_engine()","require_fixture_classes()","require_tzinfo()","required()","requires_reloading?()","requires_reloading?()","rescue_action_without_handler()","rescue_from()","rescue_template()","rescue_with_handler()","rescue_with_handler()","reset()","reset!()","reset!()","reset!()","reset!()","reset!()","reset!()","reset_cache()","reset_callbacks()","reset_column_information()","reset_counters()","reset_cycle()","reset_locking_column()","reset_runtime()","reset_sequence!()","reset_session()","reset_session()","resolve()","resolve()","resource()","resource_errors()","resource_location()","resourceful?()","resources()","resources_path_names()","respond()","respond_to()","respond_to()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","respond_to_without_attributes?()","respond_with()","response()","response()","response_body=()","response_body=()","response_body=()","response_code()","response_from_page()","response_overridden?()","result()","result()","result()","retrieve_connection()","retrieve_connection_pool()","reverse()","reverse_merge()","reverse_merge()","reverse_merge()","reverse_merge!()","reverse_merge!()","reverse_merge!()","reverse_order()","reverse_update()","reversible()","revert()","revert()","reverting?()","rewind()","rewrite_param_values()","rfc2822()","rfc822()","rollback_active_record_state!()","rollback_db_transaction()","rollback_db_transaction()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rollback_to_savepoint()","rolledback?()","root()","root()","root()","root=()","route()","route_key()","route_url()","routes()","run()","run()","run()","run()","run_callbacks()","run_generator()","run_in_isolation()","run_in_isolation()","run_in_transaction?()","run_initializers()","run_load_hooks()","runner()","runtime()","runtime=()","safe_concat()","safe_concat()","safe_constantize()","safe_constantize()","safe_get()","safe_join()","sandbox?()","sanitize()","sanitize()","sanitize()","sanitize_conditions()","sanitize_css()","sanitize_css()","sanitize_limit()","sanitize_sql()","sanitize_sql_array()","sanitize_sql_for_assignment()","sanitize_sql_for_conditions()","sanitize_sql_hash()","sanitize_sql_hash_for_assignment()","sanitize_sql_hash_for_conditions()","sanitizeable?()","sanitizeable?()","save()","save()","save()","save!()","save!()","say()","say_with_time()","schema_cache=()","schema_creation()","schema_creation()","schema_creation()","schema_exists?()","schema_names()","schema_search_path()","schema_search_path=()","scope()","scope()","scope()","scope_for_create()","scoping()","scoping()","search_field()","search_field_tag()","second()","second()","seconds()","seconds_since_midnight()","seconds_since_midnight()","seconds_to_utc_offset()","seconds_until_end_of_day()","seconds_until_end_of_day()","secret_token()","section()","section()","section_title()","section_title()","select()","select()","select()","select()","select()","select()","select()","select()","select_all()","select_all()","select_date()","select_datetime()","select_day()","select_first()","select_hour()","select_minute()","select_month()","select_one()","select_rows()","select_rows()","select_rows()","select_rows()","select_rows()","select_second()","select_tag()","select_time()","select_value()","select_values()","select_year()","selector()","send_action()","send_data()","send_data()","send_data()","send_file()","send_file()","send_file()","sequence_name()","sequence_name=()","serial_sequence()","serializable_hash()","serializable_hash()","serialize()","serialized_attributes()","serialized_attributes()","server_port()","server_software()","session()","session_auth=()","session_options=()","session_store()","set()","set_callback()","set_content_type()","set_cookie()","set_environment()","set_environment!()","set_expected_mail()","set_fixture_class()","set_logger()","set_member_mappings_for_resource()","set_response!()","set_session()","set_standard_conforming_strings()","set_state()","setup()","setup()","setup_controller_request_and_response()","setup_fixture_accessors()","setup_fixtures()","setup_horo_variables()","setup_subscriptions()","setup_with_controller()","shallow()","shallow?()","show_detailed_exceptions?()","show_exceptions_app()","show_variable()","signature()","signed()","signed_or_encrypted()","silence()","silence()","silence()","silence()","silence!()","silence_stream()","silence_warnings()","simple_format()","simple_selector()","since()","since()","since()","since()","since()","since()","singular()","singular()","singular_route_key()","singular_table_name()","singularize()","singularize()","size()","size()","size()","size()","size()","size()","size()","skip_action_callback()","skip_after_action()","skip_around_action()","skip_before_action()","skip_callback()","skip_filter()","slice()","slice()","slice()","slice!()","slice!()","source_extract()","source_root()","split()","split()","sql()","sql_for_insert()","sql_for_insert()","sql_query_length()","sqlite_version()","squish()","squish!()","stale?()","stale_session_check!()","standard_port()","standard_port?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start_document()","start_element()","start_processing()","started_request_message()","stats()","status()","status=()","status=()","status_code()","status_code_for_exception()","status_message()","sti_name()","store()","store()","store_accessor()","store_inherited()","strftime()","strict_mode?()","string_to_array()","string_to_bit()","string_to_cidr()","string_to_hstore()","string_to_json()","string_to_point()","string_to_time()","stringify_keys()","stringify_keys()","stringify_keys()","stringify_keys!()","stringify_keys!()","stringify_keys!()","strip_heredoc()","strip_links()","strip_tags()","structure_dump()","structure_load()","stylesheet_link_tag()","stylesheet_path()","stylesheet_url()","stylesheets()","subclasses()","subclasses()","subclasses()","subdomain()","subdomains()","submit()","submit_tag()","subquery_for()","subquery_for()","subscribe()","subscribe()","subscribed()","subscribers()","substitute_at()","substitute_at()","suffix()","suffix()","sum()","sum()","sunday()","superclass_delegating_accessor()","supports_add_column?()","supports_bulk_alter?()","supports_count_distinct?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_ddl_transactions?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_explain?()","supports_extensions?()","supports_extensions?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_index_sort_order?()","supports_insert_with_returning?()","supports_migrations?()","supports_migrations?()","supports_migrations?()","supports_partial_index?()","supports_partial_index?()","supports_primary_key?()","supports_primary_key?()","supports_ranges?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_savepoints?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_statement_cache?()","supports_streaming?()","supports_streaming?()","supports_transaction_isolation?()","supports_transaction_isolation?()","supports_transaction_isolation?()","suppress()","suppress_messages()","swap()","swap()","swapcase()","swapcase()","swapcase_mapping()","symbolize_keys()","symbolize_keys()","symbolize_keys()","symbolize_keys!()","symbolized_base_class()","symbolized_path_parameters()","symbolized_sti_name()","symbols()","t()","t()","table_alias_for()","table_alias_length()","table_alias_length()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_exists?()","table_name()","table_name()","table_name()","table_name=()","table_name_length()","table_rows()","table_structure()","tableize()","tableize()","tables()","tables()","tag()","tag()","tagged()","tail!()","take()","take!()","target()","teardown()","teardown()","teardown_fixtures()","teardown_subscriptions()","telephone_field()","telephone_field_tag()","template()","template_exists?()","terabyte()","terabytes()","test()","test()","test()","test_dummy_assets()","test_dummy_clean()","test_dummy_config()","test_errors_aref()","test_methods()","test_model_naming()","test_persisted?()","test_to_key()","test_to_param()","test_to_partial_path()","tests()","tests()","tests()","tests()","text_area()","text_area_tag()","text_field()","text_field_tag()","third()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","threadsafe!()","tidy_bytes()","tidy_bytes()","time()","time_ago_in_words()","time_field()","time_field_tag()","time_select()","time_select()","time_tag()","time_with_datetime_fallback()","time_zone_options_for_select()","time_zone_select()","time_zone_select()","timestamps()","timestamps()","titlecase()","titlecase()","titleize()","titleize()","titleize()","tmp()","to()","to()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_cleanup()","to_d()","to_date()","to_date()","to_datetime()","to_datetime()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_default_s()","to_f()","to_f()","to_format()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_formatted_s()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_html()","to_i()","to_i()","to_integer()","to_js()","to_json()","to_key()","to_key()","to_model()","to_model()","to_options()","to_options!()","to_options!()","to_options!()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_param()","to_partial_path()","to_partial_path()","to_path()","to_path()","to_prepare()","to_prepare()","to_prepare_blocks()","to_query()","to_query()","to_query()","to_r()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_sentence()","to_session_value()","to_sql()","to_sql()","to_str()","to_str()","to_str()","to_sym()","to_tag()","to_time()","to_time()","to_time()","to_time_in_current_zone()","to_xml()","to_xml()","to_xml()","to_xml()","to_xml()","to_yaml_type()","today()","today?()","today?()","toggle()","toggle!()","token_and_options()","token_params_from()","tokenize()","tokenize()","tomorrow()","tomorrow()","touch()","transaction()","transaction()","transaction()","transaction_isolation_levels()","transaction_joinable=()","transaction_open?()","transform_keys()","transform_keys!()","translate()","translate()","translate_exception()","translate_exception()","translate_exception()","translate_exception()","transliterate()","trigger()","trigger()","truncate()","truncate()","try()","try()","try!()","try!()","try_to_load_dependency()","tsort_each_child()","tsrange()","tstzrange()","tsvector()","tv_sec()","type()","type()","type()","type()","type()","type()","type()","type()","type()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast()","type_cast_config_to_boolean()","type_cast_config_to_integer()","type_cast_for_write()","type_cast_for_write()","type_to_sql()","type_to_sql()","uncached()","uncached()","uncountable()","uncountable?()","uncountable?()","undefine_attribute_methods()","underscore()","underscore()","unescape()","unescape_bytea()","unescape_path()","uniq()","uniq()","uniq_by()","uniq_by!()","uniq_value()","unpack_graphemes()","unpermitted_parameters()","unprepared_statement()","unprepared_visitor()","unregister()","unscope()","unscoped()","unshift()","unshift()","unsubscribe()","unsubscribe()","until()","until()","up()","upcase()","upcase()","update()","update()","update()","update()","update()","update()","update!()","update_all()","update_attribute()","update_attributes()","update_attributes!()","update_column()","update_columns()","update_counters()","update_counters()","update_sql()","update_sql()","updated?()","url()","url_field()","url_field_tag()","url_for()","url_for()","url_for()","url_for()","url_options()","url_options()","url_options()","url_options()","url_to_asset()","url_to_audio()","url_to_font()","url_to_image()","url_to_javascript()","url_to_stylesheet()","url_to_video()","us_zones()","usage_path()","use()","use()","use()","use_accept_header()","use_insert_returning?()","use_renderer()","use_renderers()","use_zone()","usec()","user_agent=()","user_name_and_password()","uses_transaction()","uses_transaction?()","using_limitable_reflections?()","using_match_shorthand?()","utc()","utc()","utc?()","utc?()","utc_offset()","utc_offset()","utc_offset()","utc_time()","utc_to_local()","utf8_enforcer_tag()","uuid()","uuid()","valid?()","valid?()","valid?()","valid_accept_header()","valid_alter_table_options()","valid_type?()","valid_type?()","valid_type?()","validate()","validate()","validate_digest_response()","validate_fallbacks()","validate_nonce()","validate_options()","validates()","validates!()","validates_absence_of()","validates_acceptance_of()","validates_associated()","validates_confirmation_of()","validates_each()","validates_exclusion_of()","validates_format_of()","validates_inclusion_of()","validates_length_of()","validates_numericality_of()","validates_presence_of()","validates_presence_of()","validates_size_of()","validates_uniqueness_of()","validates_with()","validates_with()","validators()","validators_on()","values()","values()","values()","values_at()","values_at()","values_at()","vendor()","vendor()","vendor_javascripts()","vendor_stylesheets()","verb()","verified_request?()","verify()","verify!()","verify_and_upgrade_legacy_signed_message()","verify_authenticity_token()","verify_request?()","version()","version()","version()","version()","version()","version()","video_path()","video_tag()","video_url()","view_assigns()","view_cache_dependencies()","view_cache_dependency()","view_context()","view_context_class()","view_context_class()","view_paths()","view_paths=()","view_paths=()","view_rendered?()","view_renderer()","visible_action?()","wait()","wait()","warn()","watch()","watch_namespaces()","watchable_dirs()","watchable_files()","watching?()","week()","week_field()","week_field_tag()","weeks()","weeks_ago()","weeks_since()","where()","where_values_hash()","whiny_nils=()","with()","with_backend()","with_backend()","with_connection()","with_default_scope()","with_exclusive_scope()","with_fallbacks()","with_indifferent_access()","with_indifferent_access()","with_indifferent_access()","with_local_cache()","with_lock()","with_options()","with_routing()","with_scope_level()","with_transaction_returning_status()","with_warnings()","without_modules()","word_wrap()","wrap()","wrap_parameters()","wrap_with_namespace()","write()","write()","write()","write()","write_attribute()","write_entry()","write_entry()","write_fragment()","write_store_attribute()","xhr()","xhr()","xhr?()","xml()","xml()","xml_http_request()","xml_http_request()","xml_http_request?()","xmlschema()","xmlschema()","year()","years()","years_ago()","years_since()","yesterday()","yesterday()","zone()","zone()","zone=()","zones_map()","readme","readme","readme","readme","readme","rdoc_main","readme"],"longSearchIndex":["abstractcontroller","abstractcontroller::base","abstractcontroller::callbacks","abstractcontroller::callbacks::classmethods","abstractcontroller::collector","abstractcontroller::doublerendererror","abstractcontroller::helpers","abstractcontroller::helpers::classmethods","abstractcontroller::helpers::classmethods::missinghelpererror","abstractcontroller::layouts","abstractcontroller::layouts::classmethods","abstractcontroller::railties","abstractcontroller::railties::routeshelpers","abstractcontroller::rendering","abstractcontroller::rendering::classmethods","abstractcontroller::translation","abstractcontroller::urlfor","abstractcontroller::urlfor::classmethods","abstractcontroller::viewpaths","abstractcontroller::viewpaths::classmethods","actioncontroller","actioncontroller::actioncontroller","actioncontroller::actioncontroller::actioncontroller","actioncontroller::base","actioncontroller::caching","actioncontroller::caching::classmethods","actioncontroller::caching::configmethods","actioncontroller::caching::fragments","actioncontroller::conditionalget","actioncontroller::conditionalget::classmethods","actioncontroller::cookies","actioncontroller::datastreaming","actioncontroller::flash","actioncontroller::flash::classmethods","actioncontroller::forcessl","actioncontroller::forcessl::classmethods","actioncontroller::head","actioncontroller::helpers","actioncontroller::helpers::classmethods","actioncontroller::hideactions","actioncontroller::hideactions::classmethods","actioncontroller::httpauthentication","actioncontroller::httpauthentication::basic","actioncontroller::httpauthentication::basic::controllermethods","actioncontroller::httpauthentication::basic::controllermethods::classmethods","actioncontroller::httpauthentication::digest","actioncontroller::httpauthentication::digest::controllermethods","actioncontroller::httpauthentication::token","actioncontroller::httpauthentication::token::controllermethods","actioncontroller::implicitrender","actioncontroller::instrumentation","actioncontroller::instrumentation::classmethods","actioncontroller::live","actioncontroller::live::response","actioncontroller::live::response::header","actioncontroller::logsubscriber","actioncontroller::metal","actioncontroller::middleware","actioncontroller::middleware::actionmiddleware","actioncontroller::mimeresponds","actioncontroller::mimeresponds::classmethods","actioncontroller::mimeresponds::collector","actioncontroller::modelnaming","actioncontroller::parametermissing","actioncontroller::parameters","actioncontroller::paramswrapper","actioncontroller::paramswrapper::classmethods","actioncontroller::rackdelegation","actioncontroller::railties","actioncontroller::railties::helpers","actioncontroller::recordidentifier","actioncontroller::redirecting","actioncontroller::renderers","actioncontroller::renderers::all","actioncontroller::renderers::classmethods","actioncontroller::rendering","actioncontroller::requestforgeryprotection","actioncontroller::requestforgeryprotection::classmethods","actioncontroller::requestforgeryprotection::protectionmethods","actioncontroller::requestforgeryprotection::protectionmethods::exception","actioncontroller::requestforgeryprotection::protectionmethods::nullsession","actioncontroller::requestforgeryprotection::protectionmethods::resetsession","actioncontroller::rescue","actioncontroller::responder","actioncontroller::streaming","actioncontroller::strongparameters","actioncontroller::templateassertions","actioncontroller::testcase","actioncontroller::testcase::behavior","actioncontroller::testcase::behavior::classmethods","actioncontroller::testcase::raiseactionexceptions","actioncontroller::testresponse","actioncontroller::testing","actioncontroller::testing::classmethods","actioncontroller::unpermittedparameters","actioncontroller::urlfor","actiondispatch","actiondispatch::assertions","actiondispatch::assertions::domassertions","actiondispatch::assertions::responseassertions","actiondispatch::assertions::routingassertions","actiondispatch::assertions::selectorassertions","actiondispatch::assertions::tagassertions","actiondispatch::callbacks","actiondispatch::cookies","actiondispatch::cookies::chainedcookiejars","actiondispatch::cookies::verifyandupgradelegacysignedmessage","actiondispatch::debugexceptions","actiondispatch::exceptionwrapper","actiondispatch::filehandler","actiondispatch::flash","actiondispatch::flash::flashhash","actiondispatch::http","actiondispatch::http::cache","actiondispatch::http::cache::request","actiondispatch::http::cache::response","actiondispatch::http::filterparameters","actiondispatch::http::filterredirect","actiondispatch::http::headers","actiondispatch::http::mimenegotiation","actiondispatch::http::parameterfilter","actiondispatch::http::parameters","actiondispatch::http::url","actiondispatch::http::uploadedfile","actiondispatch::integration","actiondispatch::integration::requesthelpers","actiondispatch::integration::runner","actiondispatch::integration::session","actiondispatch::integrationtest","actiondispatch::middlewarestack","actiondispatch::middlewarestack::middleware","actiondispatch::paramsparser","actiondispatch::paramsparser::parseerror","actiondispatch::publicexceptions","actiondispatch::railsentitystore","actiondispatch::railsmetastore","actiondispatch::reloader","actiondispatch::remoteip","actiondispatch::remoteip::getip","actiondispatch::remoteip::ipspoofattackerror","actiondispatch::request","actiondispatch::requestid","actiondispatch::response","actiondispatch::routing","actiondispatch::routing::consoleformatter","actiondispatch::routing::htmltableformatter","actiondispatch::routing::mapper","actiondispatch::routing::mapper::base","actiondispatch::routing::mapper::concerns","actiondispatch::routing::mapper::httphelpers","actiondispatch::routing::mapper::resources","actiondispatch::routing::mapper::scoping","actiondispatch::routing::pathredirect","actiondispatch::routing::polymorphicroutes","actiondispatch::routing::redirection","actiondispatch::routing::routewrapper","actiondispatch::routing::urlfor","actiondispatch::ssl","actiondispatch::session","actiondispatch::session::abstractstore","actiondispatch::session::cachestore","actiondispatch::session::compatibility","actiondispatch::session::cookiestore","actiondispatch::session::memcachestore","actiondispatch::session::stalesessioncheck","actiondispatch::showexceptions","actiondispatch::static","actiondispatch::testprocess","actiondispatch::testrequest","actiondispatch::testresponse","actionmailer","actionmailer::base","actionmailer::collector","actionmailer::deliverymethods","actionmailer::deliverymethods::classmethods","actionmailer::logsubscriber","actionmailer::mailhelper","actionmailer::noninferrablemailererror","actionmailer::testcase","actionmailer::testcase::behavior","actionmailer::testcase::behavior::classmethods","actionmailer::testhelper","actionview","actionview::base","actionview::context","actionview::dependencytracker","actionview::dependencytracker::erbtracker","actionview::digestor","actionview::filesystemresolver","actionview::fixtureresolver","actionview::helpers","actionview::helpers::activemodelhelper","actionview::helpers::activemodelinstancetag","actionview::helpers::assettaghelper","actionview::helpers::asseturlhelper","actionview::helpers::atomfeedhelper","actionview::helpers::cachehelper","actionview::helpers::capturehelper","actionview::helpers::csrfhelper","actionview::helpers::datehelper","actionview::helpers::debughelper","actionview::helpers::formbuilder","actionview::helpers::formhelper","actionview::helpers::formoptionshelper","actionview::helpers::formtaghelper","actionview::helpers::javascripthelper","actionview::helpers::numberhelper","actionview::helpers::numberhelper::invalidnumbererror","actionview::helpers::outputsafetyhelper","actionview::helpers::recordtaghelper","actionview::helpers::renderinghelper","actionview::helpers::sanitizehelper","actionview::helpers::taghelper","actionview::helpers::texthelper","actionview::helpers::translationhelper","actionview::helpers::urlhelper","actionview::helpers::urlhelper::classmethods","actionview::logsubscriber","actionview::lookupcontext","actionview::lookupcontext::detailscache","actionview::lookupcontext::viewpaths","actionview::modelnaming","actionview::nullresolver","actionview::partialrenderer","actionview::recordidentifier","actionview::renderer","actionview::resolver","actionview::resolver::cache","actionview::resolver::cache::smallcache","actionview::resolver::path","actionview::routingurlfor","actionview::template","actionview::template::handlers","actionview::template::handlers::builder","actionview::template::handlers::erb","actionview::template::handlers::erubis","actionview::template::handlers::raw","actionview::template::types","actionview::template::types::type","actionview::testcase","actionview::testcase::behavior","actionview::testcase::behavior::classmethods","actionview::testcase::behavior::locals","actionview::testcase::behavior::renderedviewscollection","actionview::testcase::testcontroller","activemodel","activemodel::attributemethods","activemodel::attributemethods::classmethods","activemodel::callbacks","activemodel::conversion","activemodel::dirty","activemodel::errors","activemodel::forbiddenattributeserror","activemodel::lint","activemodel::lint::tests","activemodel::missingattributeerror","activemodel::model","activemodel::name","activemodel::naming","activemodel::securepassword","activemodel::securepassword::classmethods","activemodel::securepassword::classmethods::instancemethodsonactivation","activemodel::serialization","activemodel::serializers","activemodel::serializers::json","activemodel::serializers::xml","activemodel::strictvalidationfailed","activemodel::translation","activemodel::validations","activemodel::validations::callbacks","activemodel::validations::callbacks::classmethods","activemodel::validations::classmethods","activemodel::validations::helpermethods","activemodel::validator","activerecord","activerecord::activerecorderror","activerecord::adapternotfound","activerecord::adapternotspecified","activerecord::aggregations","activerecord::aggregations::classmethods","activerecord::associationtypemismatch","activerecord::associations","activerecord::associations::classmethods","activerecord::associations::collectionproxy","activerecord::attributeassignment","activerecord::attributeassignmenterror","activerecord::attributemethods","activerecord::attributemethods::beforetypecast","activerecord::attributemethods::classmethods","activerecord::attributemethods::primarykey","activerecord::attributemethods::primarykey::classmethods","activerecord::attributemethods::query","activerecord::attributemethods::read","activerecord::attributemethods::read::classmethods","activerecord::attributemethods::serialization","activerecord::attributemethods::serialization::classmethods","activerecord::attributemethods::timezoneconversion","activerecord::attributemethods::timezoneconversion::classmethods","activerecord::attributemethods::write","activerecord::attributemethods::write::classmethods","activerecord::autosaveassociation","activerecord::autosaveassociation::classmethods","activerecord::base","activerecord::batches","activerecord::calculations","activerecord::callbacks","activerecord::callbacks::classmethods","activerecord::configurationerror","activerecord::connectionadapters","activerecord::connectionadapters::abstractadapter","activerecord::connectionadapters::abstractadapter::schemacreation","activerecord::connectionadapters::abstractmysqladapter","activerecord::connectionadapters::abstractmysqladapter::schemacreation","activerecord::connectionadapters::column","activerecord::connectionadapters::column::format","activerecord::connectionadapters::columndumper","activerecord::connectionadapters::connectionhandler","activerecord::connectionadapters::connectionmanagement","activerecord::connectionadapters::connectionpool","activerecord::connectionadapters::connectionpool::queue","activerecord::connectionadapters::connectionpool::reaper","activerecord::connectionadapters::databaselimits","activerecord::connectionadapters::databasestatements","activerecord::connectionadapters::mysql2adapter","activerecord::connectionadapters::mysqladapter","activerecord::connectionadapters::mysqladapter::fields","activerecord::connectionadapters::mysqladapter::fields::boolean","activerecord::connectionadapters::mysqladapter::fields::date","activerecord::connectionadapters::mysqladapter::fields::datetime","activerecord::connectionadapters::mysqladapter::fields::decimal","activerecord::connectionadapters::mysqladapter::fields::float","activerecord::connectionadapters::mysqladapter::fields::identity","activerecord::connectionadapters::mysqladapter::fields::integer","activerecord::connectionadapters::mysqladapter::fields::time","activerecord::connectionadapters::mysqladapter::fields::type","activerecord::connectionadapters::mysqladapter::statementpool","activerecord::connectionadapters::postgresqladapter","activerecord::connectionadapters::postgresqladapter::columndefinition","activerecord::connectionadapters::postgresqladapter::columnmethods","activerecord::connectionadapters::postgresqladapter::databasestatements","activerecord::connectionadapters::postgresqladapter::oid","activerecord::connectionadapters::postgresqladapter::oid::array","activerecord::connectionadapters::postgresqladapter::oid::bit","activerecord::connectionadapters::postgresqladapter::oid::boolean","activerecord::connectionadapters::postgresqladapter::oid::bytea","activerecord::connectionadapters::postgresqladapter::oid::cidr","activerecord::connectionadapters::postgresqladapter::oid::date","activerecord::connectionadapters::postgresqladapter::oid::decimal","activerecord::connectionadapters::postgresqladapter::oid::float","activerecord::connectionadapters::postgresqladapter::oid::hstore","activerecord::connectionadapters::postgresqladapter::oid::identity","activerecord::connectionadapters::postgresqladapter::oid::integer","activerecord::connectionadapters::postgresqladapter::oid::json","activerecord::connectionadapters::postgresqladapter::oid::money","activerecord::connectionadapters::postgresqladapter::oid::point","activerecord::connectionadapters::postgresqladapter::oid::range","activerecord::connectionadapters::postgresqladapter::oid::time","activerecord::connectionadapters::postgresqladapter::oid::timestamp","activerecord::connectionadapters::postgresqladapter::oid::type","activerecord::connectionadapters::postgresqladapter::oid::typemap","activerecord::connectionadapters::postgresqladapter::oid::vector","activerecord::connectionadapters::postgresqladapter::quoting","activerecord::connectionadapters::postgresqladapter::referentialintegrity","activerecord::connectionadapters::postgresqladapter::schemacreation","activerecord::connectionadapters::postgresqladapter::schemastatements","activerecord::connectionadapters::postgresqladapter::statementpool","activerecord::connectionadapters::postgresqladapter::table","activerecord::connectionadapters::postgresqladapter::tabledefinition","activerecord::connectionadapters::postgresqladapter::utils","activerecord::connectionadapters::postgresqlcolumn","activerecord::connectionadapters::postgresqlcolumn::arrayparser","activerecord::connectionadapters::postgresqlcolumn::cast","activerecord::connectionadapters::querycache","activerecord::connectionadapters::quoting","activerecord::connectionadapters::sqlite3adapter","activerecord::connectionadapters::sqlite3adapter::explainprettyprinter","activerecord::connectionadapters::sqlite3adapter::statementpool","activerecord::connectionadapters::sqlite3adapter::version","activerecord::connectionadapters::schemacache","activerecord::connectionadapters::schemastatements","activerecord::connectionadapters::statementpool","activerecord::connectionadapters::table","activerecord::connectionadapters::tabledefinition","activerecord::connectionadapters::transactionstate","activerecord::connectionhandling","activerecord::connectionnotestablished","activerecord::connectiontimeouterror","activerecord::core","activerecord::core::classmethods","activerecord::countercache","activerecord::countercache::classmethods","activerecord::dangerousattributeerror","activerecord::dynamicmatchers","activerecord::dynamicmatchers::findby","activerecord::dynamicmatchers::findbybang","activerecord::dynamicmatchers::finder","activerecord::dynamicmatchers::method","activerecord::explain","activerecord::findermethods","activerecord::fixtureset","activerecord::immutablerelation","activerecord::inheritance","activerecord::inheritance::classmethods","activerecord::integration","activerecord::invalidforeignkey","activerecord::irreversiblemigration","activerecord::locking","activerecord::locking::optimistic","activerecord::locking::optimistic::classmethods","activerecord::locking::pessimistic","activerecord::logsubscriber","activerecord::migration","activerecord::migration::checkpending","activerecord::migration::commandrecorder","activerecord::migration::commandrecorder::straightreversions","activerecord::migrationproxy","activerecord::modelschema","activerecord::modelschema::classmethods","activerecord::multiparameterassignmenterrors","activerecord::nestedattributes","activerecord::nestedattributes::classmethods","activerecord::nestedattributes::toomanyrecords","activerecord::persistence","activerecord::persistence::classmethods","activerecord::preparedstatementinvalid","activerecord::querycache","activerecord::querycache::classmethods","activerecord::querymethods","activerecord::querymethods::wherechain","activerecord::querying","activerecord::readonlyrecord","activerecord::readonlyattributes","activerecord::readonlyattributes::classmethods","activerecord::recordinvalid","activerecord::recordnotdestroyed","activerecord::recordnotfound","activerecord::recordnotsaved","activerecord::recordnotunique","activerecord::reflection","activerecord::reflection::classmethods","activerecord::reflection::macroreflection","activerecord::relation","activerecord::result","activerecord::rollback","activerecord::sqlcounter","activerecord::sanitization","activerecord::sanitization::classmethods","activerecord::schema","activerecord::schemamigration","activerecord::scoping","activerecord::scoping::classmethods","activerecord::scoping::default","activerecord::scoping::default::classmethods","activerecord::scoping::named","activerecord::scoping::named::classmethods","activerecord::serialization","activerecord::serializationtypemismatch","activerecord::spawnmethods","activerecord::staleobjecterror","activerecord::statementcache","activerecord::statementinvalid","activerecord::store","activerecord::store::classmethods","activerecord::tasks","activerecord::tasks::databasealreadyexists","activerecord::tasks::databasenotsupported","activerecord::tasks::databasetasks","activerecord::testfixtures","activerecord::testfixtures::classmethods","activerecord::throwresult","activerecord::timestamp","activerecord::transactionisolationerror","activerecord::transactions","activerecord::transactions::classmethods","activerecord::translation","activerecord::unknownattributeerror","activerecord::unknownprimarykey","activerecord::validations","activerecord::validations::classmethods","activerecord::wrappeddatabaseexception","activesupport","activesupport::autoload","activesupport::backtracecleaner","activesupport::benchmarkable","activesupport::bufferedlogger","activesupport::cache","activesupport::cache::filestore","activesupport::cache::memcachestore","activesupport::cache::memorystore","activesupport::cache::nullstore","activesupport::cache::store","activesupport::cache::strategy","activesupport::cache::strategy::localcache","activesupport::cache::strategy::localcache::localstore","activesupport::cachingkeygenerator","activesupport::callbacks","activesupport::callbacks::classmethods","activesupport::concern","activesupport::concurrency","activesupport::concurrency::latch","activesupport::configurable","activesupport::configurable::classmethods","activesupport::configurable::configuration","activesupport::dependencies","activesupport::dependencies::classcache","activesupport::dependencies::watchstack","activesupport::deprecation","activesupport::deprecation::behavior","activesupport::deprecation::deprecatedconstantproxy","activesupport::deprecation::deprecatedinstancevariableproxy","activesupport::deprecation::deprecatedobjectproxy","activesupport::deprecation::methodwrapper","activesupport::deprecation::reporting","activesupport::descendantstracker","activesupport::duration","activesupport::fileupdatechecker","activesupport::filewatcher","activesupport::filewatcher::backend","activesupport::gzip","activesupport::gzip::stream","activesupport::hashwithindifferentaccess","activesupport::hashwithindifferentaccess::hashwithindifferentaccess","activesupport::inflector","activesupport::inflector::inflections","activesupport::inheritableoptions","activesupport::json","activesupport::json::encoding","activesupport::json::encoding::circularreferenceerror","activesupport::json::encoding::encoder","activesupport::json::variable","activesupport::keygenerator","activesupport::logsubscriber","activesupport::logsubscriber::testhelper","activesupport::logsubscriber::testhelper::mocklogger","activesupport::logger","activesupport::logger::simpleformatter","activesupport::messageencryptor","activesupport::messageencryptor::invalidmessage","activesupport::messageverifier","activesupport::messageverifier::invalidsignature","activesupport::multibyte","activesupport::multibyte::chars","activesupport::multibyte::unicode","activesupport::multibyte::unicode::codepoint","activesupport::multibyte::unicode::unicodedatabase","activesupport::notifications","activesupport::notifications::event","activesupport::notifications::fanout","activesupport::notifications::fanout::subscribers","activesupport::notifications::fanout::subscribers::timed","activesupport::notifications::instrumenter","activesupport::numberhelper","activesupport::orderedhash","activesupport::orderedoptions","activesupport::perthreadregistry","activesupport::proxyobject","activesupport::rescuable","activesupport::rescuable::classmethods","activesupport::safebuffer","activesupport::safebuffer::safeconcaterror","activesupport::stringinquirer","activesupport::subscriber","activesupport::taggedlogging","activesupport::testcase","activesupport::testing","activesupport::testing::assertions","activesupport::testing::constantlookup","activesupport::testing::declarative","activesupport::testing::isolation","activesupport::testing::isolation::forking","activesupport::testing::isolation::subprocess","activesupport::testing::proxytestresult","activesupport::testing::remoteerror","activesupport::testing::setupandteardown","activesupport::testing::setupandteardown::classmethods","activesupport::timewithzone","activesupport::timezone","activesupport::xmlconverter","activesupport::xmlconverter::disallowedtype","activesupport::xmlmini","activesupport::xmlmini_libxmlsax","activesupport::xmlmini_libxmlsax::hashbuilder","activesupport::xmlmini_nokogirisax","activesupport::xmlmini_nokogirisax::hashbuilder","array","benchmark","bigdecimal","class","date","dateandtime","dateandtime::calculations","datetime","erb","erb::util","enumerable","falseclass","file","float","html","html::fullsanitizer","html::linksanitizer","html::sanitizer","html::selector","html::tag","html::whitelistsanitizer","hash","i18n","i18n::exceptionhandler","i18n::railtie","integer","kernel","loaderror","logger","logger::simpleformatter","loggersilence","marshal","mime","mime::mimes","mime::nulltype","mime::type","module","mysql","mysql::result","mysql::stmt","mysql::time","nameerror","nilclass","numeric","object","object::missingsourcefile","process","process::status","qualifiedconstutils","rails","rails::api","rails::api::apptask","rails::api::repotask","rails::api::task","rails::appbuilder","rails::apprailsloader","rails::application","rails::application::bootstrap","rails::application::configuration","rails::application::finisher","rails::application::routesreloader","rails::backtracecleaner","rails::configuration","rails::configuration::middlewarestackproxy","rails::console","rails::consolemethods","rails::dbconsole","rails::deprecatedconstant","rails::engine","rails::engine:::","rails::engine::configuration","rails::engine::railties","rails::generators","rails::generators::actions","rails::generators::activemodel","rails::generators::base","rails::generators::migration","rails::generators::migration::classmethods","rails::generators::namedbase","rails::generators::testcase","rails::generators::testing","rails::generators::testing::assertions","rails::generators::testing::behaviour","rails::generators::testing::behaviour::classmethods","rails::generators::testing::setupandteardown","rails::info","rails::initializable","rails::initializable::classmethods","rails::initializable::collection","rails::initializable::initializer","rails::paths","rails::paths::path","rails::paths::root","rails::pluginbuilder","rails::rack","rails::rack::debugger","rails::rack::logtailer","rails::rack::logger","rails::railtie","rails::railtie::configurable","rails::railtie::configurable::classmethods","rails::railtie::configuration","rails::server","rails::server::options","rails::testtask","rails::testtask::testinfo","rails::testunitrailtie","rails::version","range","sourceannotationextractor","sourceannotationextractor::annotation","string","symbol","thread","time","trueclass","uri","activemodel::name#!~()","activesupport::safebuffer#%()","activesupport::duration#+()","activesupport::safebuffer#+()","activesupport::timewithzone#+()","rails::initializable::collection#+()","activesupport::duration#-()","activesupport::timewithzone#-()","rails::engine::railties#-()","time#-()","activesupport::notifications::event#<<()","activesupport::safebuffer#<<()","rails::paths::path#<<()","activemodel::name#<=>()","activerecord::connectionadapters::sqlite3adapter::version#<=>()","activerecord::core#<=>()","activesupport::timewithzone#<=>()","activesupport::timezone#<=>()","date#<=>()","datetime#<=>()","time#<=>()","actiondispatch::middlewarestack::middleware#==()","actionview::filesystemresolver#==()","actionview::template::types::type#==()","activemodel::name#==()","activerecord::core#==()","activerecord::reflection::macroreflection#==()","activerecord::relation#==()","activesupport::duration#==()","mime::type#==()","activemodel::name#===()","activerecord::core::classmethods#===()","activesupport::multibyte::unicode::unicodedatabase#===()","mime::type#===()","time::===()","activemodel::name#=~()","activesupport::timezone#=~()","mime::type#=~()","actiondispatch::request#get()","actiondispatch::request#post()","actioncontroller::parameters#[]()","actiondispatch::flash::flashhash#[]()","actiondispatch::http::headers#[]()","actiondispatch::middlewarestack#[]()","actionview::template::types::[]()","actionview::template::types::type::[]()","activemodel::errors#[]()","activerecord::attributemethods#[]()","activerecord::connectionadapters::mysqladapter::statementpool#[]()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]()","activerecord::connectionadapters::postgresqladapter::statementpool#[]()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]()","activerecord::connectionadapters::statementpool#[]()","activerecord::connectionadapters::tabledefinition#[]()","activerecord::fixtureset#[]()","activerecord::result#[]()","activesupport::dependencies::classcache#[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::hashwithindifferentaccess::[]()","activesupport::orderedoptions#[]()","activesupport::safebuffer#[]()","activesupport::timezone::[]()","mime::[]()","rails::paths::root#[]()","actiondispatch::flash::flashhash#[]=()","actiondispatch::http::headers#[]=()","activemodel::errors#[]=()","activerecord::attributemethods#[]=()","activerecord::connectionadapters::mysqladapter::statementpool#[]=()","activerecord::connectionadapters::postgresqladapter::oid::typemap#[]=()","activerecord::connectionadapters::postgresqladapter::statementpool#[]=()","activerecord::connectionadapters::sqlite3adapter::statementpool#[]=()","activerecord::connectionadapters::statementpool#[]=()","activerecord::fixtureset#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::hashwithindifferentaccess#[]=()","activesupport::orderedoptions#[]=()","rails::paths::root#[]=()","activesupport::callbacks::classmethods#__callback_runner_name()","activesupport::callbacks::classmethods#__callback_runner_name_cache()","activesupport::callbacks::classmethods#__generate_callback_runner_name()","activesupport::testing::proxytestresult#__replay__()","activesupport::callbacks::classmethods#__reset_runner()","activerecord::readonlyattributes#_attr_readonly()","activesupport::xmlmini#_dasherize()","activesupport::bufferedlogger::_deprecation_warning()","time#_dump()","time#_dump_without_zone()","activesupport::orderedoptions#_get()","actioncontroller::renderers#_handle_render_options()","abstractcontroller::callbacks::classmethods#_insert_callbacks()","actionview::context#_layout_for()","actionview::helpers::renderinghelper#_layout_for()","time::_load()","time::_load_without_zone()","abstractcontroller::callbacks::classmethods#_normalize_callback_options()","bigdecimal#_original_to_s()","activesupport::xmlmini#_parse_file()","abstractcontroller::viewpaths#_prefixes()","actionview::context#_prepare_context()","abstractcontroller::urlfor#_routes()","abstractcontroller::urlfor::classmethods#_routes()","actiondispatch::routing::urlfor#_routes_context()","activesupport::testing::isolation#_run_class_setup()","actionview::lookupcontext::detailscache#_set_detail()","actioncontroller::paramswrapper::classmethods#_set_wrapper_options()","activerecord::store::classmethods#_store_accessors_module()","actionview::helpers::formbuilder::_to_partial_path()","actionview::helpers::urlhelper::classmethods#_url_for_modules()","actiondispatch::routing::urlfor#_with_routes()","abstractcontroller::base::abstract!()","activerecord::inheritance::classmethods#abstract_class?()","rails::railtie::abstract_railtie?()","activerecord::connectionadapters::abstractadapter::schemacreation#accept()","actiondispatch::testrequest#accept=()","actiondispatch::http::mimenegotiation#accepts()","activerecord::nestedattributes::classmethods#accepts_nested_attributes_for()","activesupport::inflector::inflections#acronym()","actioncontroller::metal::action()","actiondispatch::routing::routewrapper#action()","actiondispatch::testrequest#action=()","abstractcontroller::layouts#action_has_layout?()","abstractcontroller::base#action_methods()","abstractcontroller::base::action_methods()","abstractcontroller::urlfor::classmethods#action_methods()","actioncontroller::hideactions::classmethods#action_methods()","activerecord::connectionadapters::abstractadapter#active?()","activerecord::connectionadapters::mysql2adapter#active?()","activerecord::connectionadapters::mysqladapter#active?()","activerecord::connectionadapters::postgresqladapter#active?()","activerecord::connectionadapters::sqlite3adapter#active?()","activerecord::connectionadapters::connectionpool#active_connection?()","activerecord::connectionadapters::connectionhandler#active_connections?()","object#acts_like?()","date#acts_like_date?()","datetime#acts_like_date?()","string#acts_like_string?()","activesupport::timewithzone#acts_like_time?()","datetime#acts_like_time?()","time#acts_like_time?()","activerecord::connectionadapters::abstractadapter#adapter_name()","activerecord::connectionadapters::postgresqladapter#adapter_name()","actioncontroller::renderers::add()","actionview::testcase::behavior::renderedviewscollection#add()","activemodel::errors#add()","activerecord::connectionadapters::connectionpool::queue#add()","activerecord::connectionadapters::schemacache#add()","rails::paths::root#add()","activerecord::connectionadapters::schemastatements#add_belongs_to()","activerecord::connectionadapters::postgresqladapter::schemastatements#add_column()","activerecord::connectionadapters::schemastatements#add_column()","activerecord::connectionadapters::abstractmysqladapter#add_column_position!()","activerecord::connectionadapters::abstractmysqladapter#add_column_sql()","actionmailer::deliverymethods::classmethods#add_delivery_method()","activesupport::testing::proxytestresult#add_error()","actionview::template::handlers::erubis#add_expr()","actionview::template::handlers::erubis#add_expr_escaped()","actionview::template::handlers::erubis#add_expr_literal()","activesupport::backtracecleaner#add_filter()","actioncontroller::flash::classmethods#add_flash_types()","activerecord::connectionadapters::schemastatements#add_index()","activerecord::connectionadapters::abstractmysqladapter#add_index_length()","activerecord::connectionadapters::schemastatements#add_index_options()","activerecord::connectionadapters::schemastatements#add_index_sort_order()","activerecord::connectionadapters::abstractmysqladapter#add_index_sql()","activemodel::errors#add_on_blank()","activemodel::errors#add_on_empty()","actionview::template::handlers::erubis#add_postamble()","actionview::template::handlers::erubis#add_preamble()","activerecord::connectionadapters::schemastatements#add_reference()","actioncontroller::add_renderer()","rails::generators::base::add_shebang_option!()","activesupport::backtracecleaner#add_silencer()","rails::generators::actions#add_source()","actionview::template::handlers::erubis#add_stmt()","actionview::template::handlers::erubis#add_text()","activerecord::connectionadapters::schemastatements#add_timestamps()","activerecord::connectionadapters::abstractmysqladapter#add_timestamps_sql()","activerecord::transactions#add_to_transaction()","activerecord::connectionadapters::databasestatements#add_transaction_record()","activemodel::errors#added?()","activesupport::timewithzone#advance()","date#advance()","datetime#advance()","time#advance()","actiondispatch::callbacks::after()","rails::initializable::initializer#after()","abstractcontroller::callbacks::classmethods#after_action()","activerecord::transactions::classmethods#after_commit()","rails::railtie::configuration#after_initialize()","activerecord::transactions::classmethods#after_rollback()","activerecord::testfixtures#after_teardown()","activesupport::testing::setupandteardown#after_teardown()","activemodel::validations::callbacks::classmethods#after_validation()","activesupport::duration#ago()","activesupport::timewithzone#ago()","date#ago()","datetime#ago()","numeric#ago()","time#ago()","actiondispatch::flash::flashhash#alert()","actiondispatch::flash::flashhash#alert=()","activemodel::attributemethods::classmethods#alias_attribute()","module#alias_attribute()","module#alias_method_chain()","activerecord::connectionadapters::mysqladapter::fields::alias_type()","activerecord::connectionadapters::postgresqladapter::oid::alias_type()","actioncontroller::mimeresponds::collector#all()","actionmailer::collector#all()","activerecord::scoping::named::classmethods#all()","activesupport::timezone::all()","rails::generators::activemodel::all()","time#all_day()","actioncontroller::helpers::classmethods#all_helpers_from_path()","time#all_month()","rails::paths::root#all_paths()","time#all_quarter()","time#all_week()","time#all_year()","rails::application#allow_concurrency?()","activerecord::connectionadapters::databaselimits#allowed_index_name_length()","activerecord::connectionadapters::sqlite3adapter#allowed_index_name_length()","activerecord::migration#announce()","module#anonymous?()","actioncontroller::mimeresponds::collector#any()","actionmailer::collector#any()","activerecord::associations::collectionproxy#any?()","activerecord::relation#any?()","activerecord::connectionadapters::connectionpool::queue#any_waiting?()","actioncontroller::responder#api_behavior()","rails::api::apptask#api_dir()","rails::api::repotask#api_dir()","actioncontroller::responder#api_location()","rails::api::task#api_main()","actiondispatch::integration::runner#app()","actiondispatch::integrationtest::app()","actiondispatch::integrationtest#app()","rails::appbuilder#app()","rails::consolemethods#app()","rails::engine::app()","rails::pluginbuilder#app()","rails::server#app()","actiondispatch::integrationtest::app=()","rails::railtie::configuration#app_generators()","rails::railtie::configuration#app_middleware()","abstractcontroller::callbacks::classmethods#append_after_action()","abstractcontroller::callbacks::classmethods#append_around_action()","abstractcontroller::callbacks::classmethods#append_before_action()","activesupport::concern#append_features()","abstractcontroller::viewpaths#append_view_path()","abstractcontroller::viewpaths::classmethods#append_view_path()","rails::generators::actions#application()","rails::generators::namedbase#application_name()","actiondispatch::exceptionwrapper#application_trace()","activerecord::findermethods#apply_join_dependency()","activerecord::querymethods#arel()","activerecord::core::classmethods#arel_engine()","activerecord::core::classmethods#arel_table()","rails::generators::testing::behaviour::classmethods#arguments()","abstractcontroller::callbacks::classmethods#around_action()","activerecord::connectionadapters::postgresqlcolumn::cast#array_to_string()","activemodel::errors#as_json()","activemodel::serializers::json#as_json()","activesupport::json::encoding::encoder#as_json()","activesupport::json::variable#as_json()","activesupport::timewithzone#as_json()","process::status#as_json()","activesupport::testing::assertions#assert_blank()","rails::generators::testing::assertions#assert_class_method()","activesupport::testing::assertions#assert_difference()","rails::generators::testing::assertions#assert_directory()","actiondispatch::assertions::domassertions#assert_dom_equal()","actiondispatch::assertions::domassertions#assert_dom_not_equal()","actionmailer::testhelper#assert_emails()","rails::generators::testing::assertions#assert_field_default_value()","rails::generators::testing::assertions#assert_field_type()","rails::generators::testing::assertions#assert_file()","actiondispatch::assertions::routingassertions#assert_generates()","actiondispatch::middlewarestack#assert_index()","rails::generators::testing::assertions#assert_instance_method()","rails::generators::testing::assertions#assert_method()","rails::generators::testing::assertions#assert_migration()","activesupport::testing::assertions#assert_no_difference()","rails::generators::testing::assertions#assert_no_directory()","actionmailer::testhelper#assert_no_emails()","rails::generators::testing::assertions#assert_no_file()","rails::generators::testing::assertions#assert_no_migration()","actiondispatch::assertions::tagassertions#assert_no_tag()","activesupport::testing::assertions#assert_not()","activesupport::testcase#assert_nothing_raised()","activesupport::testing::assertions#assert_present()","actiondispatch::assertions::routingassertions#assert_recognizes()","actiondispatch::assertions::responseassertions#assert_redirected_to()","actiondispatch::assertions::responseassertions#assert_response()","actiondispatch::assertions::routingassertions#assert_routing()","actiondispatch::assertions::selectorassertions#assert_select()","actiondispatch::assertions::selectorassertions#assert_select_email()","actiondispatch::assertions::selectorassertions#assert_select_encoded()","actiondispatch::assertions::tagassertions#assert_tag()","actioncontroller::templateassertions#assert_template()","hash#assert_valid_keys()","actionview::helpers::asseturlhelper#asset_path()","actionview::helpers::asseturlhelper#asset_url()","activerecord::attributeassignment#assign_attributes()","actiondispatch::testprocess#assigns()","activerecord::connectionadapters::schemastatements#assume_migrated_upto_version()","activesupport::timezone#at()","string#at()","time::at()","date#at_beginning_of_day()","datetime#at_beginning_of_day()","time#at_beginning_of_day()","datetime#at_beginning_of_hour()","time#at_beginning_of_hour()","datetime#at_beginning_of_minute()","time#at_beginning_of_minute()","dateandtime::calculations#at_beginning_of_month()","dateandtime::calculations#at_beginning_of_quarter()","dateandtime::calculations#at_beginning_of_week()","dateandtime::calculations#at_beginning_of_year()","date#at_end_of_day()","datetime#at_end_of_day()","time#at_end_of_day()","datetime#at_end_of_hour()","time#at_end_of_hour()","datetime#at_end_of_minute()","time#at_end_of_minute()","dateandtime::calculations#at_end_of_month()","dateandtime::calculations#at_end_of_quarter()","dateandtime::calculations#at_end_of_week()","dateandtime::calculations#at_end_of_year()","date#at_midnight()","datetime#at_midnight()","time#at_midnight()","time::at_with_coercion()","time::at_without_coercion()","actionview::helpers::atomfeedhelper#atom_feed()","file::atomic_write()","activesupport::subscriber::attach_to()","actionmailer::base#attachments()","actionmailer::mailhelper#attachments()","module#attr_internal()","module#attr_internal_accessor()","module#attr_internal_reader()","module#attr_internal_writer()","activerecord::readonlyattributes::classmethods#attr_readonly()","activerecord::attributemethods#attribute_for_inspect()","html::selector#attribute_match()","activemodel::validations::classmethods#attribute_method?()","activerecord::attributemethods::classmethods#attribute_method?()","activerecord::attributemethods::primarykey#attribute_method?()","activemodel::attributemethods::classmethods#attribute_method_affix()","activemodel::attributemethods::classmethods#attribute_method_prefix()","activemodel::attributemethods::classmethods#attribute_method_suffix()","activemodel::attributemethods#attribute_missing()","activerecord::attributemethods#attribute_names()","activerecord::attributemethods::classmethods#attribute_names()","activerecord::attributemethods#attribute_present?()","activerecord::attributemethods#attributes()","activerecord::attributeassignment#attributes=()","activerecord::attributemethods::beforetypecast#attributes_before_type_cast()","activerecord::dynamicmatchers::finder#attributes_hash()","rails::generators::namedbase#attributes_names()","actionview::helpers::asseturlhelper#audio_path()","actionview::helpers::assettaghelper#audio_tag()","actionview::helpers::asseturlhelper#audio_url()","actioncontroller::httpauthentication::basic#authenticate()","actioncontroller::httpauthentication::digest#authenticate()","actioncontroller::httpauthentication::token#authenticate()","activemodel::securepassword::classmethods::instancemethodsonactivation#authenticate()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_or_request_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_or_request_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_or_request_with_http_token()","actioncontroller::httpauthentication::basic::controllermethods#authenticate_with_http_basic()","actioncontroller::httpauthentication::digest::controllermethods#authenticate_with_http_digest()","actioncontroller::httpauthentication::token::controllermethods#authenticate_with_http_token()","actioncontroller::httpauthentication::digest#authentication_header()","actioncontroller::httpauthentication::basic#authentication_request()","actioncontroller::httpauthentication::digest#authentication_request()","actioncontroller::httpauthentication::token#authentication_request()","actiondispatch::request#authorization()","actionview::helpers::assettaghelper#auto_discovery_link_tag()","activesupport::autoload#autoload()","activesupport::autoload#autoload_at()","rails::paths::root#autoload_once()","rails::engine::configuration#autoload_once_paths()","rails::engine::configuration#autoload_paths()","rails::paths::root#autoload_paths()","activesupport::autoload#autoload_under()","activesupport::autoload#autoloads()","abstractcontroller::base#available_action?()","rails::dbconsole#available_environments()","activerecord::calculations#average()","activesupport::concurrency::latch#await()","actiondispatch::response#await_commit()","activesupport::json::backend()","activesupport::xmlmini#backend()","activesupport::json::backend=()","activesupport::xmlmini#backend=()","rails::backtrace_cleaner()","rails::generators::base::banner()","activerecord::inheritance::classmethods#base_class()","rails::generators::base::base_name()","rails::generators::base::base_root()","activerecord::migrationproxy#basename()","activerecord::persistence#becomes()","activerecord::persistence#becomes!()","actiondispatch::callbacks::before()","rails::initializable::initializer#before()","abstractcontroller::callbacks::classmethods#before_action()","rails::railtie::configuration#before_configuration()","rails::railtie::configuration#before_eager_load()","actioncontroller::testing::classmethods#before_filters()","rails::railtie::configuration#before_initialize()","activerecord::testfixtures#before_setup()","activesupport::testing::setupandteardown#before_setup()","activemodel::validations::callbacks::classmethods#before_validation()","activerecord::connectionadapters::abstractmysqladapter#begin_db_transaction()","activerecord::connectionadapters::databasestatements#begin_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_db_transaction()","activerecord::connectionadapters::abstractmysqladapter#begin_isolated_db_transaction()","activerecord::connectionadapters::databasestatements#begin_isolated_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#begin_isolated_db_transaction()","date#beginning_of_day()","datetime#beginning_of_day()","time#beginning_of_day()","datetime#beginning_of_hour()","time#beginning_of_hour()","datetime#beginning_of_minute()","time#beginning_of_minute()","dateandtime::calculations#beginning_of_month()","dateandtime::calculations#beginning_of_quarter()","date::beginning_of_week()","dateandtime::calculations#beginning_of_week()","date::beginning_of_week=()","dateandtime::calculations#beginning_of_year()","activesupport::deprecation::behavior#behavior()","activesupport::deprecation::behavior#behavior=()","activerecord::associations::classmethods#belongs_to()","activerecord::connectionadapters::table#belongs_to()","activerecord::connectionadapters::tabledefinition#belongs_to()","rails::initializable::initializer#belongs_to?()","activesupport::benchmarkable#benchmark()","activesupport::timewithzone#between?()","rails::appbuilder#bin()","rails::pluginbuilder#bin()","activerecord::querymethods#bind()","rails::initializable::initializer#bind()","activemodel::errors#blank?()","activerecord::relation#blank?()","falseclass#blank?()","nilclass#blank?()","object#blank?()","string#blank?()","trueclass#blank?()","actionmailer::mailhelper#block_format()","actiondispatch::request#body()","actiondispatch::response#body()","activerecord::dynamicmatchers::finder#body()","activerecord::dynamicmatchers::method#body()","actiondispatch::response#body=()","actiondispatch::response#body_parts()","kernel#breakpoint()","mime::type::browser_generated_types()","actioncontroller::middleware::build()","actiondispatch::middlewarestack#build()","actiondispatch::middlewarestack::middleware#build()","actionview::resolver::path::build()","activerecord::associations::collectionproxy#build()","activerecord::relation#build()","rails::generators::activemodel::build()","activerecord::querymethods#build_arel()","activesupport::cache::memcachestore::build_mem_cache()","actioncontroller::testcase::behavior#build_request()","actioncontroller::testcase::behavior#build_response()","actionview::helpers::formbuilder#button()","actionview::helpers::formtaghelper#button_tag()","actionview::helpers::urlhelper#button_to()","actionview::helpers::javascripthelper#button_to_function()","numeric#byte()","numeric#bytes()","actioncontroller::caching#cache()","actionview::helpers::cachehelper#cache()","activerecord::connectionadapters::querycache#cache()","activerecord::querycache::classmethods#cache()","activerecord::attributemethods::read::classmethods#cache_attribute?()","activerecord::attributemethods::read::classmethods#cache_attributes()","activerecord::fixtureset::cache_fixtures()","activerecord::fixtureset::cache_for_connection()","actionview::helpers::cachehelper#cache_fragment_name()","actionview::helpers::cachehelper#cache_if()","activerecord::integration#cache_key()","actioncontroller::caching::configmethods#cache_store()","actioncontroller::caching::configmethods#cache_store=()","actionview::base::cache_template_loading()","actionview::base::cache_template_loading=()","actionview::helpers::cachehelper#cache_unless()","activerecord::attributemethods::read::classmethods#cached_attributes()","activerecord::fixtureset::cached_fixtures()","activerecord::calculations#calculate()","actiondispatch::remoteip::getip#calculate_ip()","actioncontroller::metal::call()","actioncontroller::middleware::actionmiddleware#call()","actioncontroller::responder::call()","actiondispatch::callbacks#call()","actiondispatch::cookies#call()","actiondispatch::debugexceptions#call()","actiondispatch::filehandler#call()","actiondispatch::flash#call()","actiondispatch::paramsparser#call()","actiondispatch::publicexceptions#call()","actiondispatch::reloader#call()","actiondispatch::remoteip#call()","actiondispatch::requestid#call()","actiondispatch::ssl#call()","actiondispatch::showexceptions#call()","actiondispatch::static#call()","actionview::dependencytracker::erbtracker::call()","actionview::template::handlers::builder#call()","actionview::template::handlers::erb#call()","actionview::template::handlers::erb::call()","actionview::template::handlers::raw#call()","activerecord::connectionadapters::connectionmanagement#call()","activerecord::migration::checkpending#call()","activerecord::querycache#call()","activerecord::sqlcounter#call()","activesupport::logger::simpleformatter#call()","i18n::exceptionhandler#call()","logger::simpleformatter#call()","rails::application#call()","rails::engine::call()","rails::rack::debugger#call()","rails::rack::logtailer#call()","rails::rack::logger#call()","rails::rack::logger#call_app()","string#camelcase()","activesupport::inflector#camelize()","string#camelize()","rails::generators::actions#capify!()","activesupport::multibyte::chars#capitalize()","actionview::helpers::capturehelper#capture()","kernel#capture()","activerecord::connectionadapters::abstractadapter#case_insensitive_comparison()","activerecord::connectionadapters::abstractmysqladapter#case_insensitive_comparison()","activerecord::connectionadapters::databasestatements#case_sensitive_equality_operator()","activerecord::connectionadapters::abstractadapter#case_sensitive_modifier()","activerecord::connectionadapters::abstractmysqladapter#case_sensitive_modifier()","class#cattr_accessor()","class#cattr_reader()","class#cattr_writer()","activesupport::xmlmini_nokogirisax::hashbuilder#cdata_block()","actionview::helpers::taghelper#cdata_section()","activerecord::connectionadapters::table#change()","date#change()","datetime#change()","time#change()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column()","activerecord::connectionadapters::schemastatements#change_column()","activerecord::connectionadapters::abstractmysqladapter#change_column_default()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_default()","activerecord::connectionadapters::schemastatements#change_column_default()","activerecord::connectionadapters::abstractmysqladapter#change_column_null()","activerecord::connectionadapters::postgresqladapter::schemastatements#change_column_null()","activerecord::connectionadapters::sqlite3adapter#change_column_null()","activerecord::connectionadapters::schemastatements#change_column_null()","activerecord::connectionadapters::abstractmysqladapter#change_column_sql()","activerecord::connectionadapters::table#change_default()","activerecord::connectionadapters::schemastatements#change_table()","activerecord::migration::commandrecorder#change_table()","activemodel::dirty#changed()","activemodel::dirty#changed?()","activemodel::dirty#changed_attributes()","activerecord::autosaveassociation#changed_for_autosave?()","activemodel::dirty#changes()","activesupport::xmlmini_nokogirisax::hashbuilder#characters()","activerecord::connectionadapters::abstractmysqladapter#charset()","activerecord::tasks::databasetasks#charset()","activerecord::tasks::databasetasks#charset_current()","actionview::helpers::formbuilder#check_box()","actionview::helpers::formhelper#check_box()","actionview::helpers::formtaghelper#check_box_tag()","rails::generators::namedbase::check_class_collision()","activerecord::migration::check_pending!()","activerecord::connectionadapters::connectionpool#checkin()","activerecord::connectionadapters::connectionpool#checkout()","rails::paths::path#children()","activerecord::connectionadapters::postgresqladapter::columnmethods#cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#cidr_to_string()","datetime::civil_from_format()","activesupport::deprecation::deprecatedconstantproxy#class()","class#class_attribute()","kernel#class_eval()","activerecord::reflection::macroreflection#class_name()","rails::generators::namedbase#class_name()","rails::generators::namedbase#class_path()","activesupport::inflector#classify()","string#classify()","activesupport::backtracecleaner#clean()","activesupport::cache::filestore#cleanup()","activesupport::cache::memorystore#cleanup()","activesupport::cache::nullstore#cleanup()","activesupport::cache::store#cleanup()","actiondispatch::reloader::cleanup!()","actiondispatch::flash::flashhash#clear()","activemodel::errors#clear()","activerecord::connectionadapters::connectionpool::queue#clear()","activerecord::connectionadapters::mysqladapter::statementpool#clear()","activerecord::connectionadapters::postgresqladapter::oid::typemap#clear()","activerecord::connectionadapters::postgresqladapter::statementpool#clear()","activerecord::connectionadapters::sqlite3adapter::statementpool#clear()","activerecord::connectionadapters::statementpool#clear()","activesupport::cache::filestore#clear()","activesupport::cache::memcachestore#clear()","activesupport::cache::memorystore#clear()","activesupport::cache::nullstore#clear()","activesupport::cache::store#clear()","activesupport::cache::strategy::localcache::localstore#clear()","activesupport::descendantstracker::clear()","activesupport::inflector::inflections#clear()","activerecord::connectionadapters::schemacache#clear!()","activesupport::dependencies::classcache#clear!()","abstractcontroller::base::clear_action_methods!()","activerecord::connectionadapters::connectionhandler#clear_active_connections!()","activerecord::connectionadapters::connectionhandler#clear_all_connections!()","actionview::resolver#clear_cache()","activerecord::connectionadapters::abstractadapter#clear_cache!()","activerecord::connectionadapters::mysqladapter#clear_cache!()","activerecord::connectionadapters::postgresqladapter#clear_cache!()","activerecord::connectionadapters::sqlite3adapter#clear_cache!()","abstractcontroller::helpers::classmethods#clear_helpers()","activerecord::sqlcounter::clear_log()","activerecord::connectionadapters::querycache#clear_query_cache()","activerecord::connectionadapters::connectionhandler#clear_reloadable_connections!()","activerecord::connectionadapters::connectionpool#clear_reloadable_connections!()","actioncontroller::mimeresponds::classmethods#clear_respond_to()","activerecord::connectionadapters::schemacache#clear_table_cache!()","activemodel::validations::classmethods#clear_validators!()","activerecord::connectionadapters::mysqladapter#client_encoding()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages()","activerecord::connectionadapters::postgresqladapter::schemastatements#client_min_messages=()","activerecord::core#clone()","activesupport::safebuffer#clone_empty()","actiondispatch::http::uploadedfile#close()","actiondispatch::response#close()","activerecord::connectionadapters::abstractadapter#close()","activesupport::gzip::stream#close()","actiondispatch::response#code()","activerecord::connectionadapters::abstractmysqladapter#collation()","activerecord::connectionadapters::postgresqladapter::schemastatements#collation()","activerecord::tasks::databasetasks#collation()","activerecord::tasks::databasetasks#collation_current()","actiondispatch::routing::mapper::resources#collection()","actionview::helpers::formbuilder#collection_check_boxes()","actionview::helpers::formoptionshelper#collection_check_boxes()","actionview::helpers::formbuilder#collection_radio_buttons()","actionview::helpers::formoptionshelper#collection_radio_buttons()","actionview::helpers::formbuilder#collection_select()","actionview::helpers::formoptionshelper#collection_select()","activesupport::logsubscriber#color()","actionview::helpers::formhelper#color_field()","actionview::helpers::formtaghelper#color_field_tag()","rails::application::configuration#colorize_logging()","rails::application::configuration#colorize_logging=()","activerecord::connectionadapters::postgresqladapter::tabledefinition#column()","activerecord::connectionadapters::table#column()","activerecord::connectionadapters::tabledefinition#column()","activerecord::locking::optimistic::classmethods#column_defaults()","activerecord::modelschema::classmethods#column_defaults()","activerecord::connectionadapters::schemastatements#column_exists?()","activerecord::connectionadapters::table#column_exists?()","activerecord::attributemethods#column_for_attribute()","activerecord::connectionadapters::databaselimits#column_name_length()","activerecord::modelschema::classmethods#column_names()","activerecord::connectionadapters::columndumper#column_spec()","activerecord::connectionadapters::postgresqladapter::schemastatements#columns()","activerecord::connectionadapters::schemacache#columns()","activerecord::connectionadapters::schemastatements#columns()","activerecord::connectionadapters::tabledefinition#columns()","activerecord::modelschema::classmethods#columns()","activerecord::connectionadapters::schemastatements#columns_for_remove()","activerecord::connectionadapters::schemacache#columns_hash()","activerecord::modelschema::classmethods#columns_hash()","activerecord::connectionadapters::databaselimits#columns_per_multicolumn_index()","activerecord::connectionadapters::databaselimits#columns_per_table()","actiondispatch::response#commit!()","activerecord::connectionadapters::databasestatements#commit_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#commit_db_transaction()","actiondispatch::response#committed?()","activerecord::connectionadapters::transactionstate#committed?()","activesupport::timewithzone#comparable_time()","date#compare_with_coercion()","time#compare_with_coercion()","date#compare_without_coercion()","time#compare_without_coercion()","activesupport::configurable::configuration#compile_methods!()","activesupport::configurable::configuration::compile_methods!()","rails::api::apptask#component_root_dir()","rails::api::repotask#component_root_dir()","activesupport::multibyte::chars#compose()","activesupport::multibyte::unicode#compose()","activerecord::aggregations::classmethods#composed_of()","activesupport::gzip::compress()","actionview::helpers::asseturlhelper#compute_asset_extname()","actionview::helpers::asseturlhelper#compute_asset_host()","actionview::helpers::asseturlhelper#compute_asset_path()","rails::rack::logger#compute_tags()","activerecord::inheritance::classmethods#compute_type()","actionview::helpers::texthelper#concat()","activerecord::associations::collectionproxy#concat()","activesupport::safebuffer#concat()","rails::paths::path#concat()","actiondispatch::routing::mapper::concerns#concern()","actiondispatch::routing::mapper::concerns#concerns()","actionview::testcase::behavior#config()","activesupport::configurable#config()","activesupport::configurable::classmethods#config()","rails::appbuilder#config()","rails::dbconsole#config()","rails::engine::config()","rails::pluginbuilder#config()","rails::railtie#config()","activesupport::configurable::classmethods#config_accessor()","rails::appbuilder#configru()","rails::configuration()","activesupport::configurable::classmethods#configure()","rails::railtie::configurable::classmethods#configure()","rails::api::task#configure_rdoc_files()","activerecord::connectionadapters::connectionhandler#connected?()","activerecord::connectionadapters::connectionpool#connected?()","activerecord::connectionhandling#connected?()","activerecord::connectionadapters::connectionpool#connection()","activerecord::connectionhandling#connection()","activerecord::core#connection()","activerecord::migration#connection()","activerecord::connectionhandling#connection_config()","activerecord::core::connection_handler()","activerecord::core#connection_handler()","activerecord::core::connection_handler=()","activerecord::connectionhandling#connection_id()","activerecord::connectionhandling#connection_id=()","activerecord::connectionhandling#connection_pool()","activerecord::connectionadapters::connectionhandler#connection_pool_list()","activerecord::connectionadapters::connectionhandler#connection_pools()","rails::railtie::console()","activerecord::core::classmethods::const_missing()","activesupport::inflector#constantize()","string#constantize()","actiondispatch::routing::mapper::scoping#constraints()","actiondispatch::routing::routewrapper#constraints()","activerecord::findermethods#construct_join_dependency_for_association_find()","activerecord::findermethods#construct_limited_ids_condition()","activerecord::findermethods#construct_relation_for_association_calculations()","activerecord::findermethods#construct_relation_for_association_find()","activesupport::multibyte::chars::consumes?()","html::whitelistsanitizer#contains_bad_protocols?()","activerecord::modelschema::classmethods#content_columns()","actionview::helpers::capturehelper#content_for()","actionview::helpers::capturehelper#content_for?()","actiondispatch::request#content_length()","actiondispatch::http::mimenegotiation#content_mime_type()","actionview::helpers::activemodelinstancetag#content_tag()","actionview::helpers::taghelper#content_tag()","actionview::helpers::recordtaghelper#content_tag_for()","actioncontroller::metal#content_type()","actiondispatch::http::mimenegotiation#content_type()","actioncontroller::metal#content_type=()","actiondispatch::response#content_type=()","actiondispatch::routing::mapper::scoping#controller()","actiondispatch::routing::routewrapper#controller()","rails::consolemethods#controller()","actioncontroller::testcase::behavior::classmethods#controller_class()","actioncontroller::testcase::behavior::classmethods#controller_class=()","actioncontroller::metal#controller_name()","actioncontroller::metal::controller_name()","abstractcontroller::base#controller_path()","abstractcontroller::base::controller_path()","actionmailer::base::controller_path()","actionview::testcase::testcontroller#controller_path=()","activesupport::hashwithindifferentaccess#convert_key()","activesupport::hashwithindifferentaccess#convert_key()","actioncontroller::modelnaming#convert_to_model()","actionview::modelnaming#convert_to_model()","activesupport::hashwithindifferentaccess#convert_value()","activesupport::hashwithindifferentaccess#convert_value()","actiondispatch::request#cookie_jar()","actiondispatch::integration::session#cookies()","actiondispatch::response#cookies()","actiondispatch::testprocess#cookies()","actiondispatch::testrequest#cookies()","activerecord::migration#copy()","activemodel::errors#count()","activerecord::associations::collectionproxy#count()","activerecord::calculations#count()","activerecord::querying#count_by_sql()","activerecord::associations::collectionproxy#create()","activerecord::connectionadapters::mysql2adapter#create()","activerecord::connectionadapters::postgresqladapter::databasestatements#create()","activerecord::persistence::classmethods#create()","activerecord::relation#create()","activerecord::tasks::databasetasks#create()","activesupport::timezone::create()","activerecord::associations::collectionproxy#create!()","activerecord::relation#create!()","activerecord::validations::classmethods#create!()","activerecord::tasks::databasetasks#create_all()","activerecord::tasks::databasetasks#create_current()","activerecord::connectionadapters::abstractmysqladapter#create_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_database()","activerecord::tasks::databasetasks#create_database_url()","activerecord::fixtureset::create_fixtures()","object#create_fixtures()","rails::generators::testing::behaviour#create_generated_attribute()","activerecord::connectionadapters::schemastatements#create_join_table()","activerecord::reflection::classmethods#create_reflection()","activerecord::connectionadapters::abstractadapter#create_savepoint()","activerecord::connectionadapters::abstractmysqladapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#create_savepoint()","activerecord::connectionadapters::sqlite3adapter#create_savepoint()","activerecord::connectionadapters::postgresqladapter::schemastatements#create_schema()","activerecord::connectionadapters::schemastatements#create_table()","activerecord::schemamigration::create_table()","activerecord::querymethods#create_with()","actionview::helpers::csrfhelper#csrf_meta_tag()","actionview::helpers::csrfhelper#csrf_meta_tags()","actiondispatch::assertions::selectorassertions#css_select()","activerecord::connectionadapters::postgresqladapter::schemastatements#ctype()","date::current()","datetime::current()","time::current()","activerecord::tasks::databasetasks#current_config()","actionview::helpers::texthelper#current_cycle()","activerecord::connectionadapters::abstractmysqladapter#current_database()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_database()","activesupport::xmlmini_libxmlsax::hashbuilder#current_hash()","activesupport::xmlmini_nokogirisax::hashbuilder#current_hash()","actionview::helpers::urlhelper#current_page?()","activerecord::connectionadapters::abstractadapter#current_savepoint_name()","activerecord::connectionadapters::postgresqladapter::schemastatements#current_schema()","actioncontroller::mimeresponds::collector#custom()","actionmailer::collector#custom()","actionview::helpers::texthelper#cycle()","activerecord::attributemethods::primarykey::classmethods#dangerous_attribute_method?()","activesupport::inflector#dasherize()","string#dasherize()","rails::application::configuration#database_configuration()","rails::appbuilder#database_yml()","actiondispatch::http::cache::response#date()","actiondispatch::http::cache::response#date=()","actiondispatch::http::cache::response#date?()","actionview::helpers::formhelper#date_field()","actionview::helpers::formtaghelper#date_field_tag()","actionview::helpers::datehelper#date_select()","actionview::helpers::formbuilder#date_select()","activerecord::connectionadapters::postgresqladapter::columnmethods#daterange()","actionview::helpers::formhelper#datetime_field()","actionview::helpers::formtaghelper#datetime_field_tag()","actionview::helpers::formhelper#datetime_local_field()","actionview::helpers::formtaghelper#datetime_local_field_tag()","actionview::helpers::datehelper#datetime_select()","actionview::helpers::formbuilder#datetime_select()","numeric#day()","numeric#days()","dateandtime::calculations#days_ago()","time::days_in_month()","dateandtime::calculations#days_since()","dateandtime::calculations#days_to_week_start()","rails::appbuilder#db()","actionview::helpers::debughelper#debug()","kernel#debugger()","rails::console#debugger?()","activesupport::json::decode()","actioncontroller::httpauthentication::basic#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials()","actioncontroller::httpauthentication::digest#decode_credentials_header()","activesupport::multibyte::chars#decompose()","activesupport::multibyte::unicode#decompose()","activesupport::gzip::decompress()","activesupport::inflector#deconstantize()","string#deconstantize()","activerecord::persistence#decrement()","activesupport::cache::filestore#decrement()","activesupport::cache::memorystore#decrement()","activesupport::cache::nullstore#decrement()","activesupport::cache::store#decrement()","activerecord::persistence#decrement!()","activerecord::countercache::classmethods#decrement_counter()","activerecord::connectionadapters::abstractadapter#decrement_open_transactions()","activesupport::messageencryptor#decrypt_and_verify()","array#deep_dup()","hash#deep_dup()","object#deep_dup()","hash#deep_merge()","hash#deep_merge!()","actiondispatch::request#deep_munge()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys()","hash#deep_stringify_keys()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_stringify_keys!()","hash#deep_stringify_keys!()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","activesupport::hashwithindifferentaccess#deep_symbolize_keys()","hash#deep_symbolize_keys()","hash#deep_symbolize_keys!()","hash#deep_transform_keys()","hash#deep_transform_keys!()","actionmailer::base::default()","activesupport::hashwithindifferentaccess#default()","activesupport::hashwithindifferentaccess#default()","actioncontroller::responder#default_action()","rails::generators::base::default_aliases_for_option()","rails::generators::base::default_for_option()","rails::generators::base::default_generator_root()","actiondispatch::ssl::default_hsts_options()","actionmailer::base#default_i18n_subject()","date#default_inspect()","datetime#default_inspect()","rails::server#default_options()","actionmailer::base::default_options=()","activerecord::connectionadapters::sqlite3adapter#default_primary_key_type()","actioncontroller::implicitrender#default_render()","actioncontroller::responder#default_render()","activerecord::scoping::default::classmethods#default_scope()","activerecord::scoping::default::default_scopes?()","activerecord::connectionadapters::databasestatements#default_sequence_name()","rails::generators::base::default_source_root()","actiondispatch::integration::runner#default_url_options()","actiondispatch::routing::mapper::base#default_url_options()","actiondispatch::integration::runner#default_url_options=()","actiondispatch::routing::mapper::base#default_url_options=()","rails::generators::base::default_value_for_option()","actiondispatch::routing::mapper::scoping#defaults()","activerecord::dynamicmatchers::method#define()","activerecord::schema::define()","activemodel::attributemethods::classmethods#define_attribute_method()","activemodel::attributemethods::classmethods#define_attribute_methods()","activesupport::callbacks::classmethods#define_callbacks()","activerecord::attributemethods::primarykey::classmethods#define_method_attribute()","activerecord::attributemethods::read::classmethods#define_method_attribute()","activerecord::attributemethods::timezoneconversion::classmethods#define_method_attribute=()","activerecord::attributemethods::write::classmethods#define_method_attribute=()","activemodel::callbacks#define_model_callbacks()","module#delegate()","actionview::template::types::delegate_to()","actioncontroller::testcase::behavior#delete()","actiondispatch::flash::flashhash#delete()","actiondispatch::integration::requesthelpers#delete()","actiondispatch::middlewarestack#delete()","actiondispatch::routing::mapper::httphelpers#delete()","activemodel::errors#delete()","activerecord::associations::collectionproxy#delete()","activerecord::connectionadapters::connectionpool::queue#delete()","activerecord::connectionadapters::databasestatements#delete()","activerecord::connectionadapters::mysqladapter::statementpool#delete()","activerecord::connectionadapters::postgresqladapter::statementpool#delete()","activerecord::connectionadapters::statementpool#delete()","activerecord::persistence#delete()","activerecord::relation#delete()","activesupport::cache::store#delete()","activesupport::hashwithindifferentaccess#delete()","activesupport::hashwithindifferentaccess#delete()","rails::configuration::middlewarestackproxy#delete()","actiondispatch::request#delete?()","activerecord::associations::collectionproxy#delete_all()","activerecord::relation#delete_all()","actiondispatch::response#delete_cookie()","activesupport::cache::filestore#delete_entry()","activesupport::cache::strategy::localcache::localstore#delete_entry()","activesupport::cache::filestore#delete_matched()","activesupport::cache::memorystore#delete_matched()","activesupport::cache::nullstore#delete_matched()","activesupport::cache::store#delete_matched()","activerecord::connectionadapters::databasestatements#delete_sql()","actiondispatch::integration::requesthelpers#delete_via_redirect()","actionmailer::logsubscriber#deliver()","activesupport::inflector#demodulize()","string#demodulize()","actionview::dependencytracker::erbtracker#dependencies()","actionview::digestor#dependencies()","module#deprecate()","rails::deprecatedconstant::deprecate()","activesupport::deprecation::methodwrapper#deprecate_methods()","activesupport::deprecation::reporting#deprecation_warning()","rails::api::task#desc()","rails::generators::base::desc()","activesupport::descendantstracker#descendants()","activesupport::descendantstracker::descendants()","activerecord::inheritance::classmethods#descends_from_active_record?()","activesupport::testing::declarative::describe()","rails::generators::testing::behaviour::classmethods#destination()","activerecord::associations::collectionproxy#destroy()","activerecord::persistence#destroy()","activerecord::relation#destroy()","rails::generators::activemodel#destroy()","activerecord::persistence#destroy!()","activerecord::associations::collectionproxy#destroy_all()","activerecord::relation#destroy_all()","actiondispatch::session::cachestore#destroy_session()","actiondispatch::session::cookiestore#destroy_session()","activerecord::persistence#destroyed?()","activerecord::autosaveassociation#destroyed_by_association()","activerecord::autosaveassociation#destroyed_by_association=()","actionview::lookupcontext::viewpaths#detail_args_for()","abstractcontroller::viewpaths#details_for_lookup()","actioncontroller::testcase::behavior::classmethods#determine_default_controller_class()","actionview::testcase::behavior::classmethods#determine_default_helper_class()","actionmailer::testcase::behavior::classmethods#determine_default_mailer()","hash#diff()","actionview::digestor::digest()","actionview::digestor#digest()","activesupport::descendantstracker#direct_descendants()","activesupport::descendantstracker::direct_descendants()","sourceannotationextractor::annotation::directories()","activesupport::multibyte::unicode::unicodedatabase::dirname()","activerecord::connectionadapters::querycache::dirties_query_cache()","actionview::lookupcontext::detailscache#disable_cache()","activerecord::migration::disable_ddl_transaction!()","activerecord::connectionadapters::postgresqladapter#disable_extension()","activerecord::connectionadapters::querycache#disable_query_cache!()","activerecord::connectionadapters::abstractadapter#disable_referential_integrity()","actiondispatch::flash::flashhash#discard()","activerecord::connectionadapters::abstractadapter#disconnect!()","activerecord::connectionadapters::connectionpool#disconnect!()","activerecord::connectionadapters::mysql2adapter#disconnect!()","activerecord::connectionadapters::mysqladapter#disconnect!()","activerecord::connectionadapters::postgresqladapter#disconnect!()","activerecord::connectionadapters::sqlite3adapter#disconnect!()","actioncontroller::rackdelegation#dispatch()","actioncontroller::responder#display()","sourceannotationextractor#display()","actioncontroller::responder#display_errors()","actionview::helpers::datehelper#distance_of_time_in_words()","actionview::helpers::datehelper#distance_of_time_in_words_to_now()","activerecord::associations::collectionproxy#distinct()","activerecord::connectionadapters::schemastatements#distinct()","activerecord::querymethods#distinct()","actionview::helpers::recordtaghelper#div_for()","actioncontroller::recordidentifier#dom_class()","actioncontroller::recordidentifier::dom_class()","actionview::recordidentifier#dom_class()","actioncontroller::recordidentifier#dom_id()","actioncontroller::recordidentifier::dom_id()","actionview::recordidentifier#dom_id()","actiondispatch::http::url#domain()","activerecord::migration#down()","activesupport::multibyte::chars#downcase()","activesupport::multibyte::unicode#downcase()","activerecord::tasks::databasetasks#drop()","activerecord::tasks::databasetasks#drop_all()","activerecord::tasks::databasetasks#drop_current()","activerecord::tasks::databasetasks#drop_database_url()","activerecord::connectionadapters::schemastatements#drop_join_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#drop_schema()","activerecord::connectionadapters::schemastatements#drop_table()","activerecord::schemamigration::drop_table()","activesupport::timewithzone#dst?()","actioncontroller::parameters#dup()","activerecord::core#dup()","activesupport::hashwithindifferentaccess#dup()","activesupport::hashwithindifferentaccess#dup()","bigdecimal#duplicable?()","falseclass#duplicable?()","nilclass#duplicable?()","numeric#duplicable?()","object#duplicable?()","symbol#duplicable?()","trueclass#duplicable?()","activesupport::notifications::event#duration()","actiondispatch::flash::flashhash#each()","actiondispatch::http::headers#each()","actiondispatch::middlewarestack#each()","activemodel::errors#each()","activerecord::connectionadapters::mysqladapter::statementpool#each()","activerecord::connectionadapters::postgresqladapter::statementpool#each()","activerecord::connectionadapters::sqlite3adapter::statementpool#each()","activerecord::connectionadapters::statementpool#each()","activerecord::fixtureset#each()","activerecord::result#each()","activesupport::dependencies::watchstack#each()","rails::engine::railties#each()","rails::paths::path#each()","activesupport::autoload#eager_autoload()","activerecord::querymethods#eager_load()","rails::paths::root#eager_load()","activesupport::autoload#eager_load!()","rails::engine::eager_load!()","rails::railtie::configuration#eager_load_namespaces()","rails::engine::configuration#eager_load_paths()","activerecord::relation#eager_loading?()","actionview::helpers::formhelper#email_field()","actionview::helpers::formtaghelper#email_field_tag()","actionview::helpers::formbuilder#emitted_hidden_id?()","actiondispatch::flash::flashhash#empty?()","activemodel::errors#empty?()","activerecord::associations::collectionproxy#empty?()","activerecord::relation#empty?()","activerecord::result#empty?()","activesupport::dependencies::classcache#empty?()","activerecord::connectionadapters::abstractmysqladapter#empty_insert_statement_value()","activerecord::connectionadapters::databasestatements#empty_insert_statement_value()","activerecord::connectionadapters::abstractmysqladapter::emulate_booleans()","activerecord::connectionadapters::postgresqladapter#enable_extension()","activerecord::connectionadapters::querycache#enable_query_cache!()","kernel#enable_warnings()","activesupport::json::encode()","activesupport::json::encoding::encoder#encode()","actionview::template#encode!()","actioncontroller::httpauthentication::basic#encode_credentials()","actioncontroller::httpauthentication::digest#encode_credentials()","actioncontroller::httpauthentication::token#encode_credentials()","activesupport::json::variable#encode_json()","activerecord::core#encode_with()","activesupport::orderedhash#encode_with()","activesupport::safebuffer#encode_with()","activesupport::timewithzone#encode_with()","bigdecimal#encode_with()","activerecord::connectionadapters::postgresqladapter::schemastatements#encoding()","activerecord::connectionadapters::sqlite3adapter#encoding()","rails::application::configuration#encoding=()","string#encoding_aware?()","activesupport::messageencryptor#encrypt_and_sign()","actiondispatch::cookies::chainedcookiejars#encrypted()","activesupport::xmlmini_nokogirisax::hashbuilder#end_document()","activesupport::xmlmini_nokogirisax::hashbuilder#end_element()","date#end_of_day()","datetime#end_of_day()","time#end_of_day()","datetime#end_of_hour()","time#end_of_hour()","datetime#end_of_minute()","time#end_of_minute()","dateandtime::calculations#end_of_month()","dateandtime::calculations#end_of_quarter()","dateandtime::calculations#end_of_week()","dateandtime::calculations#end_of_year()","actiondispatch::routing::routewrapper#endpoint()","rails::engine::endpoint()","activesupport::json::engine()","activesupport::json::engine=()","actiondispatch::routing::routewrapper#engine?()","rails::engine::railties::engines()","activerecord::testfixtures#enlist_fixture_connections()","sourceannotationextractor::enumerate()","actioncontroller::metal#env()","rails::env()","rails::env=()","rails::application#env_config()","rails::engine::env_config()","actiondispatch::http::filterparameters#env_filter()","rails::console#environment()","rails::dbconsole#environment()","rails::generators::actions#environment()","rails::console#environment?()","actiondispatch::http::uploadedfile#eof?()","actionview::filesystemresolver#eql?()","activemodel::name#eql?()","activerecord::core#eql?()","activesupport::timewithzone#eql?()","time#eql?()","time#eql_with_coercion()","time#eql_without_coercion()","activesupport::xmlmini_nokogirisax::hashbuilder#error()","actionview::helpers::activemodelinstancetag#error_message()","activerecord::connectionadapters::mysql2adapter#error_number()","actionview::helpers::activemodelinstancetag#error_wrapping()","activemodel::validations#errors()","rails::generators::activemodel#errors()","activesupport::json::encoding::encoder#escape()","activerecord::connectionadapters::postgresqladapter::quoting#escape_bytea()","actiondispatch::filehandler#escape_glob_chars()","actionview::helpers::javascripthelper#escape_javascript()","actionview::helpers::taghelper#escape_once()","activerecord::connectionadapters::connectionhandler#establish_connection()","activerecord::connectionhandling#establish_connection()","actioncontroller::conditionalget::classmethods#etag()","actiondispatch::http::cache::response#etag=()","actiondispatch::http::cache::request#etag_matches?()","numeric#exabyte()","numeric#exabytes()","activerecord::spawnmethods#except()","hash#except()","hash#except!()","actionview::helpers::texthelper#excerpt()","enumerable#exclude?()","string#exclude?()","rails::apprailsloader::exec_app_rails()","activerecord::connectionadapters::databasestatements#exec_delete()","activerecord::connectionadapters::mysql2adapter#exec_delete()","activerecord::connectionadapters::mysqladapter#exec_delete()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_delete()","activerecord::connectionadapters::sqlite3adapter#exec_delete()","activerecord::connectionadapters::databasestatements#exec_insert()","activerecord::connectionadapters::mysql2adapter#exec_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_insert()","activerecord::migration#exec_migration()","activerecord::connectionadapters::databasestatements#exec_query()","activerecord::connectionadapters::mysql2adapter#exec_query()","activerecord::connectionadapters::mysqladapter#exec_query()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_query()","activerecord::connectionadapters::sqlite3adapter#exec_query()","activerecord::connectionadapters::databasestatements#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_update()","activerecord::connectionadapters::mysqladapter#exec_update()","activerecord::connectionadapters::postgresqladapter::databasestatements#exec_update()","activerecord::connectionadapters::sqlite3adapter#exec_update()","activerecord::connectionadapters::mysql2adapter#exec_without_stmt()","activerecord::connectionadapters::abstractmysqladapter#execute()","activerecord::connectionadapters::databasestatements#execute()","activerecord::connectionadapters::mysql2adapter#execute()","activerecord::connectionadapters::postgresqladapter::databasestatements#execute()","activerecord::statementcache#execute()","activesupport::fileupdatechecker#execute()","activerecord::connectionadapters::mysqladapter#execute_and_free()","activesupport::execute_hook()","activesupport::fileupdatechecker#execute_if_updated()","actiondispatch::railsentitystore#exist?()","activesupport::cache::store#exist?()","rails::paths::path#existent()","rails::paths::path#existent_directories()","actionview::lookupcontext::viewpaths#exists?()","activerecord::findermethods#exists?()","activesupport::cache::expand_cache_key()","activerecord::sanitization::classmethods#expand_hash_conditions_for_aggregates()","rails::paths::path#expanded()","actioncontroller::httpauthentication::digest#expected_response()","activerecord::connectionadapters::abstractadapter#expire()","actioncontroller::caching::fragments#expire_fragment()","actioncontroller::conditionalget#expires_in()","actioncontroller::conditionalget#expires_now()","activerecord::connectionadapters::mysql2adapter#explain()","activerecord::connectionadapters::postgresqladapter::databasestatements#explain()","activerecord::connectionadapters::sqlite3adapter#explain()","activerecord::relation#explain()","actiondispatch::filehandler#ext()","activerecord::querymethods#extending()","activerecord::connectionadapters::postgresqladapter#extension_enabled?()","activerecord::connectionadapters::abstractadapter#extensions()","activerecord::connectionadapters::postgresqladapter#extensions()","rails::generators::actions#extify()","hash#extract!()","sourceannotationextractor#extract_annotations_from()","activerecord::connectionadapters::postgresqladapter::oid::range#extract_bounds()","actiondispatch::http::url::extract_domain()","array#extract_options!()","activerecord::connectionadapters::postgresqladapter::utils#extract_schema_and_table()","actiondispatch::session::stalesessioncheck#extract_session_id()","actiondispatch::http::url::extract_subdomain()","actiondispatch::http::url::extract_subdomains()","activerecord::connectionadapters::postgresqlcolumn::extract_value_from_default()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::hashwithindifferentaccess#extractable_options?()","activesupport::orderedhash#extractable_options?()","hash#extractable_options?()","rails::generators::fallbacks()","actionview::helpers::assettaghelper#favicon_link_tag()","actioncontroller::parameters#fetch()","actiondispatch::http::headers#fetch()","activerecord::connectionadapters::postgresqladapter::oid::typemap#fetch()","activesupport::cache::store#fetch()","activesupport::hashwithindifferentaccess#fetch()","activesupport::hashwithindifferentaccess#fetch()","mime::fetch()","actionview::helpers::formtaghelper#field_set_tag()","actionview::helpers::formbuilder#fields_for()","actionview::helpers::formhelper#fields_for()","array#fifth()","actionview::helpers::formbuilder#file_field()","actionview::helpers::formhelper#file_field()","actionview::helpers::formtaghelper#file_field_tag()","rails::generators::namedbase#file_path()","activesupport::multibyte::unicode::unicodedatabase::filename()","actiondispatch::http::parameterfilter#filter()","activesupport::backtracecleaner#filter()","rails::paths::root#filter_by()","actiondispatch::remoteip::getip#filter_proxies()","actiondispatch::http::filterparameters#filtered_env()","actiondispatch::http::filterredirect#filtered_location()","actiondispatch::http::filterparameters#filtered_parameters()","actiondispatch::http::filterparameters#filtered_path()","actiondispatch::http::filterparameters#filtered_query_string()","actionview::lookupcontext::viewpaths#find()","activerecord::associations::collectionproxy#find()","activerecord::findermethods#find()","rails::engine::find()","rails::generators::activemodel::find()","sourceannotationextractor#find()","actionview::lookupcontext::viewpaths#find_all()","actionview::resolver#find_all()","actiondispatch::assertions::tagassertions#find_all_tag()","date::find_beginning_of_week!()","activerecord::findermethods#find_by()","activerecord::findermethods#find_by!()","activerecord::querying#find_by_sql()","rails::dbconsole#find_cmd_and_exec()","actionview::dependencytracker::find_dependencies()","activerecord::batches#find_each()","rails::apprailsloader::find_executable()","activerecord::findermethods#find_first()","sourceannotationextractor#find_in()","activerecord::batches#find_in_batches()","activerecord::findermethods#find_last()","activerecord::findermethods#find_one()","activerecord::relation#find_or_create_by()","activerecord::relation#find_or_create_by!()","activerecord::relation#find_or_initialize_by()","activerecord::findermethods#find_some()","actiondispatch::assertions::tagassertions#find_tag()","activerecord::findermethods#find_take()","actionview::lookupcontext::viewpaths#find_template()","activesupport::timezone::find_tzinfo()","activerecord::findermethods#find_with_associations()","activerecord::findermethods#find_with_ids()","time::find_zone()","time::find_zone!()","activerecord::dynamicmatchers::findby#finder()","activerecord::dynamicmatchers::findbybang#finder()","activerecord::dynamicmatchers::finder#finder()","activesupport::logsubscriber#finish()","activesupport::notifications::fanout#finish()","activesupport::notifications::fanout::subscribers::timed#finish()","activesupport::notifications::instrumenter#finish()","activesupport::subscriber#finish()","activerecord::associations::collectionproxy#first()","activerecord::findermethods#first()","rails::paths::path#first()","string#first()","activerecord::findermethods#first!()","actiondispatch::testprocess#fixture_file_upload()","activerecord::fixtureset::fixture_is_cached?()","activerecord::testfixtures::classmethods#fixtures()","actiondispatch::request#flash()","actiondispatch::testprocess#flash()","activesupport::logsubscriber::testhelper::mocklogger#flush()","activesupport::taggedlogging#flush()","activesupport::logsubscriber::flush_all!()","actionview::template::handlers::erubis#flush_newline_if_pending()","actiondispatch::integration::requesthelpers#follow_redirect!()","actionview::helpers::asseturlhelper#font_path()","actionview::helpers::asseturlhelper#font_url()","html::selector::for_class()","html::selector::for_id()","activesupport::testcase::for_tag()","actioncontroller::forcessl::classmethods#force_ssl()","actioncontroller::forcessl#force_ssl_redirect()","activesupport::inflector#foreign_key()","string#foreign_key()","activesupport::testing::isolation::forking_env?()","actioncontroller::requestforgeryprotection#form_authenticity_param()","actioncontroller::requestforgeryprotection#form_authenticity_token()","actiondispatch::request#form_data?()","actionview::helpers::formhelper#form_for()","actionview::helpers::formtaghelper#form_tag()","actiondispatch::http::mimenegotiation#format()","actiondispatch::http::mimenegotiation#format=()","actionmailer::mailhelper#format_paragraph()","actiondispatch::http::mimenegotiation#formats()","actiondispatch::http::mimenegotiation#formats=()","activesupport::timewithzone#formatted_offset()","activesupport::timezone#formatted_offset()","datetime#formatted_offset()","time#formatted_offset()","numeric#fortnight()","numeric#fortnights()","array#forty_two()","array#fourth()","actioncontroller::caching::fragments#fragment_cache_key()","actioncontroller::caching::fragments#fragment_exist?()","actiondispatch::exceptionwrapper#framework_trace()","rails::info::framework_version()","rails::info::frameworks()","activerecord::core#freeze()","activesupport::timewithzone#freeze()","actiondispatch::http::cache::request#fresh?()","actioncontroller::conditionalget#fresh_when()","activerecord::querymethods#from()","array#from()","string#from()","activemodel::serializers::json#from_json()","activesupport::duration#from_now()","numeric#from_now()","actionview::logsubscriber#from_rails_root()","actiondispatch::testresponse::from_response()","actiondispatch::flash::flashhash::from_session_value()","hash::from_trusted_xml()","activemodel::serializers::xml#from_xml()","hash::from_xml()","activerecord::core#frozen?()","activemodel::errors#full_message()","activemodel::errors#full_messages()","activemodel::errors#full_messages_for()","actiondispatch::exceptionwrapper#full_trace()","actiondispatch::request#fullpath()","activesupport::timewithzone#future?()","dateandtime::calculations#future?()","datetime#future?()","rails::generators::actions#gem()","rails::generators::actions#gem_group()","rails::appbuilder#gemfile()","rails::pluginbuilder#gemfile()","rails::pluginbuilder#gemfile_entry()","rails::pluginbuilder#gemspec()","activesupport::messageverifier#generate()","rails::generators::actions#generate()","activesupport::cachingkeygenerator#generate_key()","activesupport::keygenerator#generate_key()","activemodel::errors#generate_message()","abstractcontroller::collector::generate_method_for_mime()","rails::railtie::generate_railtie_name()","actiondispatch::session::compatibility#generate_sid()","rails::pluginbuilder#generate_test_dummy()","activerecord::core::classmethods#generated_feature_methods()","rails::generators::testing::behaviour#generator()","rails::generators::base::generator_name()","rails::railtie::generators()","actioncontroller::testcase::behavior#get()","actiondispatch::integration::requesthelpers#get()","actiondispatch::routing::mapper::httphelpers#get()","activemodel::errors#get()","activesupport::dependencies::classcache#get()","actiondispatch::request#get?()","actiondispatch::session::cachestore#get_session()","actiondispatch::integration::requesthelpers#get_via_redirect()","activesupport::timewithzone#getgm()","activesupport::timewithzone#getlocal()","activesupport::timewithzone#getutc()","datetime#getutc()","numeric#gigabyte()","numeric#gigabytes()","rails::generators::actions#git()","rails::appbuilder#gitignore()","rails::pluginbuilder#gitignore()","activesupport::timewithzone#gmt?()","activesupport::timewithzone#gmt_offset()","activesupport::timewithzone#gmtime()","activesupport::timewithzone#gmtoff()","activesupport::multibyte::chars#grapheme_length()","activerecord::querymethods#group()","actionview::helpers::formbuilder#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_collection_select()","actionview::helpers::formoptionshelper#grouped_options_for_select()","rails::groups()","erb::util::h()","actioncontroller::httpauthentication::digest#ha1()","actioncontroller::logsubscriber#halted_callback()","actioncontroller::requestforgeryprotection#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::exception#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession#handle_unverified_request()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession#handle_unverified_request()","activesupport::rescuable#handler_for_rescue()","actionview::template::handlers::erb#handles_encoding?()","activerecord::associations::classmethods#has_and_belongs_to_many()","activerecord::attributemethods#has_attribute?()","actioncontroller::responder#has_errors?()","activemodel::errors#has_key?()","activerecord::associations::classmethods#has_many()","activerecord::associations::classmethods#has_one()","activemodel::securepassword::classmethods#has_secure_password()","activerecord::core#hash()","activesupport::timewithzone#hash()","activerecord::querymethods#having()","actioncontroller::head#head()","actioncontroller::testcase::behavior#head()","actiondispatch::integration::requesthelpers#head()","actiondispatch::request#head?()","actiondispatch::routing::consoleformatter#header()","actiondispatch::routing::htmltableformatter#header()","actiondispatch::request#headers()","actionmailer::base#headers()","actioncontroller::testing#headers=()","rails::generators::help()","abstractcontroller::helpers::classmethods#helper()","rails::consolemethods#helper()","actioncontroller::helpers::classmethods#helper_attr()","actionview::testcase::behavior::classmethods#helper_class()","abstractcontroller::helpers::classmethods#helper_method()","actionview::testcase::behavior::classmethods#helper_method()","actioncontroller::helpers::classmethods#helpers()","rails::engine::helpers()","rails::engine::helpers_paths()","abstractcontroller::base::hidden_actions()","actionview::helpers::formbuilder#hidden_field()","actionview::helpers::formhelper#hidden_field()","actionview::helpers::formtaghelper#hidden_field_tag()","rails::generators::hidden_namespaces()","rails::generators::base::hide!()","actioncontroller::hideactions::classmethods#hide_action()","rails::generators::hide_namespace()","rails::generators::hide_namespaces()","actionview::helpers::texthelper#highlight()","rails::generators::base::hook_for()","actiondispatch::http::url#host()","actiondispatch::integration::session#host()","actiondispatch::testrequest#host=()","actiondispatch::http::url#host_with_port()","numeric#hour()","numeric#hours()","activerecord::connectionadapters::postgresqladapter::columnmethods#hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#hstore_to_string()","mime::type#html?()","actiondispatch::assertions::tagassertions#html_document()","erb::util::html_escape()","erb::util::html_escape_once()","string#html_safe()","activesupport::safebuffer#html_safe?()","numeric#html_safe?()","object#html_safe?()","actioncontroller::httpauthentication::basic::controllermethods::classmethods#http_basic_authenticate_with()","activesupport::timewithzone#httpdate()","actiondispatch::integration::session#https!()","actiondispatch::integration::session#https?()","activemodel::name#human()","activesupport::inflector::inflections#human()","activemodel::translation#human_attribute_name()","rails::generators::namedbase#human_name()","activesupport::inflector#humanize()","string#humanize()","activemodel::translation#i18n_scope()","rails::generators::namedbase#i18n_scope()","activerecord::attributemethods::primarykey#id()","activerecord::attributemethods::primarykey#id=()","activerecord::attributemethods::primarykey#id?()","activerecord::attributemethods::primarykey#id_before_type_cast()","activerecord::fixtureset::identify()","activerecord::logsubscriber#identity()","activerecord::calculations#ids()","actiondispatch::http::cache::request#if_modified_since()","actiondispatch::testrequest#if_modified_since=()","actiondispatch::http::cache::request#if_none_match()","actiondispatch::testrequest#if_none_match=()","actiondispatch::http::cache::request#if_none_match_etags()","actionview::helpers::assettaghelper#image_alt()","actionview::helpers::asseturlhelper#image_path()","actionview::helpers::formtaghelper#image_submit_tag()","actionview::helpers::assettaghelper#image_tag()","actionview::helpers::asseturlhelper#image_url()","date#in()","datetime#in()","time#in()","object#in?()","activesupport::multibyte::unicode#in_char_class?()","activerecord::connectionadapters::databaselimits#in_clause_length()","array#in_groups()","array#in_groups_of()","activesupport::timewithzone#in_time_zone()","date#in_time_zone()","datetime#in_time_zone()","string#in_time_zone()","time#in_time_zone()","actiondispatch::http::headers#include?()","activemodel::errors#include?()","activerecord::associations::collectionproxy#include?()","i18n::railtie::include_fallbacks_module()","range#include_with_range?()","activesupport::concern#included()","activerecord::querymethods#includes()","activerecord::persistence#increment()","activesupport::cache::filestore#increment()","activesupport::cache::memorystore#increment()","activesupport::cache::nullstore#increment()","activesupport::cache::store#increment()","activerecord::persistence#increment!()","activerecord::countercache::classmethods#increment_counter()","activerecord::connectionadapters::abstractadapter#increment_open_transactions()","rails::generators::namedbase#indent()","string#indent()","string#indent!()","actioncontroller::middleware#index()","activerecord::connectionadapters::table#index()","activerecord::connectionadapters::tabledefinition#index()","activerecord::connectionadapters::abstractadapter#index_algorithms()","activerecord::connectionadapters::abstractmysqladapter#index_algorithms()","activerecord::connectionadapters::postgresqladapter#index_algorithms()","enumerable#index_by()","activerecord::connectionadapters::schemastatements#index_exists?()","activerecord::connectionadapters::table#index_exists?()","rails::generators::namedbase#index_helper()","activerecord::schemamigration::index_name()","activerecord::connectionadapters::schemastatements#index_name_exists?()","activerecord::connectionadapters::schemastatements#index_name_for_remove()","activerecord::connectionadapters::databaselimits#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#index_name_length()","activerecord::connectionadapters::postgresqladapter::schemastatements#indexes()","activerecord::connectionadapters::databaselimits#indexes_per_table()","activerecord::connectionadapters::postgresqladapter::columnmethods#inet()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity()","activerecord::connectionadapters::postgresqladapter::oid::range#infinity?()","activesupport::inflector#inflections()","activesupport::testing::proxytestresult#info_signal()","activesupport::inheritableoptions#inheritable_copy()","activerecord::modelschema::classmethods#inheritance_column()","activerecord::modelschema::classmethods#inheritance_column=()","abstractcontroller::helpers::classmethods#inherited()","actioncontroller::paramswrapper::classmethods#inherited()","actioncontroller::railties::helpers#inherited()","activesupport::bufferedlogger::inherited()","activesupport::descendantstracker#inherited()","rails::application::inherited()","rails::engine::inherited()","rails::railtie::inherited()","rails::railtie::configurable::classmethods#inherited()","i18n::railtie::init_fallbacks()","activerecord::core#init_with()","rails::engine::initialize()","rails::initialize!()","actiondispatch::flash::flashhash#initialize_copy()","actiondispatch::middlewarestack#initialize_copy()","activerecord::relation#initialize_copy()","activerecord::result#initialize_copy()","activesupport::safebuffer#initialize_copy()","activerecord::core::classmethods#initialize_generated_modules()","i18n::railtie::initialize_i18n()","activerecord::connectionadapters::mysql2adapter#initialize_schema_migrations_table()","activerecord::connectionadapters::schemastatements#initialize_schema_migrations_table()","actiondispatch::session::compatibility#initialize_sid()","actionmailer::testcase::behavior#initialize_test_deliveries()","rails::initialized?()","rails::application#initialized?()","rails::generators::actions#initializer()","rails::initializable::classmethods#initializer()","rails::initializable#initializers()","rails::initializable::classmethods#initializers()","rails::initializable::classmethods#initializers_chain()","rails::initializable::classmethods#initializers_for()","string#inquiry()","actiondispatch::middlewarestack#insert()","activerecord::connectionadapters::databasestatements#insert()","activerecord::relation#insert()","rails::configuration::middlewarestackproxy#insert()","actiondispatch::middlewarestack#insert_after()","rails::configuration::middlewarestackproxy#insert_after()","actiondispatch::middlewarestack#insert_before()","rails::configuration::middlewarestackproxy#insert_before()","activerecord::connectionadapters::databasestatements#insert_fixture()","activerecord::connectionadapters::databasestatements#insert_sql()","activerecord::connectionadapters::mysql2adapter#insert_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#insert_sql()","rails::generators::namedbase#inside_template()","rails::generators::namedbase#inside_template?()","actiondispatch::middlewarestack::middleware#inspect()","actiondispatch::routing::pathredirect#inspect()","actionview::template#inspect()","activerecord::core#inspect()","activerecord::core::classmethods#inspect()","activerecord::relation#inspect()","activesupport::timewithzone#inspect()","date#inspect()","datetime#inspect()","rails::info::inspect()","activesupport::inflector::inflections::instance()","rails::railtie::configurable::classmethods#instance()","activerecord::attributemethods::classmethods#instance_method_already_implemented?()","object#instance_values()","object#instance_variable_names()","activerecord::persistence::classmethods#instantiate()","activerecord::fixtureset::instantiate_all_loaded_fixtures()","activerecord::fixtureset::instantiate_fixtures()","activesupport::cache::store::instrument()","activesupport::notifications::instrument()","activesupport::notifications::instrumenter#instrument()","activesupport::cache::store::instrument=()","activesupport::notifications::instrumenter()","activerecord::connectionadapters::postgresqladapter::columnmethods#int4range()","activerecord::connectionadapters::postgresqladapter::columnmethods#int8range()","actiondispatch::routing::routewrapper#internal?()","abstractcontroller::base::internal_methods()","activemodel::validations#invalid?()","activerecord::migration::commandrecorder#inverse_of()","rails::generators::invoke()","actiondispatch::request#ip()","actiondispatch::remoteip::getip#ips_from()","activesupport::inflector::inflections#irregular()","activesupport::timewithzone#is_a?()","loaderror#is_missing?()","loaderror#is_missing?()","string#is_utf8?()","activesupport::timewithzone#isdst()","activesupport::timewithzone#iso8601()","rails::engine::isolate_namespace()","actionview::helpers::javascripthelper#j()","actionview::helpers::assettaghelper#javascript_include_tag()","actionview::helpers::asseturlhelper#javascript_path()","actionview::helpers::javascripthelper#javascript_tag()","actionview::helpers::asseturlhelper#javascript_url()","rails::pluginbuilder#javascripts()","activerecord::relation#joined_includes_values()","activerecord::querymethods#joins()","activerecord::connectionadapters::databaselimits#joins_per_query()","activerecord::connectionadapters::postgresqladapter::columnmethods#json()","erb::util::json_escape()","actiondispatch::routing::routewrapper#json_regexp()","actioncontroller::responder#json_resource_errors()","activerecord::connectionadapters::postgresqlcolumn::cast#json_to_string()","actiondispatch::flash::flashhash#keep()","actiondispatch::flash::flashhash#key?()","actiondispatch::http::headers#key?()","actiondispatch::request#key?()","activerecord::connectionadapters::mysqladapter::statementpool#key?()","activerecord::connectionadapters::postgresqladapter::oid::typemap#key?()","activerecord::connectionadapters::postgresqladapter::statementpool#key?()","activerecord::connectionadapters::sqlite3adapter::statementpool#key?()","activerecord::connectionadapters::statementpool#key?()","activesupport::dependencies::classcache#key?()","activesupport::hashwithindifferentaccess#key?()","activesupport::hashwithindifferentaccess#key?()","rails::application#key_generator()","activesupport::cache::store#key_matcher()","actiondispatch::flash::flashhash#keys()","activemodel::errors#keys()","rails::paths::root#keys()","numeric#kilobyte()","numeric#kilobytes()","activemodel::validator#kind()","activemodel::validator::kind()","activesupport::timewithzone#kind_of?()","actiondispatch::middlewarestack::middleware#klass()","activerecord::reflection::macroreflection#klass()","abstractcontroller::translation#l()","actionview::helpers::translationhelper#l()","actionview::helpers::formbuilder#label()","actionview::helpers::formhelper#label()","actionview::helpers::formtaghelper#label_tag()","actiondispatch::middlewarestack#last()","activerecord::associations::collectionproxy#last()","activerecord::findermethods#last()","activerecord::result#last()","rails::paths::path#last()","string#last()","activerecord::findermethods#last!()","activerecord::connectionadapters::databasestatements#last_inserted_id()","activerecord::connectionadapters::mysql2adapter#last_inserted_id()","activerecord::connectionadapters::mysqladapter#last_inserted_id()","activerecord::connectionadapters::sqlite3adapter#last_inserted_id()","actiondispatch::http::cache::response#last_modified()","actiondispatch::http::cache::response#last_modified=()","actiondispatch::http::cache::response#last_modified?()","dateandtime::calculations#last_month()","dateandtime::calculations#last_quarter()","dateandtime::calculations#last_week()","dateandtime::calculations#last_year()","abstractcontroller::layouts::classmethods#layout()","activerecord::connectionadapters::abstractadapter#lease()","activerecord::associations::collectionproxy#length()","activerecord::connectionadapters::mysqladapter::statementpool#length()","activerecord::connectionadapters::postgresqladapter::statementpool#length()","activerecord::connectionadapters::sqlite3adapter::statementpool#length()","activerecord::connectionadapters::statementpool#length()","rails::appbuilder#lib()","rails::generators::actions#lib()","rails::pluginbuilder#lib()","rails::pluginbuilder#license()","activerecord::querymethods#limit()","activesupport::multibyte::chars#limit()","activerecord::connectionadapters::abstractmysqladapter#limited_update_conditions()","activerecord::connectionadapters::databasestatements#limited_update_conditions()","actionview::helpers::urlhelper#link_to()","actionview::helpers::javascripthelper#link_to_function()","actionview::helpers::urlhelper#link_to_if()","actionview::helpers::urlhelper#link_to_unless()","actionview::helpers::urlhelper#link_to_unless_current()","activesupport::notifications::fanout#listeners_for()","activesupport::notifications::fanout#listening?()","activerecord::relation#load()","activesupport::multibyte::unicode::unicodedatabase#load()","rails::api::repotask#load_and_configure_sdoc()","rails::api::task#load_and_configure_sdoc()","rails::engine::load_console()","rails::engine::load_generators()","rails::paths::root#load_paths()","rails::application#load_rack_cache()","rails::engine::load_runner()","activerecord::tasks::databasetasks#load_seed()","rails::engine::load_seed()","actiondispatch::session::cookiestore#load_session()","actiondispatch::session::stalesessioncheck#load_session()","activerecord::associations::collectionproxy#load_target()","rails::engine::load_tasks()","marshal::load_with_autoloading()","activerecord::associations::collectionproxy#loaded?()","activesupport::timezone#local()","actiondispatch::request#local?()","module#local_constant_names()","datetime::local_offset()","time::local_time()","activesupport::timezone#local_to_utc()","abstractcontroller::translation#localize()","actionview::helpers::translationhelper#localize()","actionview::testcase::behavior::renderedviewscollection#locals_for()","activesupport::timewithzone#localtime()","actioncontroller::metal#location()","actiondispatch::response#location()","actioncontroller::metal#location=()","actiondispatch::response#location=()","activerecord::querymethods#lock()","activerecord::locking::pessimistic#lock!()","activerecord::locking::optimistic::classmethods#locking_column()","activerecord::locking::optimistic::classmethods#locking_column=()","activerecord::locking::optimistic::classmethods#locking_enabled?()","activerecord::connectionadapters::abstractadapter#log()","rails::appbuilder#log()","rails::generators::actions#log()","actioncontroller::live#log_error()","rails::application::configuration#log_level()","rails::server#log_path()","activesupport::logsubscriber::log_subscribers()","activesupport::logsubscriber::testhelper::mocklogger#logged()","actioncontroller::logsubscriber#logger()","actionmailer::logsubscriber#logger()","actionview::logsubscriber#logger()","activerecord::logsubscriber#logger()","activesupport::logsubscriber::logger()","activesupport::logsubscriber#logger()","mime::type::lookup()","activemodel::translation#lookup_ancestors()","mime::type::lookup_by_extension()","abstractcontroller::viewpaths#lookup_context()","activesupport::cache::lookup_store()","activerecord::connectionadapters::postgresqladapter::columnmethods#ltree()","activerecord::connectionadapters::postgresqladapter::columnmethods#macaddr()","actionmailer::base#mail()","actionview::helpers::urlhelper#mail_to()","actionmailer::mailhelper#mailer()","actionmailer::testcase::behavior::classmethods#mailer_class()","actionmailer::base::mailer_name()","actionmailer::base#mailer_name()","activerecord::associations::collectionproxy#many?()","activerecord::relation#many?()","enumerable#many?()","activerecord::autosaveassociation#mark_for_destruction()","activerecord::autosaveassociation#marked_for_destruction?()","activerecord::connectionadapters::schemacache#marshal_dump()","activesupport::testing::proxytestresult#marshal_dump()","activesupport::timewithzone#marshal_dump()","activerecord::connectionadapters::schemacache#marshal_load()","activesupport::testing::proxytestresult#marshal_load()","activesupport::timewithzone#marshal_load()","actiondispatch::routing::mapper::base#match()","actiondispatch::routing::mapper::resources#match()","activerecord::dynamicmatchers::method::match()","html::selector#match()","actiondispatch::filehandler#match?()","module#mattr_accessor()","module#mattr_reader()","module#mattr_writer()","activerecord::calculations#maximum()","string#mb_chars()","actiondispatch::request#media_type()","numeric#megabyte()","numeric#megabytes()","actiondispatch::routing::mapper::resources#member()","actiondispatch::http::headers#merge()","activerecord::spawnmethods#merge()","activesupport::hashwithindifferentaccess#merge()","activesupport::hashwithindifferentaccess#merge()","actiondispatch::http::headers#merge!()","actiondispatch::response#message()","actionmailer::mailhelper#message()","actiondispatch::request#method()","abstractcontroller::base::method_added()","actioncontroller::implicitrender#method_for_action()","abstractcontroller::collector#method_missing()","actiondispatch::assertions::routingassertions#method_missing()","actiondispatch::integration::runner#method_missing()","actionmailer::base::method_missing()","activemodel::attributemethods#method_missing()","activerecord::migration#method_missing()","activesupport::logsubscriber::testhelper::mocklogger#method_missing()","activesupport::multibyte::chars#method_missing()","activesupport::orderedoptions#method_missing()","activesupport::testing::proxytestresult#method_missing()","activesupport::timewithzone#method_missing()","rails::railtie::configurable::classmethods#method_missing()","actiondispatch::request#method_symbol()","actioncontroller::metal::middleware()","activesupport::cache::strategy::localcache#middleware()","rails::engine::configuration#middleware()","rails::server#middleware()","date#midnight()","datetime#midnight()","time#midnight()","activerecord::migration::migrate()","activerecord::migration#migrate()","activerecord::connectionadapters::columndumper#migration_keys()","activerecord::connectionadapters::postgresqladapter#migration_keys()","rails::generators::migration#migration_template()","activerecord::schema#migrations_paths()","actionview::template#mime_type()","activerecord::calculations#minimum()","time#minus_with_coercion()","time#minus_without_coercion()","time#minus_without_duration()","numeric#minute()","numeric#minutes()","nameerror#missing_name()","nameerror#missing_name?()","activemodel::naming#model_name()","actioncontroller::modelnaming#model_name_from_record_or_class()","actionview::modelnaming#model_name_from_record_or_class()","rails::generators::namedbase#module_namespacing()","abstractcontroller::helpers::classmethods#modules_for_helpers()","actioncontroller::helpers::classmethods#modules_for_helpers()","dateandtime::calculations#monday()","integer#month()","actionview::helpers::formhelper#month_field()","actionview::helpers::formtaghelper#month_field_tag()","integer#months()","dateandtime::calculations#months_ago()","dateandtime::calculations#months_since()","actiondispatch::routing::mapper::base#mount()","benchmark::ms()","activerecord::migrationproxy#mtime()","actionview::helpers::formbuilder#multipart=()","integer#multiple_of?()","activesupport::cache::store#mute()","actiondispatch::routing::routewrapper#name()","activesupport::timewithzone::name()","qualifiedconstutils::names()","actiondispatch::routing::mapper::resources#namespace()","actiondispatch::routing::mapper::scoping#namespace()","rails::generators::base::namespace()","rails::generators::namedbase#namespace()","rails::generators::namedbase#namespaced?()","rails::generators::namedbase#namespaced_class_path()","rails::generators::namedbase#namespaced_file_path()","rails::generators::namedbase#namespaced_path()","activerecord::connectionadapters::abstractmysqladapter#native_database_types()","activerecord::connectionadapters::schemastatements#native_database_types()","actioncontroller::responder#navigation_behavior()","actioncontroller::responder#navigation_location()","actioncontroller::mimeresponds::collector#negotiate_format()","actiondispatch::http::mimenegotiation#negotiate_mime()","actiondispatch::routing::mapper::resources#nested()","actionview::digestor#nested_dependencies()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::hashwithindifferentaccess#nested_under_indifferent_access()","activesupport::orderedhash#nested_under_indifferent_access()","hash#nested_under_indifferent_access()","abstractcontroller::doublerendererror::new()","abstractcontroller::helpers::classmethods::missinghelpererror::new()","actioncontroller::metal::new()","actioncontroller::middleware::new()","actioncontroller::middleware::new()","actioncontroller::middleware::actionmiddleware::new()","actioncontroller::mimeresponds::collector::new()","actioncontroller::parameters::new()","actioncontroller::requestforgeryprotection::protectionmethods::exception::new()","actioncontroller::requestforgeryprotection::protectionmethods::nullsession::new()","actioncontroller::requestforgeryprotection::protectionmethods::resetsession::new()","actioncontroller::responder::new()","actiondispatch::callbacks::new()","actiondispatch::cookies::new()","actiondispatch::cookies::verifyandupgradelegacysignedmessage::new()","actiondispatch::debugexceptions::new()","actiondispatch::exceptionwrapper::new()","actiondispatch::filehandler::new()","actiondispatch::flash::new()","actiondispatch::http::filterparameters::new()","actiondispatch::http::headers::new()","actiondispatch::http::parameterfilter::new()","actiondispatch::http::parameters::new()","actiondispatch::http::url::new()","actiondispatch::integration::session::new()","actiondispatch::middlewarestack::new()","actiondispatch::middlewarestack::middleware::new()","actiondispatch::paramsparser::new()","actiondispatch::paramsparser::parseerror::new()","actiondispatch::publicexceptions::new()","actiondispatch::railsentitystore::new()","actiondispatch::railsmetastore::new()","actiondispatch::reloader::new()","actiondispatch::remoteip::new()","actiondispatch::remoteip::getip::new()","actiondispatch::request::new()","actiondispatch::requestid::new()","actiondispatch::response::new()","actiondispatch::routing::consoleformatter::new()","actiondispatch::routing::htmltableformatter::new()","actiondispatch::routing::mapper::resources#new()","actiondispatch::routing::urlfor::new()","actiondispatch::ssl::new()","actiondispatch::session::cachestore::new()","actiondispatch::session::compatibility::new()","actiondispatch::session::cookiestore::new()","actiondispatch::session::memcachestore::new()","actiondispatch::showexceptions::new()","actiondispatch::static::new()","actiondispatch::testrequest::new()","actiondispatch::testrequest::new()","actionmailer::base::new()","actionmailer::collector::new()","actionmailer::noninferrablemailererror::new()","actionview::dependencytracker::erbtracker::new()","actionview::digestor::new()","actionview::filesystemresolver::new()","actionview::fixtureresolver::new()","actionview::helpers::formbuilder::new()","actionview::helpers::numberhelper::invalidnumbererror::new()","actionview::partialrenderer::new()","actionview::renderer::new()","actionview::resolver::new()","actionview::resolver::cache::smallcache::new()","actionview::resolver::path::new()","actionview::template::new()","actionview::template::types::type::new()","actionview::testcase::behavior::classmethods#new()","actionview::testcase::behavior::renderedviewscollection::new()","actionview::testcase::testcontroller::new()","activemodel::errors::new()","activemodel::model::new()","activemodel::name::new()","activemodel::validator::new()","activerecord::associations::collectionproxy#new()","activerecord::attributeassignmenterror::new()","activerecord::connectionadapters::abstractadapter::schemacreation::new()","activerecord::connectionadapters::abstractmysqladapter::new()","activerecord::connectionadapters::connectionhandler::new()","activerecord::connectionadapters::connectionmanagement::new()","activerecord::connectionadapters::connectionpool::new()","activerecord::connectionadapters::connectionpool::queue::new()","activerecord::connectionadapters::connectionpool::reaper::new()","activerecord::connectionadapters::databasestatements::new()","activerecord::connectionadapters::mysql2adapter::new()","activerecord::connectionadapters::mysqladapter::new()","activerecord::connectionadapters::mysqladapter::statementpool::new()","activerecord::connectionadapters::postgresqladapter::new()","activerecord::connectionadapters::postgresqladapter::oid::array::new()","activerecord::connectionadapters::postgresqladapter::oid::range::new()","activerecord::connectionadapters::postgresqladapter::oid::typemap::new()","activerecord::connectionadapters::postgresqladapter::oid::vector::new()","activerecord::connectionadapters::postgresqladapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::new()","activerecord::connectionadapters::sqlite3adapter::statementpool::new()","activerecord::connectionadapters::sqlite3adapter::version::new()","activerecord::connectionadapters::schemacache::new()","activerecord::connectionadapters::statementpool::new()","activerecord::connectionadapters::table::new()","activerecord::connectionadapters::tabledefinition::new()","activerecord::connectionadapters::transactionstate::new()","activerecord::core::new()","activerecord::dynamicmatchers::method::new()","activerecord::fixtureset::new()","activerecord::inheritance::classmethods#new()","activerecord::logsubscriber::new()","activerecord::migration::new()","activerecord::migration::checkpending::new()","activerecord::migration::commandrecorder::new()","activerecord::migrationproxy::new()","activerecord::multiparameterassignmenterrors::new()","activerecord::querycache::new()","activerecord::querymethods::wherechain::new()","activerecord::reflection::macroreflection::new()","activerecord::relation::new()","activerecord::relation#new()","activerecord::result::new()","activerecord::sqlcounter::new()","activerecord::staleobjecterror::new()","activerecord::statementcache::new()","activerecord::statementinvalid::new()","activerecord::unknownprimarykey::new()","activesupport::backtracecleaner::new()","activesupport::bufferedlogger::new()","activesupport::cache::filestore::new()","activesupport::cache::memcachestore::new()","activesupport::cache::memorystore::new()","activesupport::cache::nullstore::new()","activesupport::cache::store::new()","activesupport::cache::strategy::localcache::localstore::new()","activesupport::cachingkeygenerator::new()","activesupport::concurrency::latch::new()","activesupport::dependencies::classcache::new()","activesupport::dependencies::watchstack::new()","activesupport::deprecation::new()","activesupport::deprecation::deprecatedconstantproxy::new()","activesupport::deprecation::deprecatedinstancevariableproxy::new()","activesupport::deprecation::deprecatedobjectproxy::new()","activesupport::fileupdatechecker::new()","activesupport::filewatcher::new()","activesupport::filewatcher::backend::new()","activesupport::gzip::stream::new()","activesupport::hashwithindifferentaccess::new()","activesupport::hashwithindifferentaccess::new()","activesupport::inflector::inflections::new()","activesupport::inheritableoptions::new()","activesupport::json::encoding::encoder::new()","activesupport::json::variable::new()","activesupport::keygenerator::new()","activesupport::logsubscriber::testhelper::mocklogger::new()","activesupport::logger::new()","activesupport::messageencryptor::new()","activesupport::messageverifier::new()","activesupport::multibyte::chars::new()","activesupport::multibyte::unicode::unicodedatabase::new()","activesupport::notifications::event::new()","activesupport::notifications::fanout::new()","activesupport::notifications::fanout::subscribers::timed::new()","activesupport::notifications::instrumenter::new()","activesupport::safebuffer::new()","activesupport::safebuffer::safeconcaterror::new()","activesupport::subscriber::new()","activesupport::taggedlogging::new()","activesupport::testing::proxytestresult::new()","activesupport::testing::remoteerror::new()","activesupport::timewithzone::new()","activesupport::timezone::new()","activesupport::timezone::new()","activesupport::xmlconverter::disallowedtype::new()","html::selector::new()","mime::type::new()","rails::api::task::new()","rails::application::new()","rails::application::configuration::new()","rails::application::routesreloader::new()","rails::backtracecleaner::new()","rails::configuration::middlewarestackproxy::new()","rails::console::new()","rails::dbconsole::new()","rails::engine::configuration::new()","rails::engine::railties::new()","rails::generators::activemodel::new()","rails::initializable::initializer::new()","rails::paths::path::new()","rails::paths::root::new()","rails::rack::debugger::new()","rails::rack::logtailer::new()","rails::rack::logger::new()","rails::railtie::configuration::new()","rails::server::new()","sourceannotationextractor::new()","activesupport::dependencies::watchstack#new_constants()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activesupport::hashwithindifferentaccess::new_from_hash_copying_default()","activerecord::persistence#new_record?()","rails::consolemethods#new_session()","html::selector#next_element()","activerecord::connectionadapters::postgresqladapter::statementpool#next_key()","activerecord::migration#next_migration_number()","dateandtime::calculations#next_month()","dateandtime::calculations#next_quarter()","html::selector#next_selector()","dateandtime::calculations#next_week()","dateandtime::calculations#next_year()","mime::nulltype#nil?()","rails::generators::no_color!()","actiondispatch::routing::consoleformatter#no_routes()","actiondispatch::routing::htmltableformatter#no_routes()","actioncontroller::httpauthentication::digest#nonce()","activerecord::querymethods#none()","activesupport::multibyte::chars#normalize()","activesupport::multibyte::unicode#normalize()","actiondispatch::routing::mapper::normalize_name()","actiondispatch::routing::mapper::normalize_path()","activerecord::querymethods::wherechain#not()","actiondispatch::http::cache::request#not_modified?()","actiondispatch::flash::flashhash#notice()","actiondispatch::flash::flashhash#notice=()","actiondispatch::flash::flashhash#now()","activesupport::timezone#now()","actiondispatch::flash::flashhash#now_is_loaded?()","html::selector#nth_child()","activerecord::connectionadapters::connectionpool::queue#num_waiting()","actionview::helpers::formhelper#number_field()","actionview::helpers::formtaghelper#number_field_tag()","actionview::helpers::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_currency()","activesupport::numberhelper#number_to_delimited()","actionview::helpers::numberhelper#number_to_human()","activesupport::numberhelper#number_to_human()","actionview::helpers::numberhelper#number_to_human_size()","activesupport::numberhelper#number_to_human_size()","actionview::helpers::numberhelper#number_to_percentage()","activesupport::numberhelper#number_to_percentage()","actionview::helpers::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_phone()","activesupport::numberhelper#number_to_rounded()","actionview::helpers::numberhelper#number_with_delimiter()","actionview::helpers::numberhelper#number_with_precision()","activerecord::connectionadapters::postgresqladapter::columnmethods#numrange()","actionview::helpers::activemodelinstancetag#object()","activerecord::logsubscriber#odd?()","activerecord::querymethods#offset()","activesupport::xmlmini_libxmlsax::hashbuilder#on_cdata_block()","activesupport::xmlmini_libxmlsax::hashbuilder#on_characters()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_end_element()","activesupport::on_load()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_document()","activesupport::xmlmini_libxmlsax::hashbuilder#on_start_element()","activerecord::spawnmethods#only()","html::selector#only_child()","actioncontroller::httpauthentication::digest#opaque()","actiondispatch::http::uploadedfile#open()","actiondispatch::railsentitystore#open()","actiondispatch::integration::runner#open_session()","activerecord::connectionadapters::abstractadapter#open_transactions()","rails::server#opt_parser()","actiondispatch::routing::urlfor#optimize_routes_generation?()","actionview::helpers::formoptionshelper#option_groups_from_collection_for_select()","actiondispatch::http::url#optional_port()","activesupport::json::encoding::encoder#options_for()","actionview::helpers::formoptionshelper#options_for_select()","actionview::helpers::formoptionshelper#options_from_collection_for_select()","activerecord::connectionadapters::schemastatements#options_include_default?()","activerecord::querymethods#order()","activesupport::inflector#ordinal()","integer#ordinal()","activesupport::inflector#ordinalize()","integer#ordinalize()","activesupport::safebuffer#original_concat()","actiondispatch::request#original_fullpath()","actiondispatch::request#original_url()","activerecord::connectionadapters::postgresqladapter::databasestatements#outside_transaction?()","range#overlaps?()","activesupport::multibyte::unicode#pack_graphemes()","actioncontroller::caching::page_cache_extension()","actioncontroller::caching::page_cache_extension=()","activemodel::naming::param_key()","actiondispatch::http::filterparameters#parameter_filter()","actiondispatch::http::filterparameters#parameter_filter_for()","activesupport::inflector#parameterize()","string#parameterize()","actiondispatch::http::parameters#parameters()","actioncontroller::testcase::behavior#paramify_values()","actioncontroller::metal#params()","actioncontroller::strongparameters#params()","actiondispatch::http::parameters#params()","actioncontroller::metal#params=()","actioncontroller::strongparameters#params=()","actioncontroller::httpauthentication::token#params_array_from()","module#parent()","module#parent_name()","activesupport::notifications::event#parent_of?()","abstractcontroller::viewpaths::classmethods#parent_prefixes()","module#parents()","activesupport::timezone#parse()","mime::type::parse()","rails::server::options#parse!()","rails::console::parse_arguments()","rails::dbconsole#parse_arguments()","mime::type::parse_data_with_trailing_star()","activesupport::json::parse_error()","actiondispatch::request#parse_query()","mime::type::parse_trailing_star()","uri::parser()","activemodel::securepassword::classmethods::instancemethodsonactivation#password=()","activemodel::securepassword::classmethods::instancemethodsonactivation#password_confirmation=()","actionview::helpers::formhelper#password_field()","actionview::helpers::formtaghelper#password_field_tag()","activesupport::timewithzone#past?()","dateandtime::calculations#past?()","datetime#past?()","actioncontroller::testcase::behavior#patch()","actiondispatch::integration::requesthelpers#patch()","actiondispatch::routing::mapper::httphelpers#patch()","actiondispatch::request#patch?()","actiondispatch::integration::requesthelpers#patch_via_redirect()","actiondispatch::http::uploadedfile#path()","actiondispatch::routing::pathredirect#path()","actiondispatch::routing::routewrapper#path()","loaderror#path()","loaderror#path()","actiondispatch::testrequest#path=()","actiondispatch::http::parameters#path_parameters()","actionview::helpers::asseturlhelper#path_to_asset()","actionview::helpers::asseturlhelper#path_to_audio()","actionview::helpers::asseturlhelper#path_to_font()","actionview::helpers::asseturlhelper#path_to_image()","actionview::helpers::asseturlhelper#path_to_javascript()","actionview::helpers::asseturlhelper#path_to_stylesheet()","actionview::helpers::asseturlhelper#path_to_video()","rails::application::configuration#paths()","rails::engine::configuration#paths()","activerecord::dynamicmatchers::method::pattern()","actioncontroller::metal#performed?()","activesupport::timewithzone#period()","activesupport::timezone#period_for_local()","activesupport::timezone#period_for_utc()","actiondispatch::cookies::chainedcookiejars#permanent()","actioncontroller::parameters#permit()","actioncontroller::parameters#permit!()","actioncontroller::parameters#permitted?()","activemodel::model#persisted?()","activerecord::persistence#persisted?()","numeric#petabyte()","numeric#petabytes()","actionview::helpers::formhelper#phone_field()","actionview::helpers::formtaghelper#phone_field_tag()","activerecord::connectionadapters::abstractmysqladapter#pk_and_sequence_for()","activerecord::calculations#pluck()","activemodel::naming::plural()","activesupport::inflector::inflections#plural()","rails::generators::namedbase#plural_file_name()","rails::generators::namedbase#plural_name()","rails::generators::namedbase#plural_table_name()","actionview::helpers::texthelper#pluralize()","activesupport::inflector#pluralize()","string#pluralize()","rails::generators::namedbase#pluralize_table_names?()","activerecord::connectionadapters::postgresqlcolumn::cast#point_to_string()","activerecord::connectionadapters::connectionpool::queue#poll()","actiondispatch::routing::polymorphicroutes#polymorphic_path()","actiondispatch::routing::polymorphicroutes#polymorphic_url()","activerecord::scoping#populate_with_current_scope_attributes()","actiondispatch::http::url#port()","actiondispatch::testrequest#port=()","actiondispatch::http::url#port_string()","actioncontroller::testcase::behavior#post()","actiondispatch::integration::requesthelpers#post()","actiondispatch::routing::mapper::httphelpers#post()","actiondispatch::request#post?()","actiondispatch::integration::requesthelpers#post_via_redirect()","activerecord::connectionadapters::postgresqladapter#postgresql_version()","activerecord::connectionadapters::abstractadapter#prefetch_primary_key?()","activerecord::dynamicmatchers::findby::prefix()","activerecord::dynamicmatchers::findbybang::prefix()","activerecord::dynamicmatchers::method::prefix()","activerecord::querymethods#preload()","actiondispatch::reloader::prepare!()","actiondispatch::response#prepare!()","activerecord::connectionadapters::columndumper#prepare_column_options()","activerecord::connectionadapters::postgresqladapter#prepare_column_options()","actioncontroller::testcase::behavior::classmethods#prepare_controller_class()","abstractcontroller::callbacks::classmethods#prepend_after_action()","abstractcontroller::callbacks::classmethods#prepend_around_action()","abstractcontroller::callbacks::classmethods#prepend_before_action()","abstractcontroller::viewpaths#prepend_view_path()","abstractcontroller::viewpaths::classmethods#prepend_view_path()","object#presence()","object#present?()","activerecord::relation#pretty_print()","dateandtime::calculations#prev_month()","dateandtime::calculations#prev_quarter()","dateandtime::calculations#prev_week()","dateandtime::calculations#prev_year()","activemodel::dirty#previous_changes()","activerecord::attributemethods::primarykey::classmethods#primary_key()","activerecord::connectionadapters::abstractmysqladapter#primary_key()","activerecord::connectionadapters::postgresqladapter::schemastatements#primary_key()","activerecord::connectionadapters::postgresqladapter::tabledefinition#primary_key()","activerecord::connectionadapters::tabledefinition#primary_key()","activerecord::attributemethods::primarykey::classmethods#primary_key=()","activerecord::connectionadapters::schemacache#primary_keys()","abstractcontroller::base#process()","actioncontroller::live#process()","actioncontroller::middleware#process()","actioncontroller::templateassertions#process()","actioncontroller::testcase::behavior#process()","abstractcontroller::callbacks#process_action()","actioncontroller::instrumentation#process_action()","actioncontroller::logsubscriber#process_action()","actioncontroller::paramswrapper#process_action()","html::whitelistsanitizer#process_attributes_for()","html::fullsanitizer#process_node()","html::linksanitizer#process_node()","html::sanitizer#process_node()","html::whitelistsanitizer#process_node()","rails::info::property()","actioncontroller::requestforgeryprotection#protect_against_forgery?()","actioncontroller::requestforgeryprotection::classmethods#protect_from_forgery()","actiondispatch::http::url#protocol()","actionview::helpers::capturehelper#provide()","activerecord::associations::collectionproxy#proxy_association()","activesupport::multibyte::proxy_class()","activesupport::multibyte::proxy_class=()","activesupport::cache::memorystore#prune()","activesupport::cache::memorystore#pruning?()","rails::appbuilder#public_directory()","rails::public_path()","activesupport::notifications::publish()","activesupport::notifications::fanout#publish()","activesupport::notifications::fanout::subscribers::timed#publish()","activerecord::tasks::databasetasks#purge()","rails::paths::path#push()","actioncontroller::testcase::behavior#put()","actiondispatch::integration::requesthelpers#put()","actiondispatch::routing::mapper::httphelpers#put()","actiondispatch::request#put?()","actiondispatch::integration::requesthelpers#put_via_redirect()","module#qualified_const_defined?()","module#qualified_const_get()","module#qualified_const_set()","actionview::nullresolver#query()","activerecord::attributemethods::query#query_attribute()","actiondispatch::request#query_parameters()","kernel#quietly()","activerecord::connectionadapters::abstractmysqladapter#quote()","activerecord::connectionadapters::quoting#quote()","activerecord::connectionadapters::sqlite3adapter#quote()","activerecord::connectionadapters::quoting#quote_column_name()","activerecord::connectionadapters::mysql2adapter#quote_string()","activerecord::connectionadapters::quoting#quote_string()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name()","activerecord::connectionadapters::quoting#quote_table_name()","activerecord::connectionadapters::postgresqladapter::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::quoting#quote_table_name_for_assignment()","activerecord::connectionadapters::sqlite3adapter#quote_table_name_for_assignment()","activerecord::connectionadapters::abstractmysqladapter#quoted_columns_for_index()","activerecord::connectionadapters::schemastatements#quoted_columns_for_index()","activerecord::connectionadapters::quoting#quoted_date()","activerecord::connectionadapters::abstractmysqladapter#quoted_false()","activerecord::connectionadapters::quoting#quoted_false()","activerecord::sanitization#quoted_id()","activerecord::locking::optimistic::classmethods#quoted_locking_column()","activerecord::attributemethods::primarykey::classmethods#quoted_primary_key()","activerecord::modelschema::classmethods#quoted_table_name()","activerecord::connectionadapters::abstractmysqladapter#quoted_true()","activerecord::connectionadapters::quoting#quoted_true()","actiondispatch::routing::routewrapper#rack_app()","actiondispatch::testrequest#rack_cookies()","actionview::helpers::formbuilder#radio_button()","actionview::helpers::formhelper#radio_button()","actionview::helpers::formtaghelper#radio_button_tag()","rails::api::apptask#rails_version()","rails::api::repotask#rails_version()","rails::railtie::railtie_name()","rails::railtie#railtie_namespace()","rails::engine::railties()","activesupport::proxyobject#raise()","qualifiedconstutils::raise_if_absolute()","rails::generators::actions#rake()","rails::railtie::rake_tasks()","rails::appbuilder#rakefile()","rails::generators::actions#rakefile()","rails::pluginbuilder#rakefile()","actionview::helpers::formhelper#range_field()","actionview::helpers::formtaghelper#range_field_tag()","activerecord::connectionadapters::postgresqlcolumn::cast#range_to_string()","actionview::helpers::outputsafetyhelper#raw()","activerecord::connectionadapters::abstractadapter#raw_connection()","actiondispatch::http::url#raw_host_with_port()","actioncontroller::httpauthentication::token#raw_params()","actiondispatch::request#raw_post()","activerecord::attributemethods::write#raw_write_attribute()","actiondispatch::http::uploadedfile#read()","actiondispatch::railsentitystore#read()","actiondispatch::railsmetastore#read()","activesupport::cache::store#read()","activerecord::attributemethods::read#read_attribute()","activerecord::attributemethods::beforetypecast#read_attribute_before_type_cast()","activesupport::cache::filestore#read_entry()","activesupport::cache::strategy::localcache::localstore#read_entry()","actioncontroller::caching::fragments#read_fragment()","activesupport::cache::memcachestore#read_multi()","activesupport::cache::store#read_multi()","activerecord::store#read_store_attribute()","date#readable_inspect()","datetime#readable_inspect()","rails::appbuilder#readme()","rails::generators::actions#readme()","rails::pluginbuilder#readme()","activerecord::querymethods#readonly()","activerecord::core#readonly!()","activerecord::core#readonly?()","activerecord::readonlyattributes::classmethods#readonly_attributes()","activerecord::connectionadapters::connectionpool#reap()","actionmailer::base::receive()","actionmailer::logsubscriber#receive()","activerecord::connectionadapters::abstractadapter#reconnect!()","activerecord::connectionadapters::mysql2adapter#reconnect!()","activerecord::connectionadapters::mysqladapter#reconnect!()","activerecord::connectionadapters::postgresqladapter#reconnect!()","activerecord::migration::commandrecorder#record()","actionview::recordidentifier#record_key_for_dom_id()","activerecord::connectionadapters::abstractmysqladapter#recreate_database()","actioncontroller::testresponse#recycle!()","module#redefine_method()","actiondispatch::routing::redirection#redirect()","actioncontroller::flash#redirect_to()","actioncontroller::instrumentation#redirect_to()","actioncontroller::logsubscriber#redirect_to()","actioncontroller::redirecting#redirect_to()","actiondispatch::testprocess#redirect_to_url()","actiondispatch::response#redirect_url()","actionview::template::types::type#ref()","mime::nulltype#ref()","mime::type#ref()","activerecord::connectionadapters::table#references()","activerecord::connectionadapters::tabledefinition#references()","activerecord::querymethods#references()","activerecord::reflection::classmethods#reflect_on_aggregation()","activerecord::reflection::classmethods#reflect_on_all_aggregations()","activerecord::reflection::classmethods#reflect_on_all_associations()","activerecord::reflection::classmethods#reflect_on_all_autosave_associations()","activerecord::reflection::classmethods#reflect_on_association()","actionview::template#refresh()","actiondispatch::routing::routewrapper#regexp()","actionview::template::types::type::register()","mime::type::register()","mime::type::register_alias()","mime::type::register_callback()","actionmailer::base::register_interceptor()","actionmailer::base::register_interceptors()","actionmailer::base::register_observer()","actionmailer::base::register_observers()","activerecord::tasks::databasetasks#register_task()","actionview::dependencytracker::register_tracker()","activerecord::connectionadapters::mysqladapter::fields::register_type()","activerecord::connectionadapters::postgresqladapter::oid::register_type()","activerecord::connectionadapters::postgresqladapter::oid::registered_type?()","rails::generators::namedbase#regular_class_path()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_update()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::hashwithindifferentaccess#regular_writer()","activesupport::concurrency::latch#release()","activerecord::connectionadapters::connectionpool#release_connection()","activerecord::connectionadapters::abstractadapter#release_savepoint()","activerecord::connectionadapters::abstractmysqladapter#release_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#release_savepoint()","activerecord::connectionadapters::sqlite3adapter#release_savepoint()","activerecord::autosaveassociation#reload()","activerecord::persistence#reload()","activerecord::relation#reload()","rails::application::routesreloader#reload!()","rails::consolemethods#reload!()","rails::application#reload_routes!()","actiondispatch::testrequest#remote_addr=()","actiondispatch::request#remote_ip()","activerecord::connectionadapters::connectionpool#remove()","activerecord::connectionadapters::table#remove()","activerecord::connectionadapters::schemastatements#remove_belongs_to()","activerecord::connectionadapters::table#remove_belongs_to()","activerecord::connectionadapters::schemastatements#remove_column()","activerecord::connectionadapters::tabledefinition#remove_column()","activerecord::connectionadapters::abstractmysqladapter#remove_column_sql()","activerecord::connectionadapters::schemastatements#remove_columns()","activerecord::connectionadapters::abstractmysqladapter#remove_columns_sql()","activerecord::connectionadapters::connectionhandler#remove_connection()","activerecord::connectionhandling#remove_connection()","activesupport::backtracecleaner#remove_filters!()","rails::generators::base::remove_hook_for()","activerecord::connectionadapters::schemastatements#remove_index()","activerecord::connectionadapters::table#remove_index()","activerecord::connectionadapters::abstractmysqladapter#remove_index_sql()","module#remove_possible_method()","activerecord::connectionadapters::schemastatements#remove_reference()","activerecord::connectionadapters::table#remove_references()","activesupport::backtracecleaner#remove_silencers!()","activerecord::connectionadapters::schemastatements#remove_timestamps()","activerecord::connectionadapters::table#remove_timestamps()","activerecord::connectionadapters::abstractmysqladapter#remove_timestamps_sql()","actionview::dependencytracker::remove_tracker()","activerecord::connectionadapters::table#rename()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column()","activerecord::connectionadapters::schemastatements#rename_column_indexes()","activerecord::connectionadapters::abstractmysqladapter#rename_column_sql()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_index()","activerecord::connectionadapters::schemastatements#rename_index()","activerecord::connectionadapters::table#rename_index()","activesupport::xmlmini#rename_key()","activerecord::connectionadapters::abstractmysqladapter#rename_table()","activerecord::connectionadapters::postgresqladapter::schemastatements#rename_table()","activerecord::connectionadapters::sqlite3adapter#rename_table()","activerecord::connectionadapters::schemastatements#rename_table()","activerecord::connectionadapters::schemastatements#rename_table_indexes()","abstractcontroller::rendering#render()","actioncontroller::instrumentation#render()","actionview::helpers::renderinghelper#render()","actionview::partialrenderer#render()","actionview::renderer#render()","actionview::template#render()","actionview::testcase::behavior#render()","actionview::testcase::behavior::locals#render()","activerecord::logsubscriber#render_bind()","actionview::renderer#render_body()","actionview::logsubscriber#render_collection()","actionview::partialrenderer#render_collection()","actionview::logsubscriber#render_partial()","actionview::partialrenderer#render_partial()","actionview::logsubscriber#render_template()","abstractcontroller::rendering#render_to_body()","actioncontroller::renderers#render_to_body()","actioncontroller::rendering#render_to_body()","abstractcontroller::rendering#render_to_string()","actioncontroller::rendering#render_to_string()","actionview::testcase::behavior#rendered_views()","actionview::testcase::behavior::renderedviewscollection#rendered_views()","activerecord::querymethods#reorder()","activesupport::multibyte::unicode#reorder_characters()","activerecord::associations::collectionproxy#replace()","activesupport::hashwithindifferentaccess#replace()","activesupport::hashwithindifferentaccess#replace()","actiondispatch::routing::routewrapper#reqs()","actioncontroller::base#request()","actioncontroller::httpauthentication::basic::controllermethods#request_http_basic_authentication()","actioncontroller::httpauthentication::digest::controllermethods#request_http_digest_authentication()","actioncontroller::httpauthentication::token::controllermethods#request_http_token_authentication()","actiondispatch::request#request_method()","actiondispatch::testrequest#request_method=()","actiondispatch::request#request_method_symbol()","actiondispatch::request#request_parameters()","actiondispatch::testrequest#request_uri=()","actiondispatch::integration::requesthelpers#request_via_redirect()","actioncontroller::parameters#require()","rails::console#require_debugger()","actionview::template::handlers::builder#require_engine()","activerecord::testfixtures::classmethods#require_fixture_classes()","activesupport::timezone::require_tzinfo()","actioncontroller::parameters#required()","activerecord::connectionadapters::abstractadapter#requires_reloading?()","activerecord::connectionadapters::sqlite3adapter#requires_reloading?()","actioncontroller::testcase::raiseactionexceptions#rescue_action_without_handler()","activesupport::rescuable::classmethods#rescue_from()","actiondispatch::exceptionwrapper#rescue_template()","actioncontroller::rescue#rescue_with_handler()","activesupport::rescuable#rescue_with_handler()","activerecord::relation#reset()","actiondispatch::integration::runner#reset!()","actiondispatch::integration::session#reset!()","activerecord::connectionadapters::abstractadapter#reset!()","activerecord::connectionadapters::mysql2adapter#reset!()","activerecord::connectionadapters::mysqladapter#reset!()","activerecord::connectionadapters::postgresqladapter#reset!()","activerecord::fixtureset::reset_cache()","activesupport::callbacks::classmethods#reset_callbacks()","activerecord::modelschema::classmethods#reset_column_information()","activerecord::countercache::classmethods#reset_counters()","actionview::helpers::texthelper#reset_cycle()","activerecord::locking::optimistic::classmethods#reset_locking_column()","activerecord::logsubscriber::reset_runtime()","activerecord::connectionadapters::databasestatements#reset_sequence!()","actioncontroller::rackdelegation#reset_session()","actiondispatch::request#reset_session()","actiondispatch::railsentitystore::resolve()","actiondispatch::railsmetastore::resolve()","actiondispatch::routing::mapper::resources#resource()","actioncontroller::responder#resource_errors()","actioncontroller::responder#resource_location()","actioncontroller::responder#resourceful?()","actiondispatch::routing::mapper::resources#resources()","actiondispatch::routing::mapper::resources#resources_path_names()","actioncontroller::responder#respond()","actioncontroller::mimeresponds#respond_to()","actioncontroller::mimeresponds::classmethods#respond_to()","actiondispatch::integration::runner#respond_to?()","actiondispatch::response#respond_to?()","activemodel::attributemethods#respond_to?()","activerecord::attributemethods#respond_to?()","rails::railtie::configurable::classmethods#respond_to?()","rails::railtie::configuration#respond_to?()","activesupport::multibyte::chars#respond_to_missing?()","activesupport::orderedoptions#respond_to_missing?()","activesupport::timewithzone#respond_to_missing?()","mime::nulltype#respond_to_missing?()","activemodel::attributemethods#respond_to_without_attributes?()","actioncontroller::mimeresponds#respond_with()","actioncontroller::base#response()","actioncontroller::mimeresponds::collector#response()","actioncontroller::live#response_body=()","actioncontroller::metal#response_body=()","actioncontroller::rackdelegation#response_body=()","actiondispatch::response#response_code()","actiondispatch::assertions::selectorassertions#response_from_page()","actioncontroller::responder#response_overridden?()","actiondispatch::routing::consoleformatter#result()","actiondispatch::routing::htmltableformatter#result()","activerecord::dynamicmatchers::finder#result()","activerecord::connectionhandling#retrieve_connection()","activerecord::connectionadapters::connectionhandler#retrieve_connection_pool()","activesupport::multibyte::chars#reverse()","activesupport::hashwithindifferentaccess#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge()","hash#reverse_merge()","activesupport::hashwithindifferentaccess#reverse_merge!()","activesupport::hashwithindifferentaccess#reverse_merge!()","hash#reverse_merge!()","activerecord::querymethods#reverse_order()","hash#reverse_update()","activerecord::migration#reversible()","activerecord::migration#revert()","activerecord::migration::commandrecorder#revert()","activerecord::migration#reverting?()","actiondispatch::http::uploadedfile#rewind()","actioncontroller::httpauthentication::token#rewrite_param_values()","activesupport::timewithzone#rfc2822()","activesupport::timewithzone#rfc822()","activerecord::transactions#rollback_active_record_state!()","activerecord::connectionadapters::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::postgresqladapter::databasestatements#rollback_db_transaction()","activerecord::connectionadapters::abstractadapter#rollback_to_savepoint()","activerecord::connectionadapters::abstractmysqladapter#rollback_to_savepoint()","activerecord::connectionadapters::postgresqladapter::databasestatements#rollback_to_savepoint()","activerecord::connectionadapters::sqlite3adapter#rollback_to_savepoint()","activerecord::connectionadapters::transactionstate#rolledback?()","actiondispatch::routing::mapper::base#root()","actiondispatch::routing::mapper::resources#root()","rails::root()","rails::engine::configuration#root=()","rails::generators::actions#route()","activemodel::naming::route_key()","rails::generators::namedbase#route_url()","rails::engine::routes()","activerecord::connectionadapters::connectionpool::reaper#run()","activerecord::migration#run()","activesupport::testing::isolation#run()","rails::initializable::initializer#run()","activesupport::callbacks#run_callbacks()","rails::generators::testing::behaviour#run_generator()","activesupport::testing::isolation::forking#run_in_isolation()","activesupport::testing::isolation::subprocess#run_in_isolation()","activerecord::testfixtures#run_in_transaction?()","rails::initializable#run_initializers()","activesupport::run_load_hooks()","rails::railtie::runner()","activerecord::logsubscriber::runtime()","activerecord::logsubscriber::runtime=()","actionview::helpers::texthelper#safe_concat()","activesupport::safebuffer#safe_concat()","activesupport::inflector#safe_constantize()","string#safe_constantize()","activesupport::dependencies::classcache#safe_get()","actionview::helpers::outputsafetyhelper#safe_join()","rails::console#sandbox?()","actionview::helpers::sanitizehelper#sanitize()","html::fullsanitizer#sanitize()","html::sanitizer#sanitize()","activerecord::sanitization::classmethods#sanitize_conditions()","actionview::helpers::sanitizehelper#sanitize_css()","html::whitelistsanitizer#sanitize_css()","activerecord::connectionadapters::databasestatements#sanitize_limit()","activerecord::sanitization::classmethods#sanitize_sql()","activerecord::sanitization::classmethods#sanitize_sql_array()","activerecord::sanitization::classmethods#sanitize_sql_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_for_conditions()","activerecord::sanitization::classmethods#sanitize_sql_hash()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_assignment()","activerecord::sanitization::classmethods#sanitize_sql_hash_for_conditions()","html::linksanitizer#sanitizeable?()","html::sanitizer#sanitizeable?()","activerecord::persistence#save()","activerecord::validations#save()","rails::generators::activemodel#save()","activerecord::persistence#save!()","activerecord::validations#save!()","activerecord::migration#say()","activerecord::migration#say_with_time()","activerecord::connectionadapters::abstractadapter#schema_cache=()","activerecord::connectionadapters::abstractadapter#schema_creation()","activerecord::connectionadapters::abstractmysqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter#schema_creation()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_names()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path()","activerecord::connectionadapters::postgresqladapter::schemastatements#schema_search_path=()","actiondispatch::routing::mapper::scoping#scope()","activerecord::associations::collectionproxy#scope()","activerecord::scoping::named::classmethods#scope()","activerecord::relation#scope_for_create()","activerecord::associations::collectionproxy#scoping()","activerecord::relation#scoping()","actionview::helpers::formhelper#search_field()","actionview::helpers::formtaghelper#search_field_tag()","array#second()","numeric#second()","numeric#seconds()","datetime#seconds_since_midnight()","time#seconds_since_midnight()","activesupport::timezone::seconds_to_utc_offset()","datetime#seconds_until_end_of_day()","time#seconds_until_end_of_day()","actioncontroller::httpauthentication::digest#secret_token()","actiondispatch::routing::consoleformatter#section()","actiondispatch::routing::htmltableformatter#section()","actiondispatch::routing::consoleformatter#section_title()","actiondispatch::routing::htmltableformatter#section_title()","actionview::helpers::formbuilder#select()","actionview::helpers::formoptionshelper#select()","activerecord::associations::collectionproxy#select()","activerecord::connectionadapters::databasestatements#select()","activerecord::connectionadapters::mysql2adapter#select()","activerecord::querymethods#select()","html::selector#select()","html::tag#select()","activerecord::connectionadapters::databasestatements#select_all()","activerecord::connectionadapters::querycache#select_all()","actionview::helpers::datehelper#select_date()","actionview::helpers::datehelper#select_datetime()","actionview::helpers::datehelper#select_day()","html::selector#select_first()","actionview::helpers::datehelper#select_hour()","actionview::helpers::datehelper#select_minute()","actionview::helpers::datehelper#select_month()","activerecord::connectionadapters::databasestatements#select_one()","activerecord::connectionadapters::databasestatements#select_rows()","activerecord::connectionadapters::mysql2adapter#select_rows()","activerecord::connectionadapters::mysqladapter#select_rows()","activerecord::connectionadapters::postgresqladapter::databasestatements#select_rows()","activerecord::connectionadapters::sqlite3adapter#select_rows()","actionview::helpers::datehelper#select_second()","actionview::helpers::formtaghelper#select_tag()","actionview::helpers::datehelper#select_time()","activerecord::connectionadapters::databasestatements#select_value()","activerecord::connectionadapters::databasestatements#select_values()","actionview::helpers::datehelper#select_year()","html::selector()","actioncontroller::implicitrender#send_action()","actioncontroller::datastreaming#send_data()","actioncontroller::instrumentation#send_data()","actioncontroller::logsubscriber#send_data()","actioncontroller::datastreaming#send_file()","actioncontroller::instrumentation#send_file()","actioncontroller::logsubscriber#send_file()","activerecord::modelschema::classmethods#sequence_name()","activerecord::modelschema::classmethods#sequence_name=()","activerecord::connectionadapters::postgresqladapter::schemastatements#serial_sequence()","activemodel::serialization#serializable_hash()","activerecord::serialization#serializable_hash()","activerecord::attributemethods::serialization::classmethods#serialize()","activerecord::attributemethods::serialization#serialized_attributes()","activerecord::attributemethods::serialization::classmethods#serialized_attributes()","actiondispatch::http::url#server_port()","actiondispatch::request#server_software()","actiondispatch::testprocess#session()","activerecord::connectionadapters::postgresqladapter#session_auth=()","actiondispatch::request#session_options=()","rails::application::configuration#session_store()","activemodel::errors#set()","activesupport::callbacks::classmethods#set_callback()","actionmailer::base#set_content_type()","actiondispatch::response#set_cookie()","rails::server#set_environment()","rails::console#set_environment!()","actionmailer::testcase::behavior#set_expected_mail()","activerecord::testfixtures::classmethods#set_fixture_class()","activesupport::logsubscriber::testhelper#set_logger()","actiondispatch::routing::mapper::resources#set_member_mappings_for_resource()","actioncontroller::live#set_response!()","actiondispatch::session::cachestore#set_session()","activerecord::connectionadapters::postgresqladapter#set_standard_conforming_strings()","activerecord::connectionadapters::transactionstate#set_state()","activesupport::logsubscriber::testhelper#setup()","activesupport::testing::setupandteardown::classmethods#setup()","actioncontroller::testcase::behavior#setup_controller_request_and_response()","activerecord::testfixtures::classmethods#setup_fixture_accessors()","activerecord::testfixtures#setup_fixtures()","rails::api::task#setup_horo_variables()","actioncontroller::templateassertions#setup_subscriptions()","actionview::testcase::behavior#setup_with_controller()","actiondispatch::routing::mapper::resources#shallow()","actiondispatch::routing::mapper::resources#shallow?()","actioncontroller::rescue#show_detailed_exceptions?()","rails::application#show_exceptions_app()","activerecord::connectionadapters::abstractmysqladapter#show_variable()","activerecord::dynamicmatchers::finder#signature()","actiondispatch::cookies::chainedcookiejars#signed()","actiondispatch::cookies::chainedcookiejars#signed_or_encrypted()","activesupport::benchmarkable#silence()","activesupport::deprecation::reporting#silence()","kernel#silence()","loggersilence#silence()","activesupport::cache::store#silence!()","kernel#silence_stream()","kernel#silence_warnings()","actionview::helpers::texthelper#simple_format()","html::selector#simple_selector()","activesupport::duration#since()","activesupport::timewithzone#since()","date#since()","datetime#since()","numeric#since()","time#since()","activemodel::naming::singular()","activesupport::inflector::inflections#singular()","activemodel::naming::singular_route_key()","rails::generators::namedbase#singular_table_name()","activesupport::inflector#singularize()","string#singularize()","actiondispatch::http::uploadedfile#size()","actiondispatch::middlewarestack#size()","activemodel::errors#size()","activerecord::associations::collectionproxy#size()","activerecord::connectionadapters::schemacache#size()","activerecord::fixtureset#size()","activerecord::relation#size()","abstractcontroller::callbacks::classmethods#skip_action_callback()","abstractcontroller::callbacks::classmethods#skip_after_action()","abstractcontroller::callbacks::classmethods#skip_around_action()","abstractcontroller::callbacks::classmethods#skip_before_action()","activesupport::callbacks::classmethods#skip_callback()","abstractcontroller::callbacks::classmethods#skip_filter()","actioncontroller::parameters#slice()","activerecord::core#slice()","hash#slice()","activesupport::multibyte::chars#slice!()","hash#slice!()","actiondispatch::exceptionwrapper#source_extract()","rails::generators::base::source_root()","activesupport::multibyte::chars#split()","array#split()","activerecord::logsubscriber#sql()","activerecord::connectionadapters::databasestatements#sql_for_insert()","activerecord::connectionadapters::postgresqladapter::databasestatements#sql_for_insert()","activerecord::connectionadapters::databaselimits#sql_query_length()","activerecord::connectionadapters::sqlite3adapter#sqlite_version()","string#squish()","string#squish!()","actioncontroller::conditionalget#stale?()","actiondispatch::session::stalesessioncheck#stale_session_check!()","actiondispatch::http::url#standard_port()","actiondispatch::http::url#standard_port?()","activesupport::logsubscriber#start()","activesupport::notifications::fanout#start()","activesupport::notifications::fanout::subscribers::timed#start()","activesupport::notifications::instrumenter#start()","activesupport::subscriber#start()","rails::console#start()","rails::console::start()","rails::dbconsole#start()","rails::dbconsole::start()","rails::server#start()","activesupport::xmlmini_nokogirisax::hashbuilder#start_document()","activesupport::xmlmini_nokogirisax::hashbuilder#start_element()","actioncontroller::logsubscriber#start_processing()","rails::rack::logger#started_request_message()","activesupport::cache::memcachestore#stats()","actioncontroller::metal#status()","actioncontroller::metal#status=()","actiondispatch::response#status=()","actiondispatch::exceptionwrapper#status_code()","actiondispatch::exceptionwrapper::status_code_for_exception()","actiondispatch::response#status_message()","activerecord::inheritance::classmethods#sti_name()","activerecord::store::classmethods#store()","activesupport::dependencies::classcache#store()","activerecord::store::classmethods#store_accessor()","activesupport::descendantstracker::store_inherited()","activesupport::timewithzone#strftime()","activerecord::connectionadapters::abstractmysqladapter#strict_mode?()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_array()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_bit()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_cidr()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_hstore()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_json()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_point()","activerecord::connectionadapters::postgresqlcolumn::cast#string_to_time()","activesupport::hashwithindifferentaccess#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys()","hash#stringify_keys()","activesupport::hashwithindifferentaccess#stringify_keys!()","activesupport::hashwithindifferentaccess#stringify_keys!()","hash#stringify_keys!()","string#strip_heredoc()","actionview::helpers::sanitizehelper#strip_links()","actionview::helpers::sanitizehelper#strip_tags()","activerecord::tasks::databasetasks#structure_dump()","activerecord::tasks::databasetasks#structure_load()","actionview::helpers::assettaghelper#stylesheet_link_tag()","actionview::helpers::asseturlhelper#stylesheet_path()","actionview::helpers::asseturlhelper#stylesheet_url()","rails::pluginbuilder#stylesheets()","class#subclasses()","rails::generators::subclasses()","rails::railtie::subclasses()","actiondispatch::http::url#subdomain()","actiondispatch::http::url#subdomains()","actionview::helpers::formbuilder#submit()","actionview::helpers::formtaghelper#submit_tag()","activerecord::connectionadapters::abstractmysqladapter#subquery_for()","activerecord::connectionadapters::databasestatements#subquery_for()","activesupport::notifications::subscribe()","activesupport::notifications::fanout#subscribe()","activesupport::notifications::subscribed()","activesupport::subscriber::subscribers()","activerecord::connectionadapters::abstractadapter#substitute_at()","activerecord::connectionadapters::postgresqladapter::databasestatements#substitute_at()","activerecord::dynamicmatchers::findbybang::suffix()","activerecord::dynamicmatchers::method::suffix()","activerecord::calculations#sum()","enumerable#sum()","dateandtime::calculations#sunday()","class#superclass_delegating_accessor()","activerecord::connectionadapters::sqlite3adapter#supports_add_column?()","activerecord::connectionadapters::abstractadapter#supports_bulk_alter?()","activerecord::connectionadapters::abstractadapter#supports_count_distinct?()","activerecord::connectionadapters::abstractadapter#supports_ddl_transactions?()","activerecord::connectionadapters::postgresqladapter#supports_ddl_transactions?()","activerecord::connectionadapters::sqlite3adapter#supports_ddl_transactions?()","activerecord::connectionadapters::abstractadapter#supports_explain?()","activerecord::connectionadapters::mysql2adapter#supports_explain?()","activerecord::connectionadapters::postgresqladapter#supports_explain?()","activerecord::connectionadapters::sqlite3adapter#supports_explain?()","activerecord::connectionadapters::abstractadapter#supports_extensions?()","activerecord::connectionadapters::postgresqladapter#supports_extensions?()","activerecord::connectionadapters::abstractadapter#supports_index_sort_order?()","activerecord::connectionadapters::abstractmysqladapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_index_sort_order?()","activerecord::connectionadapters::sqlite3adapter#supports_index_sort_order?()","activerecord::connectionadapters::postgresqladapter#supports_insert_with_returning?()","activerecord::connectionadapters::abstractadapter#supports_migrations?()","activerecord::connectionadapters::abstractmysqladapter#supports_migrations?()","activerecord::connectionadapters::postgresqladapter#supports_migrations?()","activerecord::connectionadapters::abstractadapter#supports_partial_index?()","activerecord::connectionadapters::postgresqladapter#supports_partial_index?()","activerecord::connectionadapters::abstractadapter#supports_primary_key?()","activerecord::connectionadapters::abstractmysqladapter#supports_primary_key?()","activerecord::connectionadapters::postgresqladapter#supports_ranges?()","activerecord::connectionadapters::abstractadapter#supports_savepoints?()","activerecord::connectionadapters::abstractmysqladapter#supports_savepoints?()","activerecord::connectionadapters::postgresqladapter#supports_savepoints?()","activerecord::connectionadapters::sqlite3adapter#supports_savepoints?()","activerecord::connectionadapters::databasestatements#supports_statement_cache?()","activerecord::connectionadapters::mysqladapter#supports_statement_cache?()","activerecord::connectionadapters::postgresqladapter#supports_statement_cache?()","activerecord::connectionadapters::sqlite3adapter#supports_statement_cache?()","actionview::template#supports_streaming?()","actionview::template::handlers::erb#supports_streaming?()","activerecord::connectionadapters::abstractadapter#supports_transaction_isolation?()","activerecord::connectionadapters::abstractmysqladapter#supports_transaction_isolation?()","activerecord::connectionadapters::postgresqladapter#supports_transaction_isolation?()","kernel#suppress()","activerecord::migration#suppress_messages()","actiondispatch::middlewarestack#swap()","rails::configuration::middlewarestackproxy#swap()","activesupport::multibyte::chars#swapcase()","activesupport::multibyte::unicode#swapcase()","activesupport::multibyte::unicode::codepoint#swapcase_mapping()","activesupport::hashwithindifferentaccess#symbolize_keys()","activesupport::hashwithindifferentaccess#symbolize_keys()","hash#symbolize_keys()","hash#symbolize_keys!()","activerecord::inheritance::classmethods#symbolized_base_class()","actiondispatch::http::parameters#symbolized_path_parameters()","activerecord::inheritance::classmethods#symbolized_sti_name()","mime::mimes#symbols()","abstractcontroller::translation#t()","actionview::helpers::translationhelper#t()","activerecord::connectionadapters::schemastatements#table_alias_for()","activerecord::connectionadapters::databaselimits#table_alias_length()","activerecord::connectionadapters::postgresqladapter#table_alias_length()","activerecord::connectionadapters::abstractmysqladapter#table_exists?()","activerecord::connectionadapters::postgresqladapter::schemastatements#table_exists?()","activerecord::connectionadapters::sqlite3adapter#table_exists?()","activerecord::connectionadapters::schemacache#table_exists?()","activerecord::connectionadapters::schemastatements#table_exists?()","activerecord::modelschema::classmethods#table_exists?()","activerecord::modelschema::classmethods#table_name()","activerecord::schemamigration::table_name()","rails::generators::namedbase#table_name()","activerecord::modelschema::classmethods#table_name=()","activerecord::connectionadapters::databaselimits#table_name_length()","activerecord::fixtureset#table_rows()","activerecord::connectionadapters::sqlite3adapter#table_structure()","activesupport::inflector#tableize()","string#tableize()","activerecord::connectionadapters::postgresqladapter::schemastatements#tables()","activerecord::connectionadapters::schemacache#tables()","actionview::helpers::activemodelinstancetag#tag()","actionview::helpers::taghelper#tag()","activesupport::taggedlogging#tagged()","rails::rack::logtailer#tail!()","activerecord::findermethods#take()","activerecord::findermethods#take!()","activerecord::associations::collectionproxy#target()","activesupport::logsubscriber::testhelper#teardown()","activesupport::testing::setupandteardown::classmethods#teardown()","activerecord::testfixtures#teardown_fixtures()","actioncontroller::templateassertions#teardown_subscriptions()","actionview::helpers::formhelper#telephone_field()","actionview::helpers::formtaghelper#telephone_field_tag()","rails::generators::namedbase#template()","actionview::lookupcontext::viewpaths#template_exists?()","numeric#terabyte()","numeric#terabytes()","activesupport::testing::declarative#test()","rails::appbuilder#test()","rails::pluginbuilder#test()","rails::pluginbuilder#test_dummy_assets()","rails::pluginbuilder#test_dummy_clean()","rails::pluginbuilder#test_dummy_config()","activemodel::lint::tests#test_errors_aref()","activesupport::testing::isolation#test_methods()","activemodel::lint::tests#test_model_naming()","activemodel::lint::tests#test_persisted?()","activemodel::lint::tests#test_to_key()","activemodel::lint::tests#test_to_param()","activemodel::lint::tests#test_to_partial_path()","actioncontroller::testcase::behavior::classmethods#tests()","actionmailer::testcase::behavior::classmethods#tests()","actionview::testcase::behavior::classmethods#tests()","rails::generators::testing::behaviour::classmethods#tests()","actionview::helpers::formhelper#text_area()","actionview::helpers::formtaghelper#text_area_tag()","actionview::helpers::formhelper#text_field()","actionview::helpers::formtaghelper#text_field_tag()","array#third()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","rails::application::configuration#threadsafe!()","activesupport::multibyte::chars#tidy_bytes()","activesupport::multibyte::unicode#tidy_bytes()","activesupport::timewithzone#time()","actionview::helpers::datehelper#time_ago_in_words()","actionview::helpers::formhelper#time_field()","actionview::helpers::formtaghelper#time_field_tag()","actionview::helpers::datehelper#time_select()","actionview::helpers::formbuilder#time_select()","actionview::helpers::datehelper#time_tag()","time::time_with_datetime_fallback()","actionview::helpers::formoptionshelper#time_zone_options_for_select()","actionview::helpers::formbuilder#time_zone_select()","actionview::helpers::formoptionshelper#time_zone_select()","activerecord::connectionadapters::table#timestamps()","activerecord::connectionadapters::tabledefinition#timestamps()","activesupport::multibyte::chars#titlecase()","string#titlecase()","activesupport::inflector#titleize()","activesupport::multibyte::chars#titleize()","string#titleize()","rails::appbuilder#tmp()","array#to()","string#to()","actiondispatch::response#to_a()","activemodel::errors#to_a()","activerecord::relation#to_a()","activesupport::timewithzone#to_a()","rails::paths::path#to_a()","actiondispatch::response#to_ary()","activerecord::result#to_ary()","rails::paths::path#to_ary()","actiondispatch::reloader::to_cleanup()","bigdecimal#to_d()","mysql::time#to_date()","string#to_date()","activesupport::timewithzone#to_datetime()","string#to_datetime()","array#to_default_s()","date#to_default_s()","datetime#to_default_s()","range#to_default_s()","time#to_default_s()","activesupport::timewithzone#to_f()","datetime#to_f()","actioncontroller::responder#to_format()","activesupport::timewithzone#to_formatted_s()","array#to_formatted_s()","bigdecimal#to_formatted_s()","date#to_formatted_s()","datetime#to_formatted_s()","numeric#to_formatted_s()","range#to_formatted_s()","time#to_formatted_s()","actiondispatch::flash::flashhash#to_hash()","activemodel::errors#to_hash()","activerecord::result#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","activesupport::hashwithindifferentaccess#to_hash()","actioncontroller::responder#to_html()","rails::info::to_html()","activesupport::timewithzone#to_i()","datetime#to_i()","activerecord::connectionadapters::postgresqladapter::oid::range#to_integer()","actioncontroller::responder#to_js()","object#to_json()","activemodel::conversion#to_key()","activerecord::attributemethods::primarykey#to_key()","actionview::helpers::formbuilder#to_model()","activemodel::conversion#to_model()","hash#to_options()","activesupport::hashwithindifferentaccess#to_options!()","activesupport::hashwithindifferentaccess#to_options!()","hash#to_options!()","activemodel::conversion#to_param()","activerecord::integration#to_param()","activesupport::safebuffer#to_param()","array#to_param()","falseclass#to_param()","hash#to_param()","nilclass#to_param()","object#to_param()","trueclass#to_param()","actionview::helpers::formbuilder#to_partial_path()","activemodel::conversion#to_partial_path()","actiondispatch::response#to_path()","actionview::filesystemresolver#to_path()","actiondispatch::reloader::to_prepare()","rails::railtie::configuration#to_prepare()","rails::railtie::configuration#to_prepare_blocks()","array#to_query()","hash#to_query()","object#to_query()","activesupport::timewithzone#to_r()","actiondispatch::remoteip::getip#to_s()","actionview::filesystemresolver#to_s()","actionview::fixtureresolver#to_s()","actionview::resolver::path#to_s()","activemodel::name#to_s()","activesupport::safebuffer#to_s()","activesupport::timewithzone#to_s()","activesupport::timezone#to_s()","array#to_s()","bigdecimal#to_s()","date#to_s()","datetime#to_s()","mime::type#to_s()","rails::info::to_s()","range#to_s()","sourceannotationextractor::annotation#to_s()","time#to_s()","array#to_sentence()","actiondispatch::flash::flashhash#to_session_value()","activerecord::connectionadapters::databasestatements#to_sql()","activerecord::relation#to_sql()","actionview::resolver::path#to_str()","activemodel::name#to_str()","mime::type#to_str()","mime::type#to_sym()","activesupport::xmlmini#to_tag()","activesupport::timewithzone#to_time()","date#to_time()","string#to_time()","date#to_time_in_current_zone()","activemodel::errors#to_xml()","activemodel::serializers::xml#to_xml()","activerecord::serialization#to_xml()","array#to_xml()","hash#to_xml()","activesupport::orderedhash#to_yaml_type()","activesupport::timezone#today()","activesupport::timewithzone#today?()","dateandtime::calculations#today?()","activerecord::persistence#toggle()","activerecord::persistence#toggle!()","actioncontroller::httpauthentication::token#token_and_options()","actioncontroller::httpauthentication::token#token_params_from()","html::sanitizer#tokenize()","html::whitelistsanitizer#tokenize()","date::tomorrow()","dateandtime::calculations#tomorrow()","activerecord::persistence#touch()","activerecord::connectionadapters::databasestatements#transaction()","activerecord::transactions#transaction()","activerecord::transactions::classmethods#transaction()","activerecord::connectionadapters::databasestatements#transaction_isolation_levels()","activerecord::connectionadapters::abstractadapter#transaction_joinable=()","activerecord::connectionadapters::databasestatements#transaction_open?()","hash#transform_keys()","hash#transform_keys!()","abstractcontroller::translation#translate()","actionview::helpers::translationhelper#translate()","activerecord::connectionadapters::abstractadapter#translate_exception()","activerecord::connectionadapters::abstractmysqladapter#translate_exception()","activerecord::connectionadapters::postgresqladapter#translate_exception()","activerecord::connectionadapters::sqlite3adapter#translate_exception()","activesupport::inflector#transliterate()","activesupport::filewatcher#trigger()","activesupport::filewatcher::backend#trigger()","actionview::helpers::texthelper#truncate()","string#truncate()","nilclass#try()","object#try()","nilclass#try!()","object#try!()","activerecord::testfixtures::classmethods#try_to_load_dependency()","rails::initializable::collection#tsort_each_child()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tstzrange()","activerecord::connectionadapters::postgresqladapter::columnmethods#tsvector()","activesupport::timewithzone#tv_sec()","actionview::template#type()","activerecord::connectionadapters::mysqladapter::fields::date#type()","activerecord::connectionadapters::mysqladapter::fields::datetime#type()","activerecord::connectionadapters::mysqladapter::fields::float#type()","activerecord::connectionadapters::mysqladapter::fields::time#type()","activerecord::connectionadapters::mysqladapter::fields::type#type()","activerecord::connectionadapters::postgresqladapter::oid::date#type()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type()","activerecord::connectionadapters::postgresqladapter::oid::type#type()","activerecord::calculations#type_cast()","activerecord::connectionadapters::mysqladapter#type_cast()","activerecord::connectionadapters::mysqladapter::fields::boolean#type_cast()","activerecord::connectionadapters::mysqladapter::fields::date#type_cast()","activerecord::connectionadapters::mysqladapter::fields::datetime#type_cast()","activerecord::connectionadapters::mysqladapter::fields::decimal#type_cast()","activerecord::connectionadapters::mysqladapter::fields::float#type_cast()","activerecord::connectionadapters::mysqladapter::fields::identity#type_cast()","activerecord::connectionadapters::mysqladapter::fields::integer#type_cast()","activerecord::connectionadapters::mysqladapter::fields::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::array#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bit#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::boolean#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::bytea#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::cidr#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::date#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::decimal#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::float#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::hstore#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::identity#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::integer#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::json#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::money#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::point#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::range#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::time#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::timestamp#type_cast()","activerecord::connectionadapters::postgresqladapter::oid::vector#type_cast()","activerecord::connectionadapters::postgresqladapter::quoting#type_cast()","activerecord::connectionadapters::postgresqlcolumn#type_cast()","activerecord::connectionadapters::quoting#type_cast()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_boolean()","activerecord::connectionadapters::abstractadapter::type_cast_config_to_integer()","activerecord::connectionadapters::mysqladapter::fields::type#type_cast_for_write()","activerecord::connectionadapters::postgresqladapter::oid::type#type_cast_for_write()","activerecord::connectionadapters::abstractmysqladapter#type_to_sql()","activerecord::connectionadapters::postgresqladapter::schemastatements#type_to_sql()","activerecord::connectionadapters::querycache#uncached()","activerecord::querycache::classmethods#uncached()","activesupport::inflector::inflections#uncountable()","activemodel::naming::uncountable?()","rails::generators::namedbase#uncountable?()","activemodel::attributemethods::classmethods#undefine_attribute_methods()","activesupport::inflector#underscore()","string#underscore()","object#unescape()","activerecord::connectionadapters::postgresqladapter::quoting#unescape_bytea()","actiondispatch::filehandler#unescape_path()","activerecord::associations::collectionproxy#uniq()","activerecord::querymethods#uniq()","array#uniq_by()","array#uniq_by!()","activerecord::relation#uniq_value()","activesupport::multibyte::unicode#unpack_graphemes()","actioncontroller::logsubscriber#unpermitted_parameters()","activerecord::connectionadapters::abstractadapter#unprepared_statement()","activerecord::connectionadapters::abstractadapter#unprepared_visitor()","mime::type::unregister()","activerecord::querymethods#unscope()","activerecord::scoping::default::classmethods#unscoped()","actiondispatch::middlewarestack#unshift()","rails::paths::path#unshift()","activesupport::notifications::unsubscribe()","activesupport::notifications::fanout#unsubscribe()","activesupport::duration#until()","numeric#until()","activerecord::migration#up()","activesupport::multibyte::chars#upcase()","activesupport::multibyte::unicode#upcase()","activerecord::connectionadapters::databasestatements#update()","activerecord::persistence#update()","activerecord::relation#update()","activesupport::hashwithindifferentaccess#update()","activesupport::hashwithindifferentaccess#update()","rails::generators::activemodel#update()","activerecord::persistence#update!()","activerecord::relation#update_all()","activerecord::persistence#update_attribute()","activerecord::persistence#update_attributes()","activerecord::persistence#update_attributes!()","activerecord::persistence#update_column()","activerecord::persistence#update_columns()","activerecord::countercache::classmethods#update_counters()","activerecord::locking::optimistic::classmethods#update_counters()","activerecord::connectionadapters::databasestatements#update_sql()","activerecord::connectionadapters::postgresqladapter::databasestatements#update_sql()","activesupport::fileupdatechecker#updated?()","actiondispatch::http::url#url()","actionview::helpers::formhelper#url_field()","actionview::helpers::formtaghelper#url_field_tag()","actioncontroller::metal#url_for()","actiondispatch::http::url::url_for()","actiondispatch::routing::urlfor#url_for()","actionview::routingurlfor#url_for()","actioncontroller::urlfor#url_options()","actiondispatch::integration::session#url_options()","actiondispatch::integrationtest#url_options()","actiondispatch::routing::urlfor#url_options()","actionview::helpers::asseturlhelper#url_to_asset()","actionview::helpers::asseturlhelper#url_to_audio()","actionview::helpers::asseturlhelper#url_to_font()","actionview::helpers::asseturlhelper#url_to_image()","actionview::helpers::asseturlhelper#url_to_javascript()","actionview::helpers::asseturlhelper#url_to_stylesheet()","actionview::helpers::asseturlhelper#url_to_video()","activesupport::timezone::us_zones()","rails::generators::base::usage_path()","actioncontroller::metal::use()","actiondispatch::middlewarestack#use()","rails::configuration::middlewarestackproxy#use()","actiondispatch::http::mimenegotiation#use_accept_header()","activerecord::connectionadapters::postgresqladapter#use_insert_returning?()","actioncontroller::renderers::classmethods#use_renderer()","actioncontroller::renderers::classmethods#use_renderers()","time::use_zone()","activesupport::timewithzone#usec()","actiondispatch::testrequest#user_agent=()","actioncontroller::httpauthentication::basic#user_name_and_password()","activerecord::testfixtures::classmethods#uses_transaction()","activerecord::testfixtures::classmethods#uses_transaction?()","activerecord::findermethods#using_limitable_reflections?()","actiondispatch::routing::mapper::resources#using_match_shorthand?()","activesupport::timewithzone#utc()","datetime#utc()","activesupport::timewithzone#utc?()","datetime#utc?()","activesupport::timewithzone#utc_offset()","activesupport::timezone#utc_offset()","datetime#utc_offset()","time::utc_time()","activesupport::timezone#utc_to_local()","actionview::helpers::formtaghelper#utf8_enforcer_tag()","actiondispatch::request#uuid()","activerecord::connectionadapters::postgresqladapter::columnmethods#uuid()","activemodel::validations#valid?()","activerecord::dynamicmatchers::method#valid?()","activerecord::validations#valid?()","actiondispatch::http::mimenegotiation#valid_accept_header()","activerecord::connectionadapters::sqlite3adapter#valid_alter_table_options()","activerecord::connectionadapters::abstractadapter#valid_type?()","activerecord::connectionadapters::abstractmysqladapter#valid_type?()","activerecord::connectionadapters::postgresqladapter#valid_type?()","activemodel::validations::classmethods#validate()","activemodel::validator#validate()","actioncontroller::httpauthentication::digest#validate_digest_response()","i18n::railtie::validate_fallbacks()","actioncontroller::httpauthentication::digest#validate_nonce()","html::sanitizer#validate_options()","activemodel::validations::classmethods#validates()","activemodel::validations::classmethods#validates!()","activemodel::validations::helpermethods#validates_absence_of()","activemodel::validations::helpermethods#validates_acceptance_of()","activerecord::validations::classmethods#validates_associated()","activemodel::validations::helpermethods#validates_confirmation_of()","activemodel::validations::classmethods#validates_each()","activemodel::validations::helpermethods#validates_exclusion_of()","activemodel::validations::helpermethods#validates_format_of()","activemodel::validations::helpermethods#validates_inclusion_of()","activemodel::validations::helpermethods#validates_length_of()","activemodel::validations::helpermethods#validates_numericality_of()","activemodel::validations::helpermethods#validates_presence_of()","activerecord::validations::classmethods#validates_presence_of()","activemodel::validations::helpermethods#validates_size_of()","activerecord::validations::classmethods#validates_uniqueness_of()","activemodel::validations#validates_with()","activemodel::validations::classmethods#validates_with()","activemodel::validations::classmethods#validators()","activemodel::validations::classmethods#validators_on()","activemodel::errors#values()","activerecord::relation#values()","rails::paths::root#values()","activesupport::hashwithindifferentaccess#values_at()","activesupport::hashwithindifferentaccess#values_at()","rails::paths::root#values_at()","rails::appbuilder#vendor()","rails::generators::actions#vendor()","rails::appbuilder#vendor_javascripts()","rails::appbuilder#vendor_stylesheets()","actiondispatch::routing::routewrapper#verb()","actioncontroller::requestforgeryprotection#verified_request?()","activesupport::messageverifier#verify()","activerecord::connectionadapters::abstractadapter#verify!()","actiondispatch::cookies::verifyandupgradelegacysignedmessage#verify_and_upgrade_legacy_signed_message()","actioncontroller::requestforgeryprotection#verify_authenticity_token()","mime::type#verify_request?()","actionmailer::version()","activemodel::version()","activerecord::version()","activerecord::schemamigration#version()","activesupport::version()","rails::version()","actionview::helpers::asseturlhelper#video_path()","actionview::helpers::assettaghelper#video_tag()","actionview::helpers::asseturlhelper#video_url()","abstractcontroller::rendering#view_assigns()","actioncontroller::caching#view_cache_dependencies()","actioncontroller::caching::classmethods#view_cache_dependency()","abstractcontroller::rendering#view_context()","abstractcontroller::rendering#view_context_class()","abstractcontroller::rendering::classmethods#view_context_class()","abstractcontroller::viewpaths::classmethods#view_paths()","abstractcontroller::viewpaths::classmethods#view_paths=()","actionview::lookupcontext::viewpaths#view_paths=()","actionview::testcase::behavior::renderedviewscollection#view_rendered?()","abstractcontroller::rendering#view_renderer()","actioncontroller::hideactions::classmethods#visible_action?()","activesupport::logsubscriber::testhelper#wait()","activesupport::notifications::fanout#wait()","activesupport::deprecation::reporting#warn()","activesupport::filewatcher#watch()","activesupport::dependencies::watchstack#watch_namespaces()","rails::railtie::configuration#watchable_dirs()","rails::railtie::configuration#watchable_files()","activesupport::dependencies::watchstack#watching?()","numeric#week()","actionview::helpers::formhelper#week_field()","actionview::helpers::formtaghelper#week_field_tag()","numeric#weeks()","dateandtime::calculations#weeks_ago()","dateandtime::calculations#weeks_since()","activerecord::querymethods#where()","activerecord::relation#where_values_hash()","rails::application::configuration#whiny_nils=()","abstractcontroller::railties::routeshelpers::with()","activesupport::json::with_backend()","activesupport::xmlmini#with_backend()","activerecord::connectionadapters::connectionpool#with_connection()","actiondispatch::routing::mapper::base#with_default_scope()","actiondispatch::routing::mapper::resources#with_exclusive_scope()","actionview::lookupcontext::viewpaths#with_fallbacks()","activesupport::hashwithindifferentaccess#with_indifferent_access()","activesupport::hashwithindifferentaccess#with_indifferent_access()","hash#with_indifferent_access()","activesupport::cache::strategy::localcache#with_local_cache()","activerecord::locking::pessimistic#with_lock()","object#with_options()","actiondispatch::assertions::routingassertions#with_routing()","actiondispatch::routing::mapper::resources#with_scope_level()","activerecord::transactions#with_transaction_returning_status()","kernel#with_warnings()","actioncontroller::base::without_modules()","actionview::helpers::texthelper#word_wrap()","array::wrap()","actioncontroller::paramswrapper::classmethods#wrap_parameters()","rails::generators::namedbase#wrap_with_namespace()","actiondispatch::railsentitystore#write()","actiondispatch::railsmetastore#write()","activerecord::migration#write()","activesupport::cache::store#write()","activerecord::attributemethods::write#write_attribute()","activesupport::cache::filestore#write_entry()","activesupport::cache::strategy::localcache::localstore#write_entry()","actioncontroller::caching::fragments#write_fragment()","activerecord::store#write_store_attribute()","actioncontroller::testcase::behavior#xhr()","actiondispatch::integration::requesthelpers#xhr()","actiondispatch::request#xhr?()","activerecord::connectionadapters::postgresqladapter::columnmethods#xml()","activerecord::connectionadapters::postgresqladapter::tabledefinition#xml()","actioncontroller::testcase::behavior#xml_http_request()","actiondispatch::integration::requesthelpers#xml_http_request()","actiondispatch::request#xml_http_request?()","activesupport::timewithzone#xmlschema()","date#xmlschema()","integer#year()","integer#years()","dateandtime::calculations#years_ago()","dateandtime::calculations#years_since()","date::yesterday()","dateandtime::calculations#yesterday()","activesupport::timewithzone#zone()","time::zone()","time::zone=()","activesupport::timezone::zones_map()","","","","","","",""],"info":[["AbstractController","","classes/AbstractController.html","",""],["AbstractController::Base","","classes/AbstractController/Base.html","","<p><code>AbstractController::Base</code> is a low-level API. Nobody should be\nusing it directly, and subclasses (like …\n"],["AbstractController::Callbacks","","classes/AbstractController/Callbacks.html","",""],["AbstractController::Callbacks::ClassMethods","","classes/AbstractController/Callbacks/ClassMethods.html","",""],["AbstractController::Collector","","classes/AbstractController/Collector.html","",""],["AbstractController::DoubleRenderError","","classes/AbstractController/DoubleRenderError.html","",""],["AbstractController::Helpers","","classes/AbstractController/Helpers.html","",""],["AbstractController::Helpers::ClassMethods","","classes/AbstractController/Helpers/ClassMethods.html","",""],["AbstractController::Helpers::ClassMethods::MissingHelperError","","classes/AbstractController/Helpers/ClassMethods/MissingHelperError.html","",""],["AbstractController::Layouts","","classes/AbstractController/Layouts.html","","<p>Layouts reverse the common pattern of including shared headers and footers\nin many templates to isolate …\n"],["AbstractController::Layouts::ClassMethods","","classes/AbstractController/Layouts/ClassMethods.html","",""],["AbstractController::Railties","","classes/AbstractController/Railties.html","",""],["AbstractController::Railties::RoutesHelpers","","classes/AbstractController/Railties/RoutesHelpers.html","",""],["AbstractController::Rendering","","classes/AbstractController/Rendering.html","",""],["AbstractController::Rendering::ClassMethods","","classes/AbstractController/Rendering/ClassMethods.html","",""],["AbstractController::Translation","","classes/AbstractController/Translation.html","",""],["AbstractController::UrlFor","","classes/AbstractController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class (e.g. an abstract\ncontroller or mailer). The class has to provide …\n"],["AbstractController::UrlFor::ClassMethods","","classes/AbstractController/UrlFor/ClassMethods.html","",""],["AbstractController::ViewPaths","","classes/AbstractController/ViewPaths.html","",""],["AbstractController::ViewPaths::ClassMethods","","classes/AbstractController/ViewPaths/ClassMethods.html","",""],["ActionController","","classes/ActionController.html","",""],["ActionController::ActionController","","classes/ActionController/ActionController.html","",""],["ActionController::ActionController::ActionController","","classes/ActionController/ActionController/ActionController.html","",""],["ActionController::Base","","classes/ActionController/Base.html","","<p>Action Controllers are the core of a web request in Rails. They are made up\nof one or more actions that …\n"],["ActionController::Caching","","classes/ActionController/Caching.html","","<p>Caching is a cheap way of speeding up slow applications by keeping the\nresult of calculations, renderings, …\n"],["ActionController::Caching::ClassMethods","","classes/ActionController/Caching/ClassMethods.html","",""],["ActionController::Caching::ConfigMethods","","classes/ActionController/Caching/ConfigMethods.html","",""],["ActionController::Caching::Fragments","","classes/ActionController/Caching/Fragments.html","","<p>Fragment caching is used for caching various blocks within views without\ncaching the entire action as …\n"],["ActionController::ConditionalGet","","classes/ActionController/ConditionalGet.html","",""],["ActionController::ConditionalGet::ClassMethods","","classes/ActionController/ConditionalGet/ClassMethods.html","",""],["ActionController::Cookies","","classes/ActionController/Cookies.html","",""],["ActionController::DataStreaming","","classes/ActionController/DataStreaming.html","","<p>Methods for sending arbitrary data and for streaming files to the browser,\ninstead of rendering.\n"],["ActionController::Flash","","classes/ActionController/Flash.html","",""],["ActionController::Flash::ClassMethods","","classes/ActionController/Flash/ClassMethods.html","",""],["ActionController::ForceSSL","","classes/ActionController/ForceSSL.html","","<p>This module provides a method which will redirect browser to use HTTPS\nprotocol. This will ensure that …\n"],["ActionController::ForceSSL::ClassMethods","","classes/ActionController/ForceSSL/ClassMethods.html","",""],["ActionController::Head","","classes/ActionController/Head.html","",""],["ActionController::Helpers","","classes/ActionController/Helpers.html","","<p>The Rails framework provides a large number of helpers for working with\nassets, dates, forms, numbers …\n"],["ActionController::Helpers::ClassMethods","","classes/ActionController/Helpers/ClassMethods.html","",""],["ActionController::HideActions","","classes/ActionController/HideActions.html","","<p>Adds the ability to prevent public methods on a controller to be called as\nactions.\n"],["ActionController::HideActions::ClassMethods","","classes/ActionController/HideActions/ClassMethods.html","",""],["ActionController::HttpAuthentication","","classes/ActionController/HttpAuthentication.html","","<p>Makes it dead easy to do HTTP Basic, Digest and Token authentication.\n"],["ActionController::HttpAuthentication::Basic","","classes/ActionController/HttpAuthentication/Basic.html","","<p>Makes it dead easy to do HTTP Basic authentication.\n<p>Simple Basic example\n\n<pre class=\"ruby\"> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Basic::ControllerMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html","",""],["ActionController::HttpAuthentication::Digest","","classes/ActionController/HttpAuthentication/Digest.html","","<p>Makes it dead easy to do HTTP Digest authentication.\n<p>Simple Digest example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;digest/md5&#39;</span>\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Digest::ControllerMethods","","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html","",""],["ActionController::HttpAuthentication::Token","","classes/ActionController/HttpAuthentication/Token.html","","<p>Makes it dead easy to do HTTP Token authentication.\n<p>Simple Token example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ApplicationController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActionController::HttpAuthentication::Token::ControllerMethods","","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html","",""],["ActionController::ImplicitRender","","classes/ActionController/ImplicitRender.html","",""],["ActionController::Instrumentation","","classes/ActionController/Instrumentation.html","","<p>Adds instrumentation to several ends in ActionController::Base. It also\nprovides some hooks related with …\n"],["ActionController::Instrumentation::ClassMethods","","classes/ActionController/Instrumentation/ClassMethods.html","",""],["ActionController::Live","","classes/ActionController/Live.html","","<p>Mix this module in to your controller, and all actions in that controller\nwill be able to stream data …\n"],["ActionController::Live::Response","","classes/ActionController/Live/Response.html","",""],["ActionController::Live::Response::Header","","classes/ActionController/Live/Response/Header.html","",""],["ActionController::LogSubscriber","","classes/ActionController/LogSubscriber.html","",""],["ActionController::Metal","","classes/ActionController/Metal.html","","<p><code>ActionController::Metal</code> is the simplest possible controller,\nproviding a valid Rack interface without …\n"],["ActionController::Middleware","","classes/ActionController/Middleware.html","",""],["ActionController::Middleware::ActionMiddleware","","classes/ActionController/Middleware/ActionMiddleware.html","",""],["ActionController::MimeResponds","","classes/ActionController/MimeResponds.html","",""],["ActionController::MimeResponds::ClassMethods","","classes/ActionController/MimeResponds/ClassMethods.html","",""],["ActionController::MimeResponds::Collector","","classes/ActionController/MimeResponds/Collector.html","","<p>A container for responses available from the current controller for\nrequests for different mime-types …\n"],["ActionController::ModelNaming","","classes/ActionController/ModelNaming.html","",""],["ActionController::ParameterMissing","","classes/ActionController/ParameterMissing.html","","<p>Raised when a required parameter is missing.\n\n<pre>params = ActionController::Parameters.new(a: {})\nparams.fetch(:b) ...</pre>\n"],["ActionController::Parameters","","classes/ActionController/Parameters.html","","<p>Action Controller Parameters\n<p>Allows to choose which attributes should be whitelisted for mass updating …\n"],["ActionController::ParamsWrapper","","classes/ActionController/ParamsWrapper.html","","<p>Wraps the parameters hash into a nested hash. This will allow clients to\nsubmit POST requests without …\n"],["ActionController::ParamsWrapper::ClassMethods","","classes/ActionController/ParamsWrapper/ClassMethods.html","",""],["ActionController::RackDelegation","","classes/ActionController/RackDelegation.html","",""],["ActionController::Railties","","classes/ActionController/Railties.html","",""],["ActionController::Railties::Helpers","","classes/ActionController/Railties/Helpers.html","",""],["ActionController::RecordIdentifier","","classes/ActionController/RecordIdentifier.html","",""],["ActionController::Redirecting","","classes/ActionController/Redirecting.html","",""],["ActionController::Renderers","","classes/ActionController/Renderers.html","",""],["ActionController::Renderers::All","","classes/ActionController/Renderers/All.html","",""],["ActionController::Renderers::ClassMethods","","classes/ActionController/Renderers/ClassMethods.html","",""],["ActionController::Rendering","","classes/ActionController/Rendering.html","",""],["ActionController::RequestForgeryProtection","","classes/ActionController/RequestForgeryProtection.html","","<p>Controller actions are protected from Cross-Site Request Forgery (CSRF)\nattacks by including a token …\n"],["ActionController::RequestForgeryProtection::ClassMethods","","classes/ActionController/RequestForgeryProtection/ClassMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods","","classes/ActionController/RequestForgeryProtection/ProtectionMethods.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::Exception","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html","",""],["ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html","",""],["ActionController::Rescue","","classes/ActionController/Rescue.html","","<p>This module is responsible to provide `rescue_from` helpers to controllers\nand configure when detailed …\n"],["ActionController::Responder","","classes/ActionController/Responder.html","","<p>Responsible for exposing a resource to different mime requests, usually\ndepending on the HTTP verb.  …\n"],["ActionController::Streaming","","classes/ActionController/Streaming.html","","<p>Allows views to be streamed back to the client as they are rendered.\n<p>The default way Rails renders views …\n"],["ActionController::StrongParameters","","classes/ActionController/StrongParameters.html","","<p>Strong Parameters\n<p>It provides an interface for protecting attributes from end-user\nassignment. This makes …\n"],["ActionController::TemplateAssertions","","classes/ActionController/TemplateAssertions.html","",""],["ActionController::TestCase","","classes/ActionController/TestCase.html","","<p>Superclass for ActionController functional tests. Functional tests allow\nyou to test a single controller …\n"],["ActionController::TestCase::Behavior","","classes/ActionController/TestCase/Behavior.html","",""],["ActionController::TestCase::Behavior::ClassMethods","","classes/ActionController/TestCase/Behavior/ClassMethods.html","",""],["ActionController::TestCase::RaiseActionExceptions","","classes/ActionController/TestCase/RaiseActionExceptions.html","","<p>When the request.remote_addr remains the default for testing, which is\n0.0.0.0, the exception is simply …\n"],["ActionController::TestResponse","","classes/ActionController/TestResponse.html","",""],["ActionController::Testing","","classes/ActionController/Testing.html","",""],["ActionController::Testing::ClassMethods","","classes/ActionController/Testing/ClassMethods.html","",""],["ActionController::UnpermittedParameters","","classes/ActionController/UnpermittedParameters.html","","<p>Raised when a supplied parameter is not expected.\n\n<pre>params = ActionController::Parameters.new(a: &quot;123&quot;, ...</pre>\n"],["ActionController::UrlFor","","classes/ActionController/UrlFor.html","","<p>Includes <code>url_for</code> into the host class. The class has to provide\na <code>RouteSet</code> by implementing the <code>_routes</code> …\n"],["ActionDispatch","","classes/ActionDispatch.html","",""],["ActionDispatch::Assertions","","classes/ActionDispatch/Assertions.html","",""],["ActionDispatch::Assertions::DomAssertions","","classes/ActionDispatch/Assertions/DomAssertions.html","",""],["ActionDispatch::Assertions::ResponseAssertions","","classes/ActionDispatch/Assertions/ResponseAssertions.html","","<p>A small suite of assertions that test responses from Rails applications.\n"],["ActionDispatch::Assertions::RoutingAssertions","","classes/ActionDispatch/Assertions/RoutingAssertions.html","","<p>Suite of assertions to test routes generated by Rails and the handling of\nrequests made to them.\n"],["ActionDispatch::Assertions::SelectorAssertions","","classes/ActionDispatch/Assertions/SelectorAssertions.html","","<p>Adds the <code>assert_select</code> method for use in Rails functional test\ncases, which can be used to make assertions …\n"],["ActionDispatch::Assertions::TagAssertions","","classes/ActionDispatch/Assertions/TagAssertions.html","","<p>Pair of assertions to testing elements in the HTML output of the response.\n"],["ActionDispatch::Callbacks","","classes/ActionDispatch/Callbacks.html","","<p>Provide callbacks to be executed before and after the request dispatch.\n"],["ActionDispatch::Cookies","","classes/ActionDispatch/Cookies.html","","<p>Cookies are read and written through ActionController#cookies.\n<p>The cookies being read are the ones received …\n"],["ActionDispatch::Cookies::ChainedCookieJars","","classes/ActionDispatch/Cookies/ChainedCookieJars.html","","<p>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed\n"],["ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","","classes/ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html","",""],["ActionDispatch::DebugExceptions","","classes/ActionDispatch/DebugExceptions.html","","<p>This middleware is responsible for logging exceptions and showing a\ndebugging page in case the request …\n"],["ActionDispatch::ExceptionWrapper","","classes/ActionDispatch/ExceptionWrapper.html","",""],["ActionDispatch::FileHandler","","classes/ActionDispatch/FileHandler.html","",""],["ActionDispatch::Flash","","classes/ActionDispatch/Flash.html","","<p>The flash provides a way to pass temporary objects between actions.\nAnything you place in the flash will …\n"],["ActionDispatch::Flash::FlashHash","","classes/ActionDispatch/Flash/FlashHash.html","",""],["ActionDispatch::Http","","classes/ActionDispatch/Http.html","",""],["ActionDispatch::Http::Cache","","classes/ActionDispatch/Http/Cache.html","",""],["ActionDispatch::Http::Cache::Request","","classes/ActionDispatch/Http/Cache/Request.html","",""],["ActionDispatch::Http::Cache::Response","","classes/ActionDispatch/Http/Cache/Response.html","",""],["ActionDispatch::Http::FilterParameters","","classes/ActionDispatch/Http/FilterParameters.html","","<p>Allows you to specify sensitive parameters which will be replaced from the\nrequest log by looking in …\n"],["ActionDispatch::Http::FilterRedirect","","classes/ActionDispatch/Http/FilterRedirect.html","",""],["ActionDispatch::Http::Headers","","classes/ActionDispatch/Http/Headers.html","",""],["ActionDispatch::Http::MimeNegotiation","","classes/ActionDispatch/Http/MimeNegotiation.html","",""],["ActionDispatch::Http::ParameterFilter","","classes/ActionDispatch/Http/ParameterFilter.html","",""],["ActionDispatch::Http::Parameters","","classes/ActionDispatch/Http/Parameters.html","",""],["ActionDispatch::Http::URL","","classes/ActionDispatch/Http/URL.html","",""],["ActionDispatch::Http::UploadedFile","","classes/ActionDispatch/Http/UploadedFile.html","","<p>Models uploaded files.\n<p>The actual file is accessible via the <code>tempfile</code> accessor,\nthough some of its interface …\n"],["ActionDispatch::Integration","","classes/ActionDispatch/Integration.html","",""],["ActionDispatch::Integration::RequestHelpers","","classes/ActionDispatch/Integration/RequestHelpers.html","",""],["ActionDispatch::Integration::Runner","","classes/ActionDispatch/Integration/Runner.html","",""],["ActionDispatch::Integration::Session","","classes/ActionDispatch/Integration/Session.html","","<p>An instance of this class represents a set of requests and responses\nperformed sequentially by a test …\n"],["ActionDispatch::IntegrationTest","","classes/ActionDispatch/IntegrationTest.html","","<p>An integration test spans multiple controllers and actions, tying them all\ntogether to ensure they work …\n"],["ActionDispatch::MiddlewareStack","","classes/ActionDispatch/MiddlewareStack.html","",""],["ActionDispatch::MiddlewareStack::Middleware","","classes/ActionDispatch/MiddlewareStack/Middleware.html","",""],["ActionDispatch::ParamsParser","","classes/ActionDispatch/ParamsParser.html","",""],["ActionDispatch::ParamsParser::ParseError","","classes/ActionDispatch/ParamsParser/ParseError.html","",""],["ActionDispatch::PublicExceptions","","classes/ActionDispatch/PublicExceptions.html","",""],["ActionDispatch::RailsEntityStore","","classes/ActionDispatch/RailsEntityStore.html","",""],["ActionDispatch::RailsMetaStore","","classes/ActionDispatch/RailsMetaStore.html","",""],["ActionDispatch::Reloader","","classes/ActionDispatch/Reloader.html","","<p>ActionDispatch::Reloader provides prepare and cleanup callbacks, intended\nto assist with code reloading …\n"],["ActionDispatch::RemoteIp","","classes/ActionDispatch/RemoteIp.html","","<p>This middleware calculates the IP address of the remote client that is\nmaking the request. It does this …\n"],["ActionDispatch::RemoteIp::GetIp","","classes/ActionDispatch/RemoteIp/GetIp.html","","<p>The GetIp class exists as a way to defer processing of the request data\ninto an actual IP address. If …\n"],["ActionDispatch::RemoteIp::IpSpoofAttackError","","classes/ActionDispatch/RemoteIp/IpSpoofAttackError.html","",""],["ActionDispatch::Request","","classes/ActionDispatch/Request.html","",""],["ActionDispatch::RequestId","","classes/ActionDispatch/RequestId.html","","<p>Makes a unique request id available to the action_dispatch.request_id env\nvariable (which is then accessible …\n"],["ActionDispatch::Response","","classes/ActionDispatch/Response.html","","<p>Represents an HTTP response generated by a controller action. Use it to\nretrieve the current state of …\n"],["ActionDispatch::Routing","","classes/ActionDispatch/Routing.html","","<p>The routing module provides URL rewriting in native Ruby. It&#39;s a way to\nredirect incoming requests …\n"],["ActionDispatch::Routing::ConsoleFormatter","","classes/ActionDispatch/Routing/ConsoleFormatter.html","",""],["ActionDispatch::Routing::HtmlTableFormatter","","classes/ActionDispatch/Routing/HtmlTableFormatter.html","",""],["ActionDispatch::Routing::Mapper","","classes/ActionDispatch/Routing/Mapper.html","",""],["ActionDispatch::Routing::Mapper::Base","","classes/ActionDispatch/Routing/Mapper/Base.html","",""],["ActionDispatch::Routing::Mapper::Concerns","","classes/ActionDispatch/Routing/Mapper/Concerns.html","","<p>Routing Concerns allow you to declare common routes that can be reused\ninside others resources and routes. …\n"],["ActionDispatch::Routing::Mapper::HttpHelpers","","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html","",""],["ActionDispatch::Routing::Mapper::Resources","","classes/ActionDispatch/Routing/Mapper/Resources.html","","<p>Resource routing allows you to quickly declare all of the common routes for\na given resourceful controller. …\n"],["ActionDispatch::Routing::Mapper::Scoping","","classes/ActionDispatch/Routing/Mapper/Scoping.html","","<p>You may wish to organize groups of controllers under a namespace. Most\ncommonly, you might group a number …\n"],["ActionDispatch::Routing::PathRedirect","","classes/ActionDispatch/Routing/PathRedirect.html","",""],["ActionDispatch::Routing::PolymorphicRoutes","","classes/ActionDispatch/Routing/PolymorphicRoutes.html","","<p>Polymorphic URL helpers are methods for smart resolution to a named route\ncall when given an Active  …\n"],["ActionDispatch::Routing::Redirection","","classes/ActionDispatch/Routing/Redirection.html","",""],["ActionDispatch::Routing::RouteWrapper","","classes/ActionDispatch/Routing/RouteWrapper.html","",""],["ActionDispatch::Routing::UrlFor","","classes/ActionDispatch/Routing/UrlFor.html","","<p>In <code>config/routes.rb</code> you define URL-to-controller mappings, but\nthe reverse is also possible: an URL can …\n"],["ActionDispatch::SSL","","classes/ActionDispatch/SSL.html","",""],["ActionDispatch::Session","","classes/ActionDispatch/Session.html","",""],["ActionDispatch::Session::AbstractStore","","classes/ActionDispatch/Session/AbstractStore.html","",""],["ActionDispatch::Session::CacheStore","","classes/ActionDispatch/Session/CacheStore.html","","<p>Session store that uses an ActiveSupport::Cache::Store to store the\nsessions. This store is most useful …\n"],["ActionDispatch::Session::Compatibility","","classes/ActionDispatch/Session/Compatibility.html","",""],["ActionDispatch::Session::CookieStore","","classes/ActionDispatch/Session/CookieStore.html","","<p>This cookie-based session store is the Rails default. It is dramatically\nfaster than the alternatives. …\n"],["ActionDispatch::Session::MemCacheStore","","classes/ActionDispatch/Session/MemCacheStore.html","",""],["ActionDispatch::Session::StaleSessionCheck","","classes/ActionDispatch/Session/StaleSessionCheck.html","",""],["ActionDispatch::ShowExceptions","","classes/ActionDispatch/ShowExceptions.html","","<p>This middleware rescues any exception returned by the application and calls\nan exceptions app that will …\n"],["ActionDispatch::Static","","classes/ActionDispatch/Static.html","",""],["ActionDispatch::TestProcess","","classes/ActionDispatch/TestProcess.html","",""],["ActionDispatch::TestRequest","","classes/ActionDispatch/TestRequest.html","",""],["ActionDispatch::TestResponse","","classes/ActionDispatch/TestResponse.html","","<p>Integration test methods such as ActionDispatch::Integration::Session#get\nand ActionDispatch::Integration::Session#post …\n"],["ActionMailer","","classes/ActionMailer.html","",""],["ActionMailer::Base","","classes/ActionMailer/Base.html","","<p>Action Mailer allows you to send email from your application using a mailer\nmodel and views.\n<p>Mailer Models …\n"],["ActionMailer::Collector","","classes/ActionMailer/Collector.html","",""],["ActionMailer::DeliveryMethods","","classes/ActionMailer/DeliveryMethods.html","","<p>This module handles everything related to mail delivery, from registering\nnew delivery methods to configuring …\n"],["ActionMailer::DeliveryMethods::ClassMethods","","classes/ActionMailer/DeliveryMethods/ClassMethods.html","",""],["ActionMailer::LogSubscriber","","classes/ActionMailer/LogSubscriber.html","",""],["ActionMailer::MailHelper","","classes/ActionMailer/MailHelper.html","",""],["ActionMailer::NonInferrableMailerError","","classes/ActionMailer/NonInferrableMailerError.html","",""],["ActionMailer::TestCase","","classes/ActionMailer/TestCase.html","",""],["ActionMailer::TestCase::Behavior","","classes/ActionMailer/TestCase/Behavior.html","",""],["ActionMailer::TestCase::Behavior::ClassMethods","","classes/ActionMailer/TestCase/Behavior/ClassMethods.html","",""],["ActionMailer::TestHelper","","classes/ActionMailer/TestHelper.html","",""],["ActionView","","classes/ActionView.html","",""],["ActionView::Base","","classes/ActionView/Base.html","","<p>Action View Base\n<p>Action View templates can be written in several ways. If the template file\nhas a <code>.erb</code> …\n"],["ActionView::Context","","classes/ActionView/Context.html","","<p>Action View Context\n<p>Action View contexts are supplied to Action Controller to render a\ntemplate. The default …\n"],["ActionView::DependencyTracker","","classes/ActionView/DependencyTracker.html","",""],["ActionView::DependencyTracker::ERBTracker","","classes/ActionView/DependencyTracker/ERBTracker.html","",""],["ActionView::Digestor","","classes/ActionView/Digestor.html","",""],["ActionView::FileSystemResolver","","classes/ActionView/FileSystemResolver.html","","<p>A resolver that loads files from the filesystem. It allows setting your own\nresolving pattern. Such pattern …\n"],["ActionView::FixtureResolver","","classes/ActionView/FixtureResolver.html","","<p>Use FixtureResolver in your tests to simulate the presence of files on the\nfile system. This is used …\n"],["ActionView::Helpers","","classes/ActionView/Helpers.html","","<p>Active Model Helpers\n<p>Action View Asset URL Helpers\n<p>Action View Atom Feed Helpers\n"],["ActionView::Helpers::ActiveModelHelper","","classes/ActionView/Helpers/ActiveModelHelper.html","",""],["ActionView::Helpers::ActiveModelInstanceTag","","classes/ActionView/Helpers/ActiveModelInstanceTag.html","",""],["ActionView::Helpers::AssetTagHelper","","classes/ActionView/Helpers/AssetTagHelper.html","","<p>This module provides methods for generating HTML that links views to assets\nsuch as images, javascripts, …\n"],["ActionView::Helpers::AssetUrlHelper","","classes/ActionView/Helpers/AssetUrlHelper.html","","<p>This module provides methods for generating asset paths and urls.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">image_path</span>(<span class=\"ruby-string\">&quot;rails.png&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &quot;/assets/rails.png&quot; ...</span>\n</pre>\n"],["ActionView::Helpers::AtomFeedHelper","","classes/ActionView/Helpers/AtomFeedHelper.html","",""],["ActionView::Helpers::CacheHelper","","classes/ActionView/Helpers/CacheHelper.html","",""],["ActionView::Helpers::CaptureHelper","","classes/ActionView/Helpers/CaptureHelper.html","","<p>CaptureHelper exposes methods to let you extract generated markup which can\nbe used in other parts of …\n"],["ActionView::Helpers::CsrfHelper","","classes/ActionView/Helpers/CsrfHelper.html","",""],["ActionView::Helpers::DateHelper","","classes/ActionView/Helpers/DateHelper.html","","<p>Action View Date Helpers\n<p>The Date Helper primarily creates select/option tags for different kinds of\ndates …\n"],["ActionView::Helpers::DebugHelper","","classes/ActionView/Helpers/DebugHelper.html","",""],["ActionView::Helpers::FormBuilder","","classes/ActionView/Helpers/FormBuilder.html","","<p>A <code>FormBuilder</code> object is associated with a particular model\nobject and allows you to generate fields associated …\n"],["ActionView::Helpers::FormHelper","","classes/ActionView/Helpers/FormHelper.html","","<p>Form helpers are designed to make working with resources much easier\ncompared to using vanilla HTML. …\n"],["ActionView::Helpers::FormOptionsHelper","","classes/ActionView/Helpers/FormOptionsHelper.html","","<p>Provides a number of methods for turning different kinds of containers into\na set of option tags.\n<p>The …\n"],["ActionView::Helpers::FormTagHelper","","classes/ActionView/Helpers/FormTagHelper.html","","<p>Provides a number of methods for creating form tags that don&#39;t rely on\nan Active Record object assigned …\n"],["ActionView::Helpers::JavaScriptHelper","","classes/ActionView/Helpers/JavaScriptHelper.html","",""],["ActionView::Helpers::NumberHelper","","classes/ActionView/Helpers/NumberHelper.html","","<p>Provides methods for converting numbers into formatted strings. Methods are\nprovided for phone numbers, …\n"],["ActionView::Helpers::NumberHelper::InvalidNumberError","","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html","","<p>Raised when argument <code>number</code> param given to the helpers is\ninvalid and the option :raise is set to  <code>true</code> …\n"],["ActionView::Helpers::OutputSafetyHelper","","classes/ActionView/Helpers/OutputSafetyHelper.html","",""],["ActionView::Helpers::RecordTagHelper","","classes/ActionView/Helpers/RecordTagHelper.html","",""],["ActionView::Helpers::RenderingHelper","","classes/ActionView/Helpers/RenderingHelper.html","","<p>Action View Rendering\n<p>Implements methods that allow rendering from a view context. In order to\nuse this …\n"],["ActionView::Helpers::SanitizeHelper","","classes/ActionView/Helpers/SanitizeHelper.html","","<p>The SanitizeHelper module provides a set of methods for scrubbing text of\nundesired HTML elements. These …\n"],["ActionView::Helpers::TagHelper","","classes/ActionView/Helpers/TagHelper.html","","<p>Provides methods to generate HTML tags programmatically when you can&#39;t\nuse a Builder. By default, …\n"],["ActionView::Helpers::TextHelper","","classes/ActionView/Helpers/TextHelper.html","","<p>The TextHelper module provides a set of methods for filtering, formatting\nand transforming strings, which …\n"],["ActionView::Helpers::TranslationHelper","","classes/ActionView/Helpers/TranslationHelper.html","",""],["ActionView::Helpers::UrlHelper","","classes/ActionView/Helpers/UrlHelper.html","","<p>Provides a set of methods for making links and getting URLs that depend on\nthe routing subsystem (see …\n"],["ActionView::Helpers::UrlHelper::ClassMethods","","classes/ActionView/Helpers/UrlHelper/ClassMethods.html","",""],["ActionView::LogSubscriber","","classes/ActionView/LogSubscriber.html","","<p>Action View Log Subscriber\n<p>Provides functionality so that Rails can output logs from Action View.\n"],["ActionView::LookupContext","","classes/ActionView/LookupContext.html","",""],["ActionView::LookupContext::DetailsCache","","classes/ActionView/LookupContext/DetailsCache.html","","<p>Add caching behavior on top of Details.\n"],["ActionView::LookupContext::ViewPaths","","classes/ActionView/LookupContext/ViewPaths.html","","<p>Helpers related to template lookup using the lookup context information.\n"],["ActionView::ModelNaming","","classes/ActionView/ModelNaming.html","",""],["ActionView::NullResolver","","classes/ActionView/NullResolver.html","",""],["ActionView::PartialRenderer","","classes/ActionView/PartialRenderer.html","","<p>Action View Partials\n<p>There&#39;s also a convenience method for rendering sub templates within\nthe current …\n"],["ActionView::RecordIdentifier","","classes/ActionView/RecordIdentifier.html","","<p>The record identifier encapsulates a number of naming conventions for\ndealing with records, like Active …\n"],["ActionView::Renderer","","classes/ActionView/Renderer.html","","<p>This is the main entry point for rendering. It basically delegates to other\nobjects like TemplateRenderer …\n"],["ActionView::Resolver","","classes/ActionView/Resolver.html","","<p>Action View Resolver\n"],["ActionView::Resolver::Cache","","classes/ActionView/Resolver/Cache.html","",""],["ActionView::Resolver::Cache::SmallCache","","classes/ActionView/Resolver/Cache/SmallCache.html","",""],["ActionView::Resolver::Path","","classes/ActionView/Resolver/Path.html","","<p>Keeps all information about view path and builds virtual path.\n"],["ActionView::RoutingUrlFor","","classes/ActionView/RoutingUrlFor.html","",""],["ActionView::Template","","classes/ActionView/Template.html","","<p>Action View Template\n<p>Action View Template Handlers\n<p>Action View Text Template\n"],["ActionView::Template::Handlers","","classes/ActionView/Template/Handlers.html","",""],["ActionView::Template::Handlers::Builder","","classes/ActionView/Template/Handlers/Builder.html","",""],["ActionView::Template::Handlers::ERB","","classes/ActionView/Template/Handlers/ERB.html","",""],["ActionView::Template::Handlers::Erubis","","classes/ActionView/Template/Handlers/Erubis.html","",""],["ActionView::Template::Handlers::Raw","","classes/ActionView/Template/Handlers/Raw.html","",""],["ActionView::Template::Types","","classes/ActionView/Template/Types.html","",""],["ActionView::Template::Types::Type","","classes/ActionView/Template/Types/Type.html","",""],["ActionView::TestCase","","classes/ActionView/TestCase.html","","<p>Action View Test Case\n"],["ActionView::TestCase::Behavior","","classes/ActionView/TestCase/Behavior.html","",""],["ActionView::TestCase::Behavior::ClassMethods","","classes/ActionView/TestCase/Behavior/ClassMethods.html","",""],["ActionView::TestCase::Behavior::Locals","","classes/ActionView/TestCase/Behavior/Locals.html","",""],["ActionView::TestCase::Behavior::RenderedViewsCollection","","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html","",""],["ActionView::TestCase::TestController","","classes/ActionView/TestCase/TestController.html","",""],["ActiveModel","","classes/ActiveModel.html","",""],["ActiveModel::AttributeMethods","","classes/ActiveModel/AttributeMethods.html","","<p>Active Model Attribute Methods\n<p><code>ActiveModel::AttributeMethods</code> provides a way to add prefixes\nand suffixes …\n"],["ActiveModel::AttributeMethods::ClassMethods","","classes/ActiveModel/AttributeMethods/ClassMethods.html","",""],["ActiveModel::Callbacks","","classes/ActiveModel/Callbacks.html","","<p>Active Model Callbacks\n<p>Provides an interface for any class to have Active Record like callbacks.\n<p>Like the …\n"],["ActiveModel::Conversion","","classes/ActiveModel/Conversion.html","","<p>Active Model Conversion\n<p>Handles default conversions: to_model, to_key, to_param, and\nto_partial_path. …\n"],["ActiveModel::Dirty","","classes/ActiveModel/Dirty.html","","<p>Active Model Dirty\n<p>Provides a way to track changes in your object in the same way as Active\nRecord does. …\n"],["ActiveModel::Errors","","classes/ActiveModel/Errors.html","","<p>Active Model Errors\n<p>Provides a modified <code>Hash</code> that you can include in your object\nfor handling error messages …\n"],["ActiveModel::ForbiddenAttributesError","","classes/ActiveModel/ForbiddenAttributesError.html","","<p>Raised when forbidden attributes are used for mass assignment.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n<span class=\"ruby-keyword\">end</span>\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveModel::Lint","","classes/ActiveModel/Lint.html","",""],["ActiveModel::Lint::Tests","","classes/ActiveModel/Lint/Tests.html","","<p>Active Model Lint Tests\n<p>You can test whether an object is compliant with the Active Model API by\nincluding …\n"],["ActiveModel::MissingAttributeError","","classes/ActiveModel/MissingAttributeError.html","","<p>Raised when an attribute is not defined.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">user</span> = <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveModel::Model","","classes/ActiveModel/Model.html","","<p>Active Model Basic Model\n<p>Includes the required interface for an object to interact with\n<code>ActionPack</code>, using …\n"],["ActiveModel::Name","","classes/ActiveModel/Name.html","",""],["ActiveModel::Naming","","classes/ActiveModel/Naming.html","","<p>Active Model Naming\n<p>Creates a <code>model_name</code> method on your object.\n<p>To implement, just extend ActiveModel::Naming …\n"],["ActiveModel::SecurePassword","","classes/ActiveModel/SecurePassword.html","",""],["ActiveModel::SecurePassword::ClassMethods","","classes/ActiveModel/SecurePassword/ClassMethods.html","",""],["ActiveModel::SecurePassword::ClassMethods::InstanceMethodsOnActivation","","classes/ActiveModel/SecurePassword/ClassMethods/InstanceMethodsOnActivation.html","",""],["ActiveModel::Serialization","","classes/ActiveModel/Serialization.html","","<p>Active Model Serialization\n<p>Provides a basic serialization to a serializable_hash for your object.\n<p>A minimal …\n"],["ActiveModel::Serializers","","classes/ActiveModel/Serializers.html","",""],["ActiveModel::Serializers::JSON","","classes/ActiveModel/Serializers/JSON.html","","<p>Active Model JSON Serializer\n"],["ActiveModel::Serializers::Xml","","classes/ActiveModel/Serializers/Xml.html","","<p>Active Model XML Serializer\n"],["ActiveModel::StrictValidationFailed","","classes/ActiveModel/StrictValidationFailed.html","","<p>Raised when a validation cannot be corrected by end users and are\nconsidered exceptional.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveModel::Translation","","classes/ActiveModel/Translation.html","","<p>Active Model Translation\n<p>Provides integration between your object and the Rails internationalization\n(i18n) …\n"],["ActiveModel::Validations","","classes/ActiveModel/Validations.html","","<p>Active Model Validations\n<p>Provides a full validation framework to your objects.\n<p>A minimal implementation …\n"],["ActiveModel::Validations::Callbacks","","classes/ActiveModel/Validations/Callbacks.html","","<p>Active Model Validation Callbacks\n<p>Provides an interface for any class to have <code>before_validation</code>\nand <code>after_validation</code> …\n"],["ActiveModel::Validations::Callbacks::ClassMethods","","classes/ActiveModel/Validations/Callbacks/ClassMethods.html","",""],["ActiveModel::Validations::ClassMethods","","classes/ActiveModel/Validations/ClassMethods.html","",""],["ActiveModel::Validations::HelperMethods","","classes/ActiveModel/Validations/HelperMethods.html","",""],["ActiveModel::Validator","","classes/ActiveModel/Validator.html","","<p>Active Model Validator\n<p>A simple base class that can be used along with\nActiveModel::Validations::ClassMethods.validates_with …\n"],["ActiveRecord","","classes/ActiveRecord.html","",""],["ActiveRecord::ActiveRecordError","","classes/ActiveRecord/ActiveRecordError.html","","<p>Active Record Errors\n<p>Generic Active Record exception class.\n"],["ActiveRecord::AdapterNotFound","","classes/ActiveRecord/AdapterNotFound.html","","<p>Raised when Active Record cannot find database adapter specified in\n<code>config/database.yml</code> or programmatically. …\n"],["ActiveRecord::AdapterNotSpecified","","classes/ActiveRecord/AdapterNotSpecified.html","","<p>Raised when adapter not specified on connection (or configuration file\n<code>config/database.yml</code> misses adapter …\n"],["ActiveRecord::Aggregations","","classes/ActiveRecord/Aggregations.html","",""],["ActiveRecord::Aggregations::ClassMethods","","classes/ActiveRecord/Aggregations/ClassMethods.html","","<p>Active Record implements aggregation through a macro-like class method\ncalled <code>composed_of</code> for representing …\n"],["ActiveRecord::AssociationTypeMismatch","","classes/ActiveRecord/AssociationTypeMismatch.html","","<p>Raised when an object assigned to an association has an incorrect type.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Ticket</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Associations","","classes/ActiveRecord/Associations.html","","<p>Active Record Belongs To Association\n<p>Active Record Belongs To Polymorphic Association\n<p>Active Record Has …\n"],["ActiveRecord::Associations::ClassMethods","","classes/ActiveRecord/Associations/ClassMethods.html","","<p>Associations are a set of macro-like class methods for tying objects\ntogether through foreign keys.  …\n"],["ActiveRecord::Associations::CollectionProxy","","classes/ActiveRecord/Associations/CollectionProxy.html","","<p>Association proxies in Active Record are middlemen between the object that\nholds the association, known …\n"],["ActiveRecord::AttributeAssignment","","classes/ActiveRecord/AttributeAssignment.html","",""],["ActiveRecord::AttributeAssignmentError","","classes/ActiveRecord/AttributeAssignmentError.html","","<p>Raised when an error occurred while doing a mass assignment to an attribute\nthrough the <code>attributes=</code> method. …\n"],["ActiveRecord::AttributeMethods","","classes/ActiveRecord/AttributeMethods.html","","<p>Active Record Attribute Methods\n"],["ActiveRecord::AttributeMethods::BeforeTypeCast","","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html","","<p>Active Record Attribute Methods Before Type Cast\n<p><code>ActiveRecord::AttributeMethods::BeforeTypeCast</code> provides …\n"],["ActiveRecord::AttributeMethods::ClassMethods","","classes/ActiveRecord/AttributeMethods/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey","","classes/ActiveRecord/AttributeMethods/PrimaryKey.html","",""],["ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Query","","classes/ActiveRecord/AttributeMethods/Query.html","",""],["ActiveRecord::AttributeMethods::Read","","classes/ActiveRecord/AttributeMethods/Read.html","",""],["ActiveRecord::AttributeMethods::Read::ClassMethods","","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Serialization","","classes/ActiveRecord/AttributeMethods/Serialization.html","",""],["ActiveRecord::AttributeMethods::Serialization::ClassMethods","","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion.html","",""],["ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html","",""],["ActiveRecord::AttributeMethods::Write","","classes/ActiveRecord/AttributeMethods/Write.html","",""],["ActiveRecord::AttributeMethods::Write::ClassMethods","","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html","",""],["ActiveRecord::AutosaveAssociation","","classes/ActiveRecord/AutosaveAssociation.html","","<p>Active Record Autosave Association\n<p><code>AutosaveAssociation</code> is a module that takes care of\nautomatically saving …\n"],["ActiveRecord::AutosaveAssociation::ClassMethods","","classes/ActiveRecord/AutosaveAssociation/ClassMethods.html","",""],["ActiveRecord::Base","","classes/ActiveRecord/Base.html","","<p>Active Record\n<p>Active Record objects don&#39;t specify their attributes directly, but\nrather infer them …\n"],["ActiveRecord::Batches","","classes/ActiveRecord/Batches.html","",""],["ActiveRecord::Calculations","","classes/ActiveRecord/Calculations.html","",""],["ActiveRecord::Callbacks","","classes/ActiveRecord/Callbacks.html","","<p>Active Record Callbacks\n<p>Callbacks are hooks into the life cycle of an Active Record object that\nallow …\n"],["ActiveRecord::Callbacks::ClassMethods","","classes/ActiveRecord/Callbacks/ClassMethods.html","",""],["ActiveRecord::ConfigurationError","","classes/ActiveRecord/ConfigurationError.html","","<p>Raised when association is being configured improperly or user tries to use\noffset and limit together …\n"],["ActiveRecord::ConnectionAdapters","","classes/ActiveRecord/ConnectionAdapters.html","",""],["ActiveRecord::ConnectionAdapters::AbstractAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html","","<p>Active Record supports multiple database systems. AbstractAdapter and\nrelated classes form the abstraction …\n"],["ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html","",""],["ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::Column","","classes/ActiveRecord/ConnectionAdapters/Column.html","",""],["ActiveRecord::ConnectionAdapters::Column::Format","","classes/ActiveRecord/ConnectionAdapters/Column/Format.html","",""],["ActiveRecord::ConnectionAdapters::ColumnDumper","","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html","","<p>The goal of this module is to move Adapter specific column definitions to\nthe Adapter instead of having …\n"],["ActiveRecord::ConnectionAdapters::ConnectionHandler","","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html","","<p>ConnectionHandler is a collection of ConnectionPool objects. It is used for\nkeeping separate connection …\n"],["ActiveRecord::ConnectionAdapters::ConnectionManagement","","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html","",""],["ActiveRecord::ConnectionAdapters::ConnectionPool","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html","","<p>Connection pool base class for managing Active Record database connections.\n<p>Introduction\n<p>A connection pool …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html","","<p>Threadsafe, fair, FIFO queue.  Meant to be used by ConnectionPool with\nwhich it shares a Monitor.  But …\n"],["ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html","","<p>Every <code>frequency</code> seconds, the reaper will call\n<code>reap</code> on <code>pool</code>. A reaper instantiated with a nil\nfrequency …\n"],["ActiveRecord::ConnectionAdapters::DatabaseLimits","","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html","",""],["ActiveRecord::ConnectionAdapters::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::Mysql2Adapter","","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html","","<p>The MySQL adapter will work with both Ruby/MySQL, which is a Ruby-based\nMySQL adapter that comes bundled …\n"],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html","",""],["ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html","","<p>The PostgreSQL adapter works with the native C (bitbucket.org/ged/ruby-pg)\ndriver.\n<p>Options:\n<p><code>:host</code> - Defaults …\n"],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ReferentialIntegrity","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ReferentialIntegrity.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaCreation","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaCreation.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Table","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Table.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::ArrayParser","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/ArrayParser.html","",""],["ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html","",""],["ActiveRecord::ConnectionAdapters::QueryCache","","classes/ActiveRecord/ConnectionAdapters/QueryCache.html","",""],["ActiveRecord::ConnectionAdapters::Quoting","","classes/ActiveRecord/ConnectionAdapters/Quoting.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html","","<p>The SQLite3 adapter works SQLite 3.6.16 or newer with the sqlite3-ruby\ndrivers (available as gem from …\n"],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::ExplainPrettyPrinter","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/ExplainPrettyPrinter.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html","",""],["ActiveRecord::ConnectionAdapters::SchemaCache","","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html","",""],["ActiveRecord::ConnectionAdapters::SchemaStatements","","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html","",""],["ActiveRecord::ConnectionAdapters::StatementPool","","classes/ActiveRecord/ConnectionAdapters/StatementPool.html","",""],["ActiveRecord::ConnectionAdapters::Table","","classes/ActiveRecord/ConnectionAdapters/Table.html","","<p>Represents an SQL table in an abstract way for updating a table. Also see\nTableDefinition and SchemaStatements#create_table …\n"],["ActiveRecord::ConnectionAdapters::TableDefinition","","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html","","<p>Represents the schema of an SQL table in an abstract way. This class\nprovides methods for manipulating …\n"],["ActiveRecord::ConnectionAdapters::TransactionState","","classes/ActiveRecord/ConnectionAdapters/TransactionState.html","",""],["ActiveRecord::ConnectionHandling","","classes/ActiveRecord/ConnectionHandling.html","",""],["ActiveRecord::ConnectionNotEstablished","","classes/ActiveRecord/ConnectionNotEstablished.html","","<p>Raised when connection to the database could not been established (for\nexample when <code>connection=</code> is given …\n"],["ActiveRecord::ConnectionTimeoutError","","classes/ActiveRecord/ConnectionTimeoutError.html","","<p>Raised when a connection could not be obtained within the connection\nacquisition timeout period: because …\n"],["ActiveRecord::Core","","classes/ActiveRecord/Core.html","",""],["ActiveRecord::Core::ClassMethods","","classes/ActiveRecord/Core/ClassMethods.html","",""],["ActiveRecord::CounterCache","","classes/ActiveRecord/CounterCache.html","","<p>Active Record Counter Cache\n"],["ActiveRecord::CounterCache::ClassMethods","","classes/ActiveRecord/CounterCache/ClassMethods.html","",""],["ActiveRecord::DangerousAttributeError","","classes/ActiveRecord/DangerousAttributeError.html","","<p>Raised when attribute has a name reserved by Active Record (when attribute\nhas name of one of Active …\n"],["ActiveRecord::DynamicMatchers","","classes/ActiveRecord/DynamicMatchers.html","",""],["ActiveRecord::DynamicMatchers::FindBy","","classes/ActiveRecord/DynamicMatchers/FindBy.html","",""],["ActiveRecord::DynamicMatchers::FindByBang","","classes/ActiveRecord/DynamicMatchers/FindByBang.html","",""],["ActiveRecord::DynamicMatchers::Finder","","classes/ActiveRecord/DynamicMatchers/Finder.html","",""],["ActiveRecord::DynamicMatchers::Method","","classes/ActiveRecord/DynamicMatchers/Method.html","",""],["ActiveRecord::Explain","","classes/ActiveRecord/Explain.html","",""],["ActiveRecord::FinderMethods","","classes/ActiveRecord/FinderMethods.html","",""],["ActiveRecord::FixtureSet","","classes/ActiveRecord/FixtureSet.html","","<p>Fixtures are a way of organizing data that you want to test against; in\nshort, sample data.\n<p>They are stored …\n"],["ActiveRecord::ImmutableRelation","","classes/ActiveRecord/ImmutableRelation.html","","<p>Raised when a relation cannot be mutated because it&#39;s already loaded.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Task</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveRecord::Inheritance","","classes/ActiveRecord/Inheritance.html","",""],["ActiveRecord::Inheritance::ClassMethods","","classes/ActiveRecord/Inheritance/ClassMethods.html","",""],["ActiveRecord::Integration","","classes/ActiveRecord/Integration.html","",""],["ActiveRecord::InvalidForeignKey","","classes/ActiveRecord/InvalidForeignKey.html","","<p>Raised when a record cannot be inserted or updated because it references a\nnon-existent record.\n"],["ActiveRecord::IrreversibleMigration","","classes/ActiveRecord/IrreversibleMigration.html","","<p>Exception that can be raised to stop migrations from going backwards.\n"],["ActiveRecord::Locking","","classes/ActiveRecord/Locking.html","",""],["ActiveRecord::Locking::Optimistic","","classes/ActiveRecord/Locking/Optimistic.html","","<p>What is Optimistic Locking\n<p>Optimistic locking allows multiple users to access the same record for\nedits, …\n"],["ActiveRecord::Locking::Optimistic::ClassMethods","","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html","",""],["ActiveRecord::Locking::Pessimistic","","classes/ActiveRecord/Locking/Pessimistic.html","","<p>Locking::Pessimistic provides support for row-level locking using SELECT …\nFOR UPDATE and other lock …\n"],["ActiveRecord::LogSubscriber","","classes/ActiveRecord/LogSubscriber.html","",""],["ActiveRecord::Migration","","classes/ActiveRecord/Migration.html","","<p>Active Record Migrations\n<p>Migrations can manage the evolution of a schema used by several physical\ndatabases. …\n"],["ActiveRecord::Migration::CheckPending","","classes/ActiveRecord/Migration/CheckPending.html","","<p>This class is used to verify that all migrations have been run before\nloading a web page if config.active_record.migration_error …\n"],["ActiveRecord::Migration::CommandRecorder","","classes/ActiveRecord/Migration/CommandRecorder.html","","<p><code>ActiveRecord::Migration::CommandRecorder</code> records commands done\nduring a migration and knows how to reverse …\n"],["ActiveRecord::Migration::CommandRecorder::StraightReversions","","classes/ActiveRecord/Migration/CommandRecorder/StraightReversions.html","",""],["ActiveRecord::MigrationProxy","","classes/ActiveRecord/MigrationProxy.html","","<p>MigrationProxy is used to defer loading of the actual migration classes\nuntil they are needed\n"],["ActiveRecord::ModelSchema","","classes/ActiveRecord/ModelSchema.html","",""],["ActiveRecord::ModelSchema::ClassMethods","","classes/ActiveRecord/ModelSchema/ClassMethods.html","",""],["ActiveRecord::MultiparameterAssignmentErrors","","classes/ActiveRecord/MultiparameterAssignmentErrors.html","","<p>Raised when there are multiple errors while doing a mass assignment through\nthe <code>attributes</code> method. The …\n"],["ActiveRecord::NestedAttributes","","classes/ActiveRecord/NestedAttributes.html","",""],["ActiveRecord::NestedAttributes::ClassMethods","","classes/ActiveRecord/NestedAttributes/ClassMethods.html","","<p>Active Record Nested Attributes\n<p>Nested attributes allow you to save attributes on associated records\nthrough …\n"],["ActiveRecord::NestedAttributes::TooManyRecords","","classes/ActiveRecord/NestedAttributes/TooManyRecords.html","",""],["ActiveRecord::Persistence","","classes/ActiveRecord/Persistence.html","","<p>Active Record Persistence\n"],["ActiveRecord::Persistence::ClassMethods","","classes/ActiveRecord/Persistence/ClassMethods.html","",""],["ActiveRecord::PreparedStatementInvalid","","classes/ActiveRecord/PreparedStatementInvalid.html","","<p>Raised when number of bind variables in statement given to\n<code>:condition</code> key (for example, when using <code>find</code> …\n"],["ActiveRecord::QueryCache","","classes/ActiveRecord/QueryCache.html","","<p>Active Record Query Cache\n"],["ActiveRecord::QueryCache::ClassMethods","","classes/ActiveRecord/QueryCache/ClassMethods.html","",""],["ActiveRecord::QueryMethods","","classes/ActiveRecord/QueryMethods.html","",""],["ActiveRecord::QueryMethods::WhereChain","","classes/ActiveRecord/QueryMethods/WhereChain.html","","<p>WhereChain objects act as placeholder for queries in which #where does not\nhave any parameter. In this …\n"],["ActiveRecord::Querying","","classes/ActiveRecord/Querying.html","",""],["ActiveRecord::ReadOnlyRecord","","classes/ActiveRecord/ReadOnlyRecord.html","","<p>Raised on attempt to update record that is instantiated as read only.\n"],["ActiveRecord::ReadonlyAttributes","","classes/ActiveRecord/ReadonlyAttributes.html","",""],["ActiveRecord::ReadonlyAttributes::ClassMethods","","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html","",""],["ActiveRecord::RecordInvalid","","classes/ActiveRecord/RecordInvalid.html","","<p>Active Record RecordInvalid\n<p>Raised by <code>save!</code> and <code>create!</code> when the record is\ninvalid. Use the <code>record</code> method …\n"],["ActiveRecord::RecordNotDestroyed","","classes/ActiveRecord/RecordNotDestroyed.html","","<p>Raised by ActiveRecord::Base.destroy! when a call to destroy would return\nfalse.\n"],["ActiveRecord::RecordNotFound","","classes/ActiveRecord/RecordNotFound.html","","<p>Raised when Active Record cannot find record by given id or set of ids.\n"],["ActiveRecord::RecordNotSaved","","classes/ActiveRecord/RecordNotSaved.html","","<p>Raised by ActiveRecord::Base.save! and ActiveRecord::Base.create! methods\nwhen record cannot be saved …\n"],["ActiveRecord::RecordNotUnique","","classes/ActiveRecord/RecordNotUnique.html","","<p>Raised when a record cannot be inserted because it would violate a\nuniqueness constraint.\n"],["ActiveRecord::Reflection","","classes/ActiveRecord/Reflection.html","",""],["ActiveRecord::Reflection::ClassMethods","","classes/ActiveRecord/Reflection/ClassMethods.html","","<p>Reflection enables to interrogate Active Record classes and objects about\ntheir associations and aggregations. …\n"],["ActiveRecord::Reflection::MacroReflection","","classes/ActiveRecord/Reflection/MacroReflection.html","","<p>Base class for AggregateReflection and AssociationReflection. Objects of\nAggregateReflection and AssociationReflection …\n"],["ActiveRecord::Relation","","classes/ActiveRecord/Relation.html","","<p>Active Record Relation\n"],["ActiveRecord::Result","","classes/ActiveRecord/Result.html","","<p>This class encapsulates a Result returned from calling\n<code>exec_query</code> on any database connection adapter. …\n"],["ActiveRecord::Rollback","","classes/ActiveRecord/Rollback.html","","<p>ActiveRecord::Transactions::ClassMethods.transaction uses this exception to\ndistinguish a deliberate …\n"],["ActiveRecord::SQLCounter","","classes/ActiveRecord/SQLCounter.html","",""],["ActiveRecord::Sanitization","","classes/ActiveRecord/Sanitization.html","",""],["ActiveRecord::Sanitization::ClassMethods","","classes/ActiveRecord/Sanitization/ClassMethods.html","",""],["ActiveRecord::Schema","","classes/ActiveRecord/Schema.html","","<p>Active Record Schema\n<p>Allows programmers to programmatically define a schema in a portable DSL.\nThis means …\n"],["ActiveRecord::SchemaMigration","","classes/ActiveRecord/SchemaMigration.html","",""],["ActiveRecord::Scoping","","classes/ActiveRecord/Scoping.html","","<p>Active Record Named Scopes\n"],["ActiveRecord::Scoping::ClassMethods","","classes/ActiveRecord/Scoping/ClassMethods.html","",""],["ActiveRecord::Scoping::Default","","classes/ActiveRecord/Scoping/Default.html","",""],["ActiveRecord::Scoping::Default::ClassMethods","","classes/ActiveRecord/Scoping/Default/ClassMethods.html","",""],["ActiveRecord::Scoping::Named","","classes/ActiveRecord/Scoping/Named.html","",""],["ActiveRecord::Scoping::Named::ClassMethods","","classes/ActiveRecord/Scoping/Named/ClassMethods.html","",""],["ActiveRecord::Serialization","","classes/ActiveRecord/Serialization.html","","<p>Active Record Serialization\n"],["ActiveRecord::SerializationTypeMismatch","","classes/ActiveRecord/SerializationTypeMismatch.html","","<p>Raised when unserialized object&#39;s type mismatches one specified for\nserializable field.\n"],["ActiveRecord::SpawnMethods","","classes/ActiveRecord/SpawnMethods.html","",""],["ActiveRecord::StaleObjectError","","classes/ActiveRecord/StaleObjectError.html","","<p>Raised on attempt to save stale record. Record is stale when it&#39;s being\nsaved in another query after …\n"],["ActiveRecord::StatementCache","","classes/ActiveRecord/StatementCache.html","","<p>Statement cache is used to cache a single statement in order to avoid\ncreating the AST again. Initializing …\n"],["ActiveRecord::StatementInvalid","","classes/ActiveRecord/StatementInvalid.html","","<p>Superclass for all database execution errors.\n<p>Wraps the underlying database error as <code>original_exception</code> …\n"],["ActiveRecord::Store","","classes/ActiveRecord/Store.html","","<p>Store gives you a thin wrapper around serialize for the purpose of storing\nhashes in a single column. …\n"],["ActiveRecord::Store::ClassMethods","","classes/ActiveRecord/Store/ClassMethods.html","",""],["ActiveRecord::Tasks","","classes/ActiveRecord/Tasks.html","",""],["ActiveRecord::Tasks::DatabaseAlreadyExists","","classes/ActiveRecord/Tasks/DatabaseAlreadyExists.html","",""],["ActiveRecord::Tasks::DatabaseNotSupported","","classes/ActiveRecord/Tasks/DatabaseNotSupported.html","",""],["ActiveRecord::Tasks::DatabaseTasks","","classes/ActiveRecord/Tasks/DatabaseTasks.html","","<p><code>ActiveRecord::Tasks::DatabaseTasks</code> is a utility class, which\nencapsulates logic behind common tasks used …\n"],["ActiveRecord::TestFixtures","","classes/ActiveRecord/TestFixtures.html","",""],["ActiveRecord::TestFixtures::ClassMethods","","classes/ActiveRecord/TestFixtures/ClassMethods.html","",""],["ActiveRecord::ThrowResult","","classes/ActiveRecord/ThrowResult.html","","<p>Raised when SQL statement is invalid and the application gets a blank\nresult.\n"],["ActiveRecord::Timestamp","","classes/ActiveRecord/Timestamp.html","","<p>Active Record Timestamp\n<p>Active Record automatically timestamps create and update operations if the\ntable …\n"],["ActiveRecord::TransactionIsolationError","","classes/ActiveRecord/TransactionIsolationError.html","",""],["ActiveRecord::Transactions","","classes/ActiveRecord/Transactions.html","","<p>See ActiveRecord::Transactions::ClassMethods for documentation.\n"],["ActiveRecord::Transactions::ClassMethods","","classes/ActiveRecord/Transactions/ClassMethods.html","","<p>Active Record Transactions\n<p>Transactions are protective blocks where SQL statements are only permanent\n…\n"],["ActiveRecord::Translation","","classes/ActiveRecord/Translation.html","",""],["ActiveRecord::UnknownAttributeError","","classes/ActiveRecord/UnknownAttributeError.html","","<p>Raised when unknown attributes are supplied via mass assignment.\n"],["ActiveRecord::UnknownPrimaryKey","","classes/ActiveRecord/UnknownPrimaryKey.html","","<p>Raised when a primary key is needed, but there is not one specified in the\nschema or model.\n"],["ActiveRecord::Validations","","classes/ActiveRecord/Validations.html","","<p>Active Record Validations\n<p>Active Record includes the majority of its validations from\n<code>ActiveModel::Validations</code> …\n"],["ActiveRecord::Validations::ClassMethods","","classes/ActiveRecord/Validations/ClassMethods.html","",""],["ActiveRecord::WrappedDatabaseException","","classes/ActiveRecord/WrappedDatabaseException.html","","<p>Defunct wrapper class kept for compatibility. <code>StatementInvalid</code>\nwraps the original exception now.\n"],["ActiveSupport","","classes/ActiveSupport.html","",""],["ActiveSupport::Autoload","","classes/ActiveSupport/Autoload.html","","<p>Autoload and eager load conveniences for your library.\n<p>This module allows you to define autoloads based …\n"],["ActiveSupport::BacktraceCleaner","","classes/ActiveSupport/BacktraceCleaner.html","","<p>Backtraces often include many lines that are not relevant for the context\nunder review. This makes it …\n"],["ActiveSupport::Benchmarkable","","classes/ActiveSupport/Benchmarkable.html","",""],["ActiveSupport::BufferedLogger","","classes/ActiveSupport/BufferedLogger.html","",""],["ActiveSupport::Cache","","classes/ActiveSupport/Cache.html","","<p>See ActiveSupport::Cache::Store for documentation.\n"],["ActiveSupport::Cache::FileStore","","classes/ActiveSupport/Cache/FileStore.html","","<p>A cache store implementation which stores everything on the filesystem.\n<p>FileStore implements the Strategy::LocalCache …\n"],["ActiveSupport::Cache::MemCacheStore","","classes/ActiveSupport/Cache/MemCacheStore.html","","<p>A cache store implementation which stores data in Memcached: memcached.org/\n<p>This is currently the most …\n"],["ActiveSupport::Cache::MemoryStore","","classes/ActiveSupport/Cache/MemoryStore.html","","<p>A cache store implementation which stores everything into memory in the\nsame process. If you&#39;re running …\n"],["ActiveSupport::Cache::NullStore","","classes/ActiveSupport/Cache/NullStore.html","","<p>A cache store implementation which doesn&#39;t actually store anything.\nUseful in development and test …\n"],["ActiveSupport::Cache::Store","","classes/ActiveSupport/Cache/Store.html","","<p>An abstract cache store class. There are multiple cache store\nimplementations, each having its own additional …\n"],["ActiveSupport::Cache::Strategy","","classes/ActiveSupport/Cache/Strategy.html","",""],["ActiveSupport::Cache::Strategy::LocalCache","","classes/ActiveSupport/Cache/Strategy/LocalCache.html","","<p>Caches that implement LocalCache will be backed by an in-memory cache for\nthe duration of a block. Repeated …\n"],["ActiveSupport::Cache::Strategy::LocalCache::LocalStore","","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html","","<p>Simple memory backed cache. This cache is not thread safe and is intended\nonly for serving as a temporary …\n"],["ActiveSupport::CachingKeyGenerator","","classes/ActiveSupport/CachingKeyGenerator.html","","<p>CachingKeyGenerator is a wrapper around KeyGenerator which allows users to\navoid re-executing the key …\n"],["ActiveSupport::Callbacks","","classes/ActiveSupport/Callbacks.html","","<p>Callbacks are code hooks that are run at key points in an object&#39;s\nlifecycle. The typical use case …\n"],["ActiveSupport::Callbacks::ClassMethods","","classes/ActiveSupport/Callbacks/ClassMethods.html","",""],["ActiveSupport::Concern","","classes/ActiveSupport/Concern.html","","<p>A typical module looks like this:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">included</span>(<span class=\"ruby-identifier\">base</span>)\n    <span class=\"ruby-identifier\">base</span>.<span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ClassMethods</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Concurrency","","classes/ActiveSupport/Concurrency.html","",""],["ActiveSupport::Concurrency::Latch","","classes/ActiveSupport/Concurrency/Latch.html","",""],["ActiveSupport::Configurable","","classes/ActiveSupport/Configurable.html","","<p>Configurable provides a <code>config</code> method to store and retrieve\nconfiguration options as an <code>OrderedHash</code>. …\n"],["ActiveSupport::Configurable::ClassMethods","","classes/ActiveSupport/Configurable/ClassMethods.html","",""],["ActiveSupport::Configurable::Configuration","","classes/ActiveSupport/Configurable/Configuration.html","",""],["ActiveSupport::Dependencies","","classes/ActiveSupport/Dependencies.html","",""],["ActiveSupport::Dependencies::ClassCache","","classes/ActiveSupport/Dependencies/ClassCache.html","",""],["ActiveSupport::Dependencies::WatchStack","","classes/ActiveSupport/Dependencies/WatchStack.html","","<p>The WatchStack keeps a stack of the modules being watched as files are\nloaded. If a file in the process …\n"],["ActiveSupport::Deprecation","","classes/ActiveSupport/Deprecation.html","","<p>Deprecation specifies the API used by Rails to deprecate methods, instance\nvariables, objects and constants. …\n"],["ActiveSupport::Deprecation::Behavior","","classes/ActiveSupport/Deprecation/Behavior.html","",""],["ActiveSupport::Deprecation::DeprecatedConstantProxy","","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html","","<p>This DeprecatedConstantProxy transforms constant to deprecated constant.\n\n<pre>OLD_CONST = ActiveSupport::Deprecation::DeprecatedConstantProxy.new(&#39;OLD_CONST&#39;, ...</pre>\n"],["ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","","classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html","","<p>This DeprecatedInstanceVariableProxy transforms instance variable to\ndeprecated instance variable.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ActiveSupport::Deprecation::DeprecatedObjectProxy","","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html","","<p>This DeprecatedObjectProxy transforms object to deprecated object.\n\n<pre>@old_object = DeprecatedObjectProxy.new(Object.new, ...</pre>\n"],["ActiveSupport::Deprecation::MethodWrapper","","classes/ActiveSupport/Deprecation/MethodWrapper.html","",""],["ActiveSupport::Deprecation::Reporting","","classes/ActiveSupport/Deprecation/Reporting.html","",""],["ActiveSupport::DescendantsTracker","","classes/ActiveSupport/DescendantsTracker.html","","<p>This module provides an internal implementation to track descendants which\nis faster than iterating through …\n"],["ActiveSupport::Duration","","classes/ActiveSupport/Duration.html","","<p>Provides accurate date and time measurements using Date#advance and\nTime#advance, respectively. It mainly …\n"],["ActiveSupport::FileUpdateChecker","","classes/ActiveSupport/FileUpdateChecker.html","","<p>FileUpdateChecker specifies the API used by Rails to watch files and\ncontrol reloading. The API depends …\n"],["ActiveSupport::FileWatcher","","classes/ActiveSupport/FileWatcher.html","",""],["ActiveSupport::FileWatcher::Backend","","classes/ActiveSupport/FileWatcher/Backend.html","",""],["ActiveSupport::Gzip","","classes/ActiveSupport/Gzip.html","","<p>A convenient wrapper for the zlib standard library that allows\ncompression/decompression of strings with …\n"],["ActiveSupport::Gzip::Stream","","classes/ActiveSupport/Gzip/Stream.html","",""],["ActiveSupport::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["ActiveSupport::HashWithIndifferentAccess::HashWithIndifferentAccess","","classes/ActiveSupport/HashWithIndifferentAccess.html","","<p>Implements a hash where keys <code>:foo</code> and\n<code>&quot;foo&quot;</code> are considered to be the same.\n\n<pre>rgb = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["ActiveSupport::Inflector","","classes/ActiveSupport/Inflector.html","","<p>The Inflector transforms words from singular to plural, class names to\ntable names, modularized class …\n"],["ActiveSupport::Inflector::Inflections","","classes/ActiveSupport/Inflector/Inflections.html","","<p>A singleton instance of this class is yielded by Inflector.inflections,\nwhich can then be used to specify …\n"],["ActiveSupport::InheritableOptions","","classes/ActiveSupport/InheritableOptions.html","",""],["ActiveSupport::JSON","","classes/ActiveSupport/JSON.html","",""],["ActiveSupport::JSON::Encoding","","classes/ActiveSupport/JSON/Encoding.html","",""],["ActiveSupport::JSON::Encoding::CircularReferenceError","","classes/ActiveSupport/JSON/Encoding/CircularReferenceError.html","",""],["ActiveSupport::JSON::Encoding::Encoder","","classes/ActiveSupport/JSON/Encoding/Encoder.html","",""],["ActiveSupport::JSON::Variable","","classes/ActiveSupport/JSON/Variable.html","","<p>Deprecated: A string that returns itself as its JSON-encoded form.\n"],["ActiveSupport::KeyGenerator","","classes/ActiveSupport/KeyGenerator.html","","<p>KeyGenerator is a simple wrapper around OpenSSL&#39;s implementation of\nPBKDF2 It can be used to derive …\n"],["ActiveSupport::LogSubscriber","","classes/ActiveSupport/LogSubscriber.html","","<p>ActiveSupport::LogSubscriber is an object set to consume\nActiveSupport::Notifications with the sole purpose …\n"],["ActiveSupport::LogSubscriber::TestHelper","","classes/ActiveSupport/LogSubscriber/TestHelper.html","","<p>Provides some helpers to deal with testing log subscribers by setting up\nnotifications. Take for instance …\n"],["ActiveSupport::LogSubscriber::TestHelper::MockLogger","","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html","",""],["ActiveSupport::Logger","","classes/ActiveSupport/Logger.html","",""],["ActiveSupport::Logger::SimpleFormatter","","classes/ActiveSupport/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["ActiveSupport::MessageEncryptor","","classes/ActiveSupport/MessageEncryptor.html","","<p>MessageEncryptor is a simple way to encrypt values which get stored\nsomewhere you don&#39;t trust.\n<p>The …\n"],["ActiveSupport::MessageEncryptor::InvalidMessage","","classes/ActiveSupport/MessageEncryptor/InvalidMessage.html","",""],["ActiveSupport::MessageVerifier","","classes/ActiveSupport/MessageVerifier.html","","<p><code>MessageVerifier</code> makes it easy to generate and verify messages\nwhich are signed to prevent tampering. …\n"],["ActiveSupport::MessageVerifier::InvalidSignature","","classes/ActiveSupport/MessageVerifier/InvalidSignature.html","",""],["ActiveSupport::Multibyte","","classes/ActiveSupport/Multibyte.html","",""],["ActiveSupport::Multibyte::Chars","","classes/ActiveSupport/Multibyte/Chars.html","","<p>Chars enables you to work transparently with UTF-8 encoding in the Ruby\nString class without having extensive …\n"],["ActiveSupport::Multibyte::Unicode","","classes/ActiveSupport/Multibyte/Unicode.html","",""],["ActiveSupport::Multibyte::Unicode::Codepoint","","classes/ActiveSupport/Multibyte/Unicode/Codepoint.html","","<p>Holds data about a codepoint in the Unicode database.\n"],["ActiveSupport::Multibyte::Unicode::UnicodeDatabase","","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html","","<p>Holds static data from the Unicode database.\n"],["ActiveSupport::Notifications","","classes/ActiveSupport/Notifications.html","","<p>Notifications\n<p><code>ActiveSupport::Notifications</code> provides an instrumentation API\nfor Ruby.\n<p>Instrumenters\n"],["ActiveSupport::Notifications::Event","","classes/ActiveSupport/Notifications/Event.html","",""],["ActiveSupport::Notifications::Fanout","","classes/ActiveSupport/Notifications/Fanout.html","","<p>This is a default queue implementation that ships with Notifications. It\njust pushes events to all registered …\n"],["ActiveSupport::Notifications::Fanout::Subscribers","","classes/ActiveSupport/Notifications/Fanout/Subscribers.html","",""],["ActiveSupport::Notifications::Fanout::Subscribers::Timed","","classes/ActiveSupport/Notifications/Fanout/Subscribers/Timed.html","",""],["ActiveSupport::Notifications::Instrumenter","","classes/ActiveSupport/Notifications/Instrumenter.html","","<p>Instrumenters are stored in a thread local.\n"],["ActiveSupport::NumberHelper","","classes/ActiveSupport/NumberHelper.html","",""],["ActiveSupport::OrderedHash","","classes/ActiveSupport/OrderedHash.html","","<p><code>ActiveSupport::OrderedHash</code> implements a hash that preserves\ninsertion order.\n\n<pre>oh = ActiveSupport::OrderedHash.new ...</pre>\n"],["ActiveSupport::OrderedOptions","","classes/ActiveSupport/OrderedOptions.html","","<p>Usually key value pairs are handled something like this:\n\n<pre>h = {}\nh[:boy] = &#39;John&#39;\nh[:girl] = &#39;Mary&#39;\nh[:boy] ...</pre>\n"],["ActiveSupport::PerThreadRegistry","","classes/ActiveSupport/PerThreadRegistry.html","","<p>This module is used to encapsulate access to thread local variables.\n<p>Instead of polluting the thread locals …\n"],["ActiveSupport::ProxyObject","","classes/ActiveSupport/ProxyObject.html","","<p>A class with no predefined methods that behaves similarly to Builder&#39;s\nBlankSlate. Used for proxy …\n"],["ActiveSupport::Rescuable","","classes/ActiveSupport/Rescuable.html","","<p>Rescuable module adds support for easier exception handling.\n"],["ActiveSupport::Rescuable::ClassMethods","","classes/ActiveSupport/Rescuable/ClassMethods.html","",""],["ActiveSupport::SafeBuffer","","classes/ActiveSupport/SafeBuffer.html","",""],["ActiveSupport::SafeBuffer::SafeConcatError","","classes/ActiveSupport/SafeBuffer/SafeConcatError.html","",""],["ActiveSupport::StringInquirer","","classes/ActiveSupport/StringInquirer.html","","<p>Wrapping a string in this class gives you a prettier way to test for\nequality. The value returned by …\n"],["ActiveSupport::Subscriber","","classes/ActiveSupport/Subscriber.html","","<p>ActiveSupport::Subscriber is an object set to consume\nActiveSupport::Notifications. The subscriber dispatches …\n"],["ActiveSupport::TaggedLogging","","classes/ActiveSupport/TaggedLogging.html","","<p>Wraps any standard Logger object to provide tagging capabilities.\n\n<pre>logger = ActiveSupport::TaggedLogging.new(Logger.new(STDOUT)) ...</pre>\n"],["ActiveSupport::TestCase","","classes/ActiveSupport/TestCase.html","",""],["ActiveSupport::Testing","","classes/ActiveSupport/Testing.html","",""],["ActiveSupport::Testing::Assertions","","classes/ActiveSupport/Testing/Assertions.html","",""],["ActiveSupport::Testing::ConstantLookup","","classes/ActiveSupport/Testing/ConstantLookup.html","","<p>Resolves a constant from a minitest spec name.\n<p>Given the following spec-style test:\n\n<pre>describe WidgetsController, ...</pre>\n"],["ActiveSupport::Testing::Declarative","","classes/ActiveSupport/Testing/Declarative.html","",""],["ActiveSupport::Testing::Isolation","","classes/ActiveSupport/Testing/Isolation.html","",""],["ActiveSupport::Testing::Isolation::Forking","","classes/ActiveSupport/Testing/Isolation/Forking.html","",""],["ActiveSupport::Testing::Isolation::Subprocess","","classes/ActiveSupport/Testing/Isolation/Subprocess.html","",""],["ActiveSupport::Testing::ProxyTestResult","","classes/ActiveSupport/Testing/ProxyTestResult.html","",""],["ActiveSupport::Testing::RemoteError","","classes/ActiveSupport/Testing/RemoteError.html","",""],["ActiveSupport::Testing::SetupAndTeardown","","classes/ActiveSupport/Testing/SetupAndTeardown.html","",""],["ActiveSupport::Testing::SetupAndTeardown::ClassMethods","","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html","",""],["ActiveSupport::TimeWithZone","","classes/ActiveSupport/TimeWithZone.html","","<p>A Time-like class that can represent a time in any time zone. Necessary\nbecause standard Ruby Time instances …\n"],["ActiveSupport::TimeZone","","classes/ActiveSupport/TimeZone.html","","<p>The TimeZone class serves as a wrapper around TZInfo::Timezone instances.\nIt allows us to do the following: …\n"],["ActiveSupport::XMLConverter","","classes/ActiveSupport/XMLConverter.html","",""],["ActiveSupport::XMLConverter::DisallowedType","","classes/ActiveSupport/XMLConverter/DisallowedType.html","",""],["ActiveSupport::XmlMini","","classes/ActiveSupport/XmlMini.html","","<p>XmlMini\n<p>To use the much faster libxml parser:\n\n<pre>gem &#39;libxml-ruby&#39;, &#39;=0.9.7&#39;\nXmlMini.backend = &#39;LibXML&#39;</pre>\n"],["ActiveSupport::XmlMini_LibXMLSAX","","classes/ActiveSupport/XmlMini_LibXMLSAX.html","",""],["ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["ActiveSupport::XmlMini_NokogiriSAX","","classes/ActiveSupport/XmlMini_NokogiriSAX.html","",""],["ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html","","<p>Class that will build the hash while the XML document is being parsed using\nSAX events.\n"],["Array","","classes/Array.html","",""],["Benchmark","","classes/Benchmark.html","",""],["BigDecimal","","classes/BigDecimal.html","",""],["Class","","classes/Class.html","","<p>Extends the class object with class and instance accessors for class\nattributes, just like the native …\n"],["Date","","classes/Date.html","",""],["DateAndTime","","classes/DateAndTime.html","",""],["DateAndTime::Calculations","","classes/DateAndTime/Calculations.html","",""],["DateTime","","classes/DateTime.html","",""],["ERB","","classes/ERB.html","",""],["ERB::Util","","classes/ERB/Util.html","",""],["Enumerable","","classes/Enumerable.html","",""],["FalseClass","","classes/FalseClass.html","",""],["File","","classes/File.html","",""],["Float","","classes/Float.html","",""],["HTML","","classes/HTML.html","",""],["HTML::FullSanitizer","","classes/HTML/FullSanitizer.html","",""],["HTML::LinkSanitizer","","classes/HTML/LinkSanitizer.html","",""],["HTML::Sanitizer","","classes/HTML/Sanitizer.html","",""],["HTML::Selector","","classes/HTML/Selector.html","","<p>Selects HTML elements using CSS 2 selectors.\n<p>The <code>Selector</code> class uses CSS selector expressions to match …\n"],["HTML::Tag","","classes/HTML/Tag.html","",""],["HTML::WhiteListSanitizer","","classes/HTML/WhiteListSanitizer.html","",""],["Hash","","classes/Hash.html","",""],["I18n","","classes/I18n.html","",""],["I18n::ExceptionHandler","","classes/I18n/ExceptionHandler.html","",""],["I18n::Railtie","","classes/I18n/Railtie.html","",""],["Integer","","classes/Integer.html","",""],["Kernel","","classes/Kernel.html","",""],["LoadError","","classes/LoadError.html","",""],["Logger","","classes/Logger.html","",""],["Logger::SimpleFormatter","","classes/Logger/SimpleFormatter.html","","<p>Simple formatter which only displays the message.\n"],["LoggerSilence","","classes/LoggerSilence.html","",""],["Marshal","","classes/Marshal.html","",""],["Mime","","classes/Mime.html","",""],["Mime::Mimes","","classes/Mime/Mimes.html","",""],["Mime::NullType","","classes/Mime/NullType.html","",""],["Mime::Type","","classes/Mime/Type.html","","<p>Encapsulates the notion of a mime type. Can be used at render time, for\nexample, with:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">PostsController</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Module","","classes/Module.html","","<p>Extends the API for constants to be able to deal with qualified names.\nArguments are assumed to be relative …\n"],["Mysql","","classes/Mysql.html","",""],["Mysql::Result","","classes/Mysql/Result.html","",""],["Mysql::Stmt","","classes/Mysql/Stmt.html","",""],["Mysql::Time","","classes/Mysql/Time.html","",""],["NameError","","classes/NameError.html","",""],["NilClass","","classes/NilClass.html","",""],["Numeric","","classes/Numeric.html","",""],["Object","","classes/Object.html","",""],["Object::MissingSourceFile","","classes/LoadError.html","",""],["Process","","classes/Process.html","",""],["Process::Status","","classes/Process/Status.html","",""],["QualifiedConstUtils","","classes/QualifiedConstUtils.html","",""],["Rails","","classes/Rails.html","",""],["Rails::API","","classes/Rails/API.html","",""],["Rails::API::AppTask","","classes/Rails/API/AppTask.html","",""],["Rails::API::RepoTask","","classes/Rails/API/RepoTask.html","",""],["Rails::API::Task","","classes/Rails/API/Task.html","",""],["Rails::AppBuilder","","classes/Rails/AppBuilder.html","","<p>The application builder allows you to override elements of the application\ngenerator without being forced …\n"],["Rails::AppRailsLoader","","classes/Rails/AppRailsLoader.html","",""],["Rails::Application","","classes/Rails/Application.html","","<p>In Rails 3.0, a Rails::Application object was introduced which is nothing\nmore than an Engine but with …\n"],["Rails::Application::Bootstrap","","classes/Rails/Application/Bootstrap.html","",""],["Rails::Application::Configuration","","classes/Rails/Application/Configuration.html","",""],["Rails::Application::Finisher","","classes/Rails/Application/Finisher.html","",""],["Rails::Application::RoutesReloader","","classes/Rails/Application/RoutesReloader.html","",""],["Rails::BacktraceCleaner","","classes/Rails/BacktraceCleaner.html","",""],["Rails::Configuration","","classes/Rails/Configuration.html","",""],["Rails::Configuration::MiddlewareStackProxy","","classes/Rails/Configuration/MiddlewareStackProxy.html","","<p>MiddlewareStackProxy is a proxy for the Rails middleware stack that allows\nyou to configure middlewares …\n"],["Rails::Console","","classes/Rails/Console.html","",""],["Rails::ConsoleMethods","","classes/Rails/ConsoleMethods.html","",""],["Rails::DBConsole","","classes/Rails/DBConsole.html","",""],["Rails::DeprecatedConstant","","classes/Rails/DeprecatedConstant.html","",""],["Rails::Engine","","classes/Rails/Engine.html","","<p><code>Rails::Engine</code> allows you to wrap a specific Rails application\nor subset of functionality and share it …\n"],["Rails::Engine:::","","classes/Rails/Engine/:.html","",""],["Rails::Engine::Configuration","","classes/Rails/Engine/Configuration.html","",""],["Rails::Engine::Railties","","classes/Rails/Engine/Railties.html","",""],["Rails::Generators","","classes/Rails/Generators.html","",""],["Rails::Generators::Actions","","classes/Rails/Generators/Actions.html","",""],["Rails::Generators::ActiveModel","","classes/Rails/Generators/ActiveModel.html","","<p>ActiveModel is a class to be implemented by each ORM to allow Rails to\ngenerate customized controller …\n"],["Rails::Generators::Base","","classes/Rails/Generators/Base.html","",""],["Rails::Generators::Migration","","classes/Rails/Generators/Migration.html","","<p>Holds common methods for migrations. It assumes that migrations has the\n[0-9]*_name format and can be …\n"],["Rails::Generators::Migration::ClassMethods","","classes/Rails/Generators/Migration/ClassMethods.html","",""],["Rails::Generators::NamedBase","","classes/Rails/Generators/NamedBase.html","",""],["Rails::Generators::TestCase","","classes/Rails/Generators/TestCase.html","","<p>This class provides a TestCase for testing generators. To setup, you need\njust to configure the destination …\n"],["Rails::Generators::Testing","","classes/Rails/Generators/Testing.html","",""],["Rails::Generators::Testing::Assertions","","classes/Rails/Generators/Testing/Assertions.html","",""],["Rails::Generators::Testing::Behaviour","","classes/Rails/Generators/Testing/Behaviour.html","",""],["Rails::Generators::Testing::Behaviour::ClassMethods","","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html","",""],["Rails::Generators::Testing::SetupAndTeardown","","classes/Rails/Generators/Testing/SetupAndTeardown.html","",""],["Rails::Info","","classes/Rails/Info.html","",""],["Rails::Initializable","","classes/Rails/Initializable.html","",""],["Rails::Initializable::ClassMethods","","classes/Rails/Initializable/ClassMethods.html","",""],["Rails::Initializable::Collection","","classes/Rails/Initializable/Collection.html","",""],["Rails::Initializable::Initializer","","classes/Rails/Initializable/Initializer.html","",""],["Rails::Paths","","classes/Rails/Paths.html","",""],["Rails::Paths::Path","","classes/Rails/Paths/Path.html","",""],["Rails::Paths::Root","","classes/Rails/Paths/Root.html","","<p>This object is an extended hash that behaves as root of the\n<code>Rails::Paths</code> system. It allows you to collect …\n"],["Rails::PluginBuilder","","classes/Rails/PluginBuilder.html","","<p>The plugin builder allows you to override elements of the plugin generator\nwithout being forced to reverse …\n"],["Rails::Rack","","classes/Rails/Rack.html","",""],["Rails::Rack::Debugger","","classes/Rails/Rack/Debugger.html","",""],["Rails::Rack::LogTailer","","classes/Rails/Rack/LogTailer.html","",""],["Rails::Rack::Logger","","classes/Rails/Rack/Logger.html","","<p>Sets log tags, logs the request, calls the app, and flushes the logs.\n"],["Rails::Railtie","","classes/Rails/Railtie.html","","<p>Railtie is the core of the Rails framework and provides several hooks to\nextend Rails and/or modify the …\n"],["Rails::Railtie::Configurable","","classes/Rails/Railtie/Configurable.html","",""],["Rails::Railtie::Configurable::ClassMethods","","classes/Rails/Railtie/Configurable/ClassMethods.html","",""],["Rails::Railtie::Configuration","","classes/Rails/Railtie/Configuration.html","",""],["Rails::Server","","classes/Rails/Server.html","",""],["Rails::Server::Options","","classes/Rails/Server/Options.html","",""],["Rails::TestTask","","classes/Rails/TestTask.html","",""],["Rails::TestTask::TestInfo","","classes/Rails/TestTask/TestInfo.html","",""],["Rails::TestUnitRailtie","","classes/Rails/TestUnitRailtie.html","",""],["Rails::VERSION","","classes/Rails/VERSION.html","",""],["Range","","classes/Range.html","",""],["SourceAnnotationExtractor","","classes/SourceAnnotationExtractor.html","","<p>Implements the logic behind the rake tasks for annotations like\n\n<pre>rake notes\nrake notes:optimize</pre>\n<p>and friends. …\n"],["SourceAnnotationExtractor::Annotation","","classes/SourceAnnotationExtractor/Annotation.html","",""],["String","","classes/String.html","","<p>String inflections define new methods on the String class to transform\nnames for different purposes. …\n"],["Symbol","","classes/Symbol.html","",""],["Thread","","classes/Thread.html","",""],["Time","","classes/Time.html","",""],["TrueClass","","classes/TrueClass.html","",""],["URI","","classes/URI.html","",""],["!~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-21-7E","","<p>Equivalent to <code>String#!~</code>. Match the class name against the\ngiven regexp. Returns <code>true</code> if there is no match, …\n"],["%","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-25","(args)",""],["+","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2B","(other)","<p>Adds another Duration or a Numeric to this Duration. Numeric values are\ntreated as seconds.\n"],["+","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-2B","(other)",""],["+","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2B","(other)",""],["+","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-2B","(other)",""],["-","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-2D","(other)","<p>Subtracts another Duration or a Numeric from this Duration. Numeric values\nare treated as seconds.\n"],["-","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-2D","(other)",""],["-","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-2D","(others)",""],["-","Time","classes/Time.html#method-i-2D","(other)",""],["<<","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-3C-3C","(event)",""],["<<","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-3C-3C","(value)",""],["<<","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-3C-3C","(path)",""],["<=>","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3C-3D-3E","","<p>Equivalent to <code>String#&lt;=&gt;</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">BlogPost</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-constant\">BlogPost</span>.<span class=\"ruby-identifier\">model_name</span> <span class=\"ruby-operator\">&lt;=&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["<=>","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-i-3C-3D-3E","(version_string)",""],["<=>","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3C-3D-3E","(other_object)","<p>Allows sort on objects\n"],["<=>","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-3C-3D-3E","(other)","<p>Use the time in UTC for comparisons.\n"],["<=>","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3C-3D-3E","(zone)","<p>Compare this time zone to the parameter. The two are compared first on\ntheir offsets, and then by name. …\n"],["<=>","Date","classes/Date.html#method-i-3C-3D-3E","(other)",""],["<=>","DateTime","classes/DateTime.html#method-i-3C-3D-3E","(other)","<p>Layers additional behavior on DateTime#&lt;=&gt; so that Time and\nActiveSupport::TimeWithZone instances …\n"],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(other)",""],["==","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-3D-3D","(middleware)",""],["==","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-3D-3D","(resolver)",""],["==","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-3D-3D","(type)",""],["==","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D","","<p>Equivalent to <code>String#==</code>. Returns <code>true</code> if the\nclass name and <code>other</code> are equal, otherwise <code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">BlogPost</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["==","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-3D-3D","(comparison_object)","<p>Returns true if <code>comparison_object</code> is the same exact object, or\n<code>comparison_object</code> is of the same type …\n"],["==","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-3D-3D","(other_aggregation)","<p>Returns <code>true</code> if <code>self</code> and\n<code>other_aggregation</code> have the same <code>name</code> attribute,\n<code>active_record</code> attribute, and …\n"],["==","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-3D-3D","(other)","<p>Compares two relations for equality.\n"],["==","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if <code>other</code> is also a Duration instance\nwith the same <code>value</code>, or if <code>other == value</code>.\n"],["==","Mime::Type","classes/Mime/Type.html#method-i-3D-3D","(mime_type)",""],["===","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-3D-3D","","<p>Equivalent to <code>#==</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">BlogPost</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-constant\">BlogPost</span>.<span class=\"ruby-identifier\">model_name</span> <span class=\"ruby-operator\">===</span> <span class=\"ruby-string\">&#39;BlogPost&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["===","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-3D-3D-3D","(object)","<p>Overwrite the default class equality method to provide support for\nassociation proxies.\n"],["===","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-3D-3D-3D","(other)",""],["===","Mime::Type","classes/Mime/Type.html#method-i-3D-3D-3D","(list)",""],["===","Time","classes/Time.html#method-c-3D-3D-3D","(other)","<p>Overriding case equality method so that it returns true for\nActiveSupport::TimeWithZone instances\n"],["=~","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-3D-7E","","<p>Equivalent to <code>String#=~</code>. Match the class name against the\ngiven regexp. Returns the position where the …\n"],["=~","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-3D-7E","(re)","<p>Compare #name and TZInfo identifier to a supplied regexp, returning\n<code>true</code> if a match is found.\n"],["=~","Mime::Type","classes/Mime/Type.html#method-i-3D-7E","(mime_type)",""],["GET","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-GET","()","<p>Override Rack&#39;s GET method to support indifferent access\n"],["POST","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-POST","()","<p>Override Rack&#39;s POST method to support indifferent access\n"],["[]","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-5B-5D","(key)","<p>Returns a parameter for the given <code>key</code>. If not found, returns\n<code>nil</code>.\n\n<pre>params = ActionController::Parameters.new(person: ...</pre>\n"],["[]","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D","(k)",""],["[]","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D","(key)",""],["[]","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-5B-5D","(i)",""],["[]","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-5B-5D","(type)",""],["[]","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-5B-5D","(type)",""],["[]","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D","(attribute)","<p>When passed a symbol or a name of a method, returns an array of errors for\nthe method.\n\n<pre>person.errors[:name] ...</pre>\n"],["[]","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["[]","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D","(oid)",""],["[]","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D","(key)",""],["[]","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-5B-5D","(name)","<p>Returns a ColumnDefinition for the column with name <code>name</code>.\n"],["[]","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D","(x)",""],["[]","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-5B-5D","(idx)",""],["[]","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-5B-5D","(*args)",""],["[]","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D","(key)",""],["[]","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-5B-5D","(*args)",""],["[]","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-5B-5D","(arg)","<p>Locate a specific time zone object. If the argument is a string, it is\ninterpreted to mean the name of …\n"],["[]","Mime","classes/Mime.html#method-c-5B-5D","(type)",""],["[]","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D","(path)",""],["[]=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-5B-5D-3D","(k, v)",""],["[]=","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-5B-5D-3D","(key, value)",""],["[]=","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-5B-5D-3D","(attribute, error)","<p>Adds to the supplied attribute the supplied error message.\n\n<pre>person.errors[:name] = &quot;must be set&quot;\nperson.errors[:name] ...</pre>\n"],["[]=","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-5B-5D-3D","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. (Alias for the protected\n<code>write_attribute</code> …\n"],["[]=","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-5B-5D-3D","(oid, type)",""],["[]=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-5B-5D-3D","(sql, key)",""],["[]=","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-5B-5D-3D","(k,v)",""],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;</pre>\n"],["[]=","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a new value to the hash:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new\nhash[:key] = &#39;value&#39;</pre>\n"],["[]=","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-5B-5D-3D","(path, value)",""],["__callback_runner_name","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__callback_runner_name","(kind)",""],["__callback_runner_name_cache","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__callback_runner_name_cache","()",""],["__generate_callback_runner_name","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__generate_callback_runner_name","(kind)",""],["__replay__","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-__replay__","(result)",""],["__reset_runner","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-__reset_runner","(symbol)",""],["_attr_readonly","ActiveRecord::ReadonlyAttributes","classes/ActiveRecord/ReadonlyAttributes.html#method-i-_attr_readonly","()",""],["_dasherize","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_dasherize","(key)",""],["_deprecation_warning","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-_deprecation_warning","()",""],["_dump","Time","classes/Time.html#method-i-_dump","(*args)",""],["_dump_without_zone","Time","classes/Time.html#method-i-_dump_without_zone","(*args)",""],["_get","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-_get","(key)",""],["_handle_render_options","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-_handle_render_options","(options)",""],["_insert_callbacks","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_insert_callbacks","(callbacks, block = nil)","<p>Take callback names and an optional callback proc, normalize them, then\ncall the block with each callback. …\n"],["_layout_for","ActionView::Context","classes/ActionView/Context.html#method-i-_layout_for","(name=nil)","<p>Encapsulates the interaction with the view flow so it returns the correct\nbuffer on <code>yield</code>. This is usually …\n"],["_layout_for","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-_layout_for","(*args, &block)","<p>Overwrites _layout_for in the context object so it supports the case a\nblock is passed to a partial. …\n"],["_load","Time","classes/Time.html#method-c-_load","(marshaled_time)",""],["_load_without_zone","Time","classes/Time.html#method-c-_load_without_zone","(marshaled_time)",""],["_normalize_callback_options","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options","(options)","<p>If :only or :except are used, convert the options into the :unless and :if\noptions of ActiveSupport::Callbacks …\n"],["_original_to_s","BigDecimal","classes/BigDecimal.html#method-i-_original_to_s","(*args)",""],["_parse_file","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-_parse_file","(file, entity)",""],["_prefixes","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-_prefixes","()","<p>The prefixes used in render “foo” shortcuts.\n"],["_prepare_context","ActionView::Context","classes/ActionView/Context.html#method-i-_prepare_context","()","<p>Prepares the context by setting the appropriate instance variables. :api:\nplugin\n"],["_routes","AbstractController::UrlFor","classes/AbstractController/UrlFor.html#method-i-_routes","()",""],["_routes","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-_routes","()",""],["_routes_context","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_routes_context","()",""],["_run_class_setup","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-_run_class_setup","()",""],["_set_detail","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-_set_detail","(key, value)",""],["_set_wrapper_options","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-_set_wrapper_options","(options)",""],["_store_accessors_module","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-_store_accessors_module","()",""],["_to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-_to_partial_path","()",""],["_url_for_modules","ActionView::Helpers::UrlHelper::ClassMethods","classes/ActionView/Helpers/UrlHelper/ClassMethods.html#method-i-_url_for_modules","()",""],["_with_routes","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-_with_routes","(routes)",""],["abstract!","AbstractController::Base","classes/AbstractController/Base.html#method-c-abstract-21","()","<p>Define a controller as abstract. See internal_methods for more details.\n"],["abstract_class?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-abstract_class-3F","()","<p>Returns whether this class is an abstract class or not.\n"],["abstract_railtie?","Rails::Railtie","classes/Rails/Railtie.html#method-c-abstract_railtie-3F","()",""],["accept","ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html#method-i-accept","(o)",""],["accept=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-accept-3D","(mime_types)",""],["accepts","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-accepts","()","<p>Returns the accepted MIME type for the request.\n"],["accepts_nested_attributes_for","ActiveRecord::NestedAttributes::ClassMethods","classes/ActiveRecord/NestedAttributes/ClassMethods.html#method-i-accepts_nested_attributes_for","(*attr_names)","<p>Defines an attributes writer for the specified association(s).\n<p>Supported options:\n<p>:allow_destroy &mdash; If true, …\n"],["acronym","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-acronym","(word)","<p>Specifies a new acronym. An acronym must be specified as it will appear in\na camelized string. An underscore …\n"],["action","ActionController::Metal","classes/ActionController/Metal.html#method-c-action","(name, klass = ActionDispatch::Request)","<p>Returns a Rack endpoint for the given action name.\n"],["action","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-action","()",""],["action=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-action-3D","(action_name)",""],["action_has_layout?","AbstractController::Layouts","classes/AbstractController/Layouts.html#method-i-action_has_layout-3F","()","<p>Controls whether an action should be rendered using a layout. If you want\nto disable any <code>layout</code> settings …\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-i-action_methods","()","<p>Delegates to the class&#39; #action_methods\n"],["action_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-action_methods","()","<p>A list of method names that should be considered actions. This includes all\npublic instance methods on …\n"],["action_methods","AbstractController::UrlFor::ClassMethods","classes/AbstractController/UrlFor/ClassMethods.html#method-i-action_methods","()",""],["action_methods","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-action_methods","()","<p>Overrides AbstractController::Base#action_methods to remove any methods\nthat are listed as hidden methods. …\n"],["active?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-active-3F","()","<p>Checks whether the connection to the database is still active. This\nincludes checking whether the database …\n"],["active?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-active-3F","()","<p>CONNECTION MANAGEMENT ====================================\n"],["active?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-active-3F","()","<p>Is this connection alive and ready for queries?\n"],["active?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-active-3F","()",""],["active_connection?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-active_connection-3F","()","<p>Is there an open connection that is being used for the current thread?\n"],["active_connections?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-active_connections-3F","()","<p>Returns true if there are any active connections among the connection pools\nthat the ConnectionHandler …\n"],["acts_like?","Object","classes/Object.html#method-i-acts_like-3F","(duck)","<p>A duck-type assistant method. For example, Active Support extends Date to\ndefine an <code>acts_like_date?</code> method, …\n"],["acts_like_date?","Date","classes/Date.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_date?","DateTime","classes/DateTime.html#method-i-acts_like_date-3F","()","<p>Duck-types as a Date-like class. See Object#acts_like?.\n"],["acts_like_string?","String","classes/String.html#method-i-acts_like_string-3F","()","<p>Enable more predictable duck-typing on String-like classes. See\n<code>Object#acts_like?</code>.\n"],["acts_like_time?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-acts_like_time-3F","()","<p>So that <code>self</code> <code>acts_like?(:time)</code>.\n"],["acts_like_time?","DateTime","classes/DateTime.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["acts_like_time?","Time","classes/Time.html#method-i-acts_like_time-3F","()","<p>Duck-types as a Time-like class. See Object#acts_like?.\n"],["adapter_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-adapter_name","()","<p>Returns the human-readable name of the adapter. Use mixed case - one can\nalways use downcase if needed. …\n"],["adapter_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-adapter_name","()","<p>Returns &#39;PostgreSQL&#39; as adapter name for identification purposes.\n"],["add","ActionController::Renderers","classes/ActionController/Renderers.html#method-c-add","(key, &block)","<p>Adds a new renderer to call within controller actions. A renderer is\ninvoked by passing its name as an …\n"],["add","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-add","(view, locals)",""],["add","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add","(attribute, message = nil, options = {})","<p>Adds <code>message</code> to the error messages on <code>attribute</code>.\nMore than one error can be added to the same <code>attribute</code> …\n"],["add","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-add","(element)","<p>Add <code>element</code> to the queue.  Never blocks.\n"],["add","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-add","(table_name)","<p>Add internal cache for table with <code>table_name</code>.\n"],["add","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-add","(path, options = {})",""],["add_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_belongs_to","(table_name, ref_name, options = {})",""],["add_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column","(table_name, column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["add_column_position!","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_position-21","(sql, options)",""],["add_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_column_sql","(table_name, column_name, type, options = {})",""],["add_delivery_method","ActionMailer::DeliveryMethods::ClassMethods","classes/ActionMailer/DeliveryMethods/ClassMethods.html#method-i-add_delivery_method","(symbol, klass, default_options={})","<p>Adds a new delivery method through the given class using the given symbol\nas alias and the default options …\n"],["add_error","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-add_error","(e)",""],["add_expr","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr","(src, code, indicator)","<p>Erubis toggles &lt;%= and &lt;%== behavior when escaping is enabled. We\noverride to always treat &lt;%== …\n"],["add_expr_escaped","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_escaped","(src, code)",""],["add_expr_literal","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_expr_literal","(src, code)",""],["add_filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_filter","(&block)","<p>Adds a filter from the block provided. Each line in the backtrace will be\nmapped against this filter. …\n"],["add_flash_types","ActionController::Flash::ClassMethods","classes/ActionController/Flash/ClassMethods.html#method-i-add_flash_types","(*types)",""],["add_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index","(table_name, column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols.\n<p>The index will …\n"],["add_index_length","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_length","(option_strings, column_names, options = {})",""],["add_index_options","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_options","(table_name, column_name, options = {})",""],["add_index_sort_order","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index_sort_order","(option_strings, column_names, options = {})",""],["add_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_index_sql","(table_name, column_name, options = {})",""],["add_on_blank","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_blank","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is blank (using Object#blank? …\n"],["add_on_empty","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-add_on_empty","(attributes, options = {})","<p>Will add an error message to each of the attributes in\n<code>attributes</code> that is empty.\n\n<pre>person.errors.add_on_empty(:name) ...</pre>\n"],["add_postamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_postamble","(src)",""],["add_preamble","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_preamble","(src)",""],["add_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_reference","(table_name, ref_name, options = {})","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>add_reference</code>\nand …\n"],["add_renderer","ActionController","classes/ActionController.html#method-c-add_renderer","(key, &block)","<p>See <code>Renderers.add</code>\n"],["add_shebang_option!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-add_shebang_option-21","()","<p>Small macro to add ruby as an option to the generator with proper default\nvalue plus an instance helper …\n"],["add_silencer","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-add_silencer","(&block)","<p>Adds a silencer from the block provided. If the silencer returns\n<code>true</code> for a given line, it will be excluded …\n"],["add_source","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-add_source","(source, options={})","<p>Add the given source to Gemfile\n\n<pre>add_source &quot;http://gems.github.com/&quot;</pre>\n"],["add_stmt","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_stmt","(src, code)",""],["add_text","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-add_text","(src, text)",""],["add_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_timestamps","(table_name)","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the named table.\n\n<pre>add_timestamps(:suppliers)</pre>\n"],["add_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-add_timestamps_sql","(table_name)",""],["add_to_transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-add_to_transaction","()","<p>Add the record to the current transaction so that the :after_rollback and\n:after_commit callbacks can …\n"],["add_transaction_record","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-add_transaction_record","(record)","<p>Register a record with the current transaction so that its after_commit and\nafter_rollback callbacks …\n"],["added?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-added-3F","(attribute, message = nil, options = {})","<p>Returns <code>true</code> if an error on the attribute with the given\nmessage is present, <code>false</code> otherwise. <code>message</code> …\n"],["advance","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-advance","(options)",""],["advance","Date","classes/Date.html#method-i-advance","(options)","<p>Provides precise Date calculations for years, months, and days. The\n<code>options</code> parameter takes a hash with …\n"],["advance","DateTime","classes/DateTime.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["advance","Time","classes/Time.html#method-i-advance","(options)","<p>Uses Date to provide precise Time calculations for years, months, and days.\nThe <code>options</code> parameter takes …\n"],["after","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-after","(*args, &block)",""],["after","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-after","()",""],["after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails. Aliased as after_filter. …\n"],["after_commit","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_commit","(*args, &block)","<p>This callback is called after a record has been created, updated, or\ndestroyed.\n<p>You can specify that the …\n"],["after_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-after_initialize","(&block)","<p>Last configurable block to run. Called after frameworks initialize.\n"],["after_rollback","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-after_rollback","(*args, &block)","<p>This callback is called after a create, update, or destroy are rolled back.\n<p>Please check the documentation …\n"],["after_teardown","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-after_teardown","()",""],["after_teardown","ActiveSupport::Testing::SetupAndTeardown","classes/ActiveSupport/Testing/SetupAndTeardown.html#method-i-after_teardown","()",""],["after_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-after_validation","(*args, &block)","<p>Defines a callback that will get called right after validation happens.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ago","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-ago","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the past as this Duration\nrepresents.\n"],["ago","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-ago","(other)",""],["ago","Date","classes/Date.html#method-i-ago","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["ago","DateTime","classes/DateTime.html#method-i-ago","(seconds)","<p>Returns a new DateTime representing the time a number of seconds ago. Do\nnot use this method in combination …\n"],["ago","Numeric","classes/Numeric.html#method-i-ago","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.ago\n"],["ago","Time","classes/Time.html#method-i-ago","(seconds)","<p>Returns a new Time representing the time a number of seconds ago, this is\nbasically a wrapper around …\n"],["alert","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert","()","<p>Convenience accessor for <code>flash[:alert]</code>.\n"],["alert=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-alert-3D","(message)","<p>Convenience accessor for <code>flash[:alert]=</code>.\n"],["alias_attribute","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AttributeMethods</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["alias_attribute","Module","classes/Module.html#method-i-alias_attribute","(new_name, old_name)","<p>Allows you to make aliases for attributes, which includes getter, setter,\nand query methods.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Content</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["alias_method_chain","Module","classes/Module.html#method-i-alias_method_chain","(target, feature)","<p>Encapsulates the common pattern of:\n\n<pre>alias_method :foo_without_feature, :foo\nalias_method :foo, :foo_with_feature</pre>\n"],["alias_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-alias_type","(new, old)",""],["alias_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-alias_type","(new, old)","<p>Alias the <code>old</code> type to the <code>new</code> type.\n"],["all","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-all","(*args, &block)",""],["all","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-all","(*args, &block)",""],["all","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-all","()","<p>Returns an <code>ActiveRecord::Relation</code> scope object.\n\n<pre>posts = Post.all\nposts.size # Fires &quot;select count(*) from ...</pre>\n"],["all","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-all","()","<p>Return an array of all TimeZone objects. There are multiple TimeZone\nobjects per time zone, in many cases, …\n"],["all","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-all","(klass)","<p>GET index\n"],["all_day","Time","classes/Time.html#method-i-all_day","()","<p>Returns a Range representing the whole day of the current time.\n"],["all_helpers_from_path","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-all_helpers_from_path","(path)",""],["all_month","Time","classes/Time.html#method-i-all_month","()","<p>Returns a Range representing the whole month of the current time.\n"],["all_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-all_paths","()",""],["all_quarter","Time","classes/Time.html#method-i-all_quarter","()","<p>Returns a Range representing the whole quarter of the current time.\n"],["all_week","Time","classes/Time.html#method-i-all_week","(start_day = Date.beginning_of_week)","<p>Returns a Range representing the whole week of the current time. Week\nstarts on start_day, default is …\n"],["all_year","Time","classes/Time.html#method-i-all_year","()","<p>Returns a Range representing the whole year of the current time.\n"],["allow_concurrency?","Rails::Application","classes/Rails/Application.html#method-i-allow_concurrency-3F","()",""],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-allowed_index_name_length","()","<p>Returns the maximum allowed length for an index name. This limit is\nenforced by rails and Is less than …\n"],["allowed_index_name_length","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-allowed_index_name_length","()","<p>Returns 62. SQLite supports index names up to 64 characters. The rest is\nused by rails internally to …\n"],["announce","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-announce","(message)",""],["anonymous?","Module","classes/Module.html#method-i-anonymous-3F","()","<p>A module may or may not have a name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>; <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">M</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n\n<span class=\"ruby-identifier\">m</span> = <span class=\"ruby-constant\">Module</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">m</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n<p>A module …\n"],["any","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-any","(*args, &block)",""],["any","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-any","(*args, &block)",""],["any?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-any-3F","(&block)","<p>Returns <code>true</code> if the collection is not empty.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["any?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-any-3F","()","<p>Returns true if there are any records.\n"],["any_waiting?","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-any_waiting-3F","()","<p>Test if any threads are currently waiting on the queue.\n"],["api_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_behavior","(error)","<p>This is the common behavior for formats associated with APIs, such as :xml\nand :json.\n"],["api_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-api_dir","()",""],["api_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-api_dir","()",""],["api_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-api_location","()",""],["api_main","Rails::API::Task","classes/Rails/API/Task.html#method-i-api_main","()",""],["app","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app","()",""],["app","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-app","()",""],["app","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-app","()",""],["app","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-app","(create=false)","<p>reference the global “app” instance, created on demand. To recreate the\ninstance, pass a non-false …\n"],["app","Rails::Engine","classes/Rails/Engine.html#method-c-app","()","<p>Returns the underlying rack application for this engine.\n"],["app","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-app","()",""],["app","Rails::Server","classes/Rails/Server.html#method-i-app","()","<p>TODO: this is no longer required but we keep it for the moment to support\nolder config.ru files.\n"],["app=","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-c-app-3D","(app)",""],["app_generators","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_generators","()","<p>This allows you to modify application&#39;s generators from Railties.\n<p>Values set on app_generators will …\n"],["app_middleware","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-app_middleware","()","<p>This allows you to modify the application&#39;s middlewares from Engines.\n<p>All operations you run on the …\n"],["append_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_after_action","","<p>Append a callback after actions. See _insert_callbacks for parameter\ndetails. Aliased as append_after_filter. …\n"],["append_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails. Aliased as append_around_filter. …\n"],["append_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-append_before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails. Aliased as append_before_filter. …\n"],["append_features","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-append_features","(base)",""],["append_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-append_view_path","(path)",""],["append_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-append_view_path","(path)","<p>Append a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["application","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-application","(data=nil, options={}, &block)",""],["application_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-application_name","()","<p>Tries to retrieve the application name or simple return application.\n"],["application_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-application_trace","()",""],["apply_join_dependency","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-apply_join_dependency","(relation, join_dependency)",""],["arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-arel","()","<p>Returns the Arel object associated with the relation.\n"],["arel_engine","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-arel_engine","()","<p>Returns the Arel engine.\n"],["arel_table","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-arel_table","()","<p>Returns an instance of <code>Arel::Table</code> loaded with the current\ntable name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["arguments","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-arguments","(array)","<p>Sets default arguments on generator invocation. This can be overwritten\nwhen invoking it.\n\n<pre>arguments %w(app_name ...</pre>\n"],["around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-around_action","","<p>Append a callback around actions. See _insert_callbacks for parameter\ndetails. Aliased as around_filter. …\n"],["array_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-array_to_string","(value, column, adapter, should_be_quoted = false)",""],["as_json","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-as_json","(options=nil)","<p>Returns a Hash that can be used as the JSON representation for this object.\nYou can pass the <code>:full_messages</code> …\n"],["as_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-as_json","(options = nil)","<p>Returns a hash representing the model. Some configuration can be passed\nthrough <code>options</code>.\n<p>The option <code>include_root_in_json</code> …\n"],["as_json","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-as_json","(value, use_options = true)","<p>like encode, but only calls as_json, without encoding to string.\n"],["as_json","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-i-as_json","(options = nil)",""],["as_json","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-as_json","(options = nil)","<p>Coerces time to a string for JSON encoding. The default format is ISO 8601.\nYou can get %Y/%m/%d %H:%M:% …\n"],["as_json","Process::Status","classes/Process/Status.html#method-i-as_json","(options = nil)",""],["assert_blank","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_blank","(object, message=nil)","<p>Test if an expression is blank. Passes if <code>object.blank?</code> is\n<code>true</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">assert_blank</span> []   <span class=\"ruby-comment\"># =&gt; true</span>\n<span class=\"ruby-identifier\">assert_blank</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_class_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_class_method","(method, content, &block)","<p>Asserts the given class method exists in the given content. This method\ndoes not detect class methods …\n"],["assert_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_difference","(expression, difference = 1, message = nil, &block)","<p>Test numeric difference between the return value of an expression as a\nresult of what is evaluated in …\n"],["assert_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_directory","(relative, *contents)",""],["assert_dom_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_equal","(expected, actual, message = \"\")","<p>Test two HTML strings for equivalency (e.g., identical up to reordering of\nattributes)\n\n<pre># assert that the ...</pre>\n"],["assert_dom_not_equal","ActionDispatch::Assertions::DomAssertions","classes/ActionDispatch/Assertions/DomAssertions.html#method-i-assert_dom_not_equal","(expected, actual, message = \"\")","<p>The negated form of <code>assert_dom_equivalent</code>.\n\n<pre># assert that the referenced method does not generate the specified ...</pre>\n"],["assert_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_emails","(number)","<p>Asserts that the number of emails sent matches the given number.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">test_emails</span>\n  <span class=\"ruby-identifier\">assert_emails</span> <span class=\"ruby-value\">0</span>\n  <span class=\"ruby-constant\">ContactMailer</span>.<span class=\"ruby-identifier\">welcome</span>.<span class=\"ruby-identifier\">deliver</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_field_default_value","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_default_value","(attribute_type, value)","<p>Asserts the given attribute type gets a proper default value:\n\n<pre>assert_field_default_value :string, &quot;MyString&quot;</pre>\n"],["assert_field_type","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_field_type","(attribute_type, field_type)","<p>Asserts the given attribute type gets translated to a field type properly:\n\n<pre>assert_field_type :date, :date_select</pre>\n"],["assert_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_file","(relative, *contents)","<p>Asserts a given file exists. You need to supply an absolute path or a path\nrelative to the configured …\n"],["assert_generates","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_generates","(expected_path, options, defaults={}, extras = {}, message=nil)","<p>Asserts that the provided options can be used to generate the provided\npath. This is the inverse of  …\n"],["assert_index","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-assert_index","(index, where)",""],["assert_instance_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_instance_method","(method, content)","<p>Asserts the given method exists in the given content. When a block is\ngiven, it yields the content of …\n"],["assert_method","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_method","(method, content)",""],["assert_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_migration","(relative, *contents, &block)","<p>Asserts a given migration exists. You need to supply an absolute path or a\npath relative to the configured …\n"],["assert_no_difference","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_no_difference","(expression, message = nil, &block)","<p>Assertion that the numeric result of evaluating an expression is not\nchanged before and after invoking …\n"],["assert_no_directory","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_directory","(relative)",""],["assert_no_emails","ActionMailer::TestHelper","classes/ActionMailer/TestHelper.html#method-i-assert_no_emails","(&block)","<p>Assert that no emails have been sent.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">test_emails</span>\n  <span class=\"ruby-identifier\">assert_no_emails</span>\n  <span class=\"ruby-constant\">ContactMailer</span>.<span class=\"ruby-identifier\">welcome</span>.<span class=\"ruby-identifier\">deliver</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["assert_no_file","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_file","(relative)","<p>Asserts a given file does not exist. You need to supply an absolute path or\na path relative to the configured …\n"],["assert_no_migration","Rails::Generators::Testing::Assertions","classes/Rails/Generators/Testing/Assertions.html#method-i-assert_no_migration","(relative)","<p>Asserts a given migration does not exist. You need to supply an absolute\npath or a path relative to the …\n"],["assert_no_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_no_tag","(*opts)","<p>Identical to <code>assert_tag</code>, but asserts that a matching tag does\n<em>not</em> exist. (See <code>assert_tag</code> for a full discussion …\n"],["assert_not","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_not","(object, message = nil)","<p>Assert that an expression is not truthy. Passes if <code>object</code> is\n<code>nil</code> or <code>false</code>. “Truthy” means “considered …\n"],["assert_nothing_raised","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-i-assert_nothing_raised","(*args)","<p>Fails if the block raises an exception.\n\n<pre>assert_nothing_raised do\n  ...\nend</pre>\n"],["assert_present","ActiveSupport::Testing::Assertions","classes/ActiveSupport/Testing/Assertions.html#method-i-assert_present","(object, message=nil)","<p>Test if an expression is not blank. Passes if <code>object.present?</code>\nis <code>true</code>.\n\n<pre>assert_present({ data: &#39;x&#39; }) # ...</pre>\n"],["assert_recognizes","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_recognizes","(expected_options, path, extras={}, msg=nil)","<p>Asserts that the routing of the given <code>path</code> was handled\ncorrectly and that the parsed options (given in …\n"],["assert_redirected_to","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_redirected_to","(options = {}, message=nil)","<p>Assert that the redirection options passed in match those of the redirect\ncalled in the latest action. …\n"],["assert_response","ActionDispatch::Assertions::ResponseAssertions","classes/ActionDispatch/Assertions/ResponseAssertions.html#method-i-assert_response","(type, message = nil)","<p>Asserts that the response is one of the following types:\n<p><code>:success</code>   - Status code was in the 200-299 range …\n"],["assert_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-assert_routing","(path, options, defaults={}, extras={}, message=nil)","<p>Asserts that path and options match both ways; in other words, it verifies\nthat <code>path</code> generates <code>options</code> …\n"],["assert_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select","(*args, &block)","<p>An assertion that selects elements and makes one or more equality tests.\n<p>If the first argument is an element, …\n"],["assert_select_email","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_email","(&block)","<p>Extracts the body of an email and runs nested assertions on it.\n<p>You must enable deliveries for this assertion …\n"],["assert_select_encoded","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-assert_select_encoded","(element = nil, &block)","<p>Extracts the content of an element, treats it as encoded HTML and runs\nnested assertion on it.\n<p>You typically …\n"],["assert_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-assert_tag","(*opts)","<p>Asserts that there is a tag/node/element in the body of the response that\nmeets all of the given conditions. …\n"],["assert_template","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-assert_template","(options = {}, message = nil)","<p>Asserts that the request was rendered with the appropriate template file or\npartials.\n\n<pre># assert that the ...</pre>\n"],["assert_valid_keys","Hash","classes/Hash.html#method-i-assert_valid_keys","(*valid_keys)","<p>Validate all keys in a hash match <code>*valid_keys</code>, raising\nArgumentError on a mismatch. Note that keys are …\n"],["asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_path","(source, options = {})","<p>Computes the path to asset in public directory. If :type options is set, a\nfile extension will be appended …\n"],["asset_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-asset_url","(source, options = {})","<p>Computes the full URL to a asset in the public directory. This will use\n<code>asset_path</code> internally, so most …\n"],["assign_attributes","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-assign_attributes","(new_attributes)","<p>Allows you to set all the attributes by passing in a hash of attributes\nwith keys matching the attribute …\n"],["assigns","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-assigns","(key = nil)",""],["assume_migrated_upto_version","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-assume_migrated_upto_version","(version, migrations_paths = ActiveRecord::Migrator.migrations_paths)",""],["at","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-at","(secs)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from number of seconds …\n"],["at","String","classes/String.html#method-i-at","(position)","<p>If you pass a single Fixnum, returns a substring of one character at that\nposition. The first character …\n"],["at","Time","classes/Time.html#method-c-at","(*args)",""],["at_beginning_of_day","Date","classes/Date.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","DateTime","classes/DateTime.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_day","Time","classes/Time.html#method-i-at_beginning_of_day","()",""],["at_beginning_of_hour","DateTime","classes/DateTime.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_hour","Time","classes/Time.html#method-i-at_beginning_of_hour","()",""],["at_beginning_of_minute","DateTime","classes/DateTime.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_minute","Time","classes/Time.html#method-i-at_beginning_of_minute","()",""],["at_beginning_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_month","()",""],["at_beginning_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_quarter","()",""],["at_beginning_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_week","(start_day = Date.beginning_of_week)",""],["at_beginning_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_beginning_of_year","()",""],["at_end_of_day","Date","classes/Date.html#method-i-at_end_of_day","()",""],["at_end_of_day","DateTime","classes/DateTime.html#method-i-at_end_of_day","()",""],["at_end_of_day","Time","classes/Time.html#method-i-at_end_of_day","()",""],["at_end_of_hour","DateTime","classes/DateTime.html#method-i-at_end_of_hour","()",""],["at_end_of_hour","Time","classes/Time.html#method-i-at_end_of_hour","()",""],["at_end_of_minute","DateTime","classes/DateTime.html#method-i-at_end_of_minute","()",""],["at_end_of_minute","Time","classes/Time.html#method-i-at_end_of_minute","()",""],["at_end_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_month","()",""],["at_end_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_quarter","()",""],["at_end_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_week","(start_day = Date.beginning_of_week)",""],["at_end_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-at_end_of_year","()",""],["at_midnight","Date","classes/Date.html#method-i-at_midnight","()",""],["at_midnight","DateTime","classes/DateTime.html#method-i-at_midnight","()",""],["at_midnight","Time","classes/Time.html#method-i-at_midnight","()",""],["at_with_coercion","Time","classes/Time.html#method-c-at_with_coercion","(*args)","<p>Layers additional behavior on Time.at so that ActiveSupport::TimeWithZone\nand DateTime instances can …\n"],["at_without_coercion","Time","classes/Time.html#method-c-at_without_coercion","(*args)",""],["atom_feed","ActionView::Helpers::AtomFeedHelper","classes/ActionView/Helpers/AtomFeedHelper.html#method-i-atom_feed","(options = {}, &block)","<p>Adds easy defaults to writing Atom feeds with the Builder template engine\n(this does not work on ERB …\n"],["atomic_write","File","classes/File.html#method-c-atomic_write","(file_name, temp_dir = Dir.tmpdir)","<p>Write to a file atomically. Useful for situations where you don&#39;t want\nother processes or threads …\n"],["attach_to","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-attach_to","(namespace, subscriber=new, notifier=ActiveSupport::Notifications)","<p>Attach the subscriber to a namespace.\n"],["attachments","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-attachments","()","<p>Allows you to add attachments to an email, like so:\n\n<pre>mail.attachments[&#39;filename.jpg&#39;] = File.read(&#39;/path/to/filename.jpg&#39;)</pre>\n"],["attachments","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-attachments","()","<p>Access the message attachments list.\n"],["attr_internal","Module","classes/Module.html#method-i-attr_internal","(*attrs)",""],["attr_internal_accessor","Module","classes/Module.html#method-i-attr_internal_accessor","(*attrs)","<p>Declares an attribute reader and writer backed by an internally-named\ninstance variable.\n"],["attr_internal_reader","Module","classes/Module.html#method-i-attr_internal_reader","(*attrs)","<p>Declares an attribute reader backed by an internally-named instance\nvariable.\n"],["attr_internal_writer","Module","classes/Module.html#method-i-attr_internal_writer","(*attrs)","<p>Declares an attribute writer backed by an internally-named instance\nvariable.\n"],["attr_readonly","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-attr_readonly","(*attributes)","<p>Attributes listed as readonly will be used to create a new record but\nupdate operations will ignore these …\n"],["attribute_for_inspect","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_for_inspect","(attr_name)","<p>Returns an <code>#inspect</code>-like string for the value of the attribute\n<code>attr_name</code>. String attributes are truncated …\n"],["attribute_match","HTML::Selector","classes/HTML/Selector.html#method-i-attribute_match","(equality, value)","<p>Create a regular expression to match an attribute value based on the\nequality operator (=, ^=, |=, etc). …\n"],["attribute_method?","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method,\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_method-3F","(attribute)","<p>Returns <code>true</code> if <code>attribute</code> is an attribute method\nand table exists, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-attribute_method-3F","(attr_name)",""],["attribute_method_affix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_affix","(*affixes)","<p>Declares a method available for all attributes with the given prefix and\nsuffix. Uses <code>method_missing</code> …\n"],["attribute_method_prefix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_prefix","(*prefixes)","<p>Declares a method available for all attributes with the given prefix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_method_suffix","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-attribute_method_suffix","(*suffixes)","<p>Declares a method available for all attributes with the given suffix. Uses\n<code>method_missing</code> and <code>respond_to</code> …\n"],["attribute_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-attribute_missing","(match, *args, &block)","<p><code>attribute_missing</code> is like <code>method_missing</code>, but for\nattributes. When <code>method_missing</code> is called we check …\n"],["attribute_names","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_names","()","<p>Returns an array of names for the attributes available on this object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attribute_names","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-attribute_names","()","<p>Returns an array of column names as strings if it&#39;s not an abstract\nclass and table exists. Otherwise …\n"],["attribute_present?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attribute_present-3F","(attribute)","<p>Returns <code>true</code> if the specified <code>attribute</code> has been\nset by the user or by a database load and is neither …\n"],["attributes","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-attributes","()","<p>Returns a hash of all the attributes with their names as keys and the\nvalues of the attributes as values. …\n"],["attributes=","ActiveRecord::AttributeAssignment","classes/ActiveRecord/AttributeAssignment.html#method-i-attributes-3D","(new_attributes)",""],["attributes_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-attributes_before_type_cast","()","<p>Returns a hash of attributes before typecasting and deserialization.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Task</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n<span class=\"ruby-keyword\">end</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["attributes_hash","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-attributes_hash","()",""],["attributes_names","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-attributes_names","()",""],["audio_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_path","(source, options = {})","<p>Computes the path to an audio asset in the public audios directory. Full\npaths from the document root …\n"],["audio_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-audio_tag","(*sources)","<p>Returns an HTML audio tag for the <code>source</code>. The\n<code>source</code> can be full path or file that exists in your public …\n"],["audio_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-audio_url","(source, options = {})","<p>Computes the full URL to an audio asset in the public audios directory.\nThis will use <code>audio_path</code> internally, …\n"],["authenticate","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authenticate","(request, &login_procedure)",""],["authenticate","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authenticate","(request, realm, &password_procedure)","<p>Returns false on a valid response, true otherwise\n"],["authenticate","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authenticate","(controller, &login_procedure)","<p>If token Authorization header is present, call the login procedure with the\npresent token and options. …\n"],["authenticate","ActiveModel::SecurePassword::ClassMethods::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/ClassMethods/InstanceMethodsOnActivation.html#method-i-authenticate","(unencrypted_password)","<p>Returns <code>self</code> if the password is correct, otherwise\n<code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">User</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_secure_password</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["authenticate_or_request_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_or_request_with_http_basic","(realm = \"Application\", &login_procedure)",""],["authenticate_or_request_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_or_request_with_http_digest","(realm = \"Application\", &password_procedure)",""],["authenticate_or_request_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_or_request_with_http_token","(realm = \"Application\", &login_procedure)",""],["authenticate_with_http_basic","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-authenticate_with_http_basic","(&login_procedure)",""],["authenticate_with_http_digest","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-authenticate_with_http_digest","(realm = \"Application\", &password_procedure)","<p>Authenticate with HTTP Digest, returns true or false\n"],["authenticate_with_http_token","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-authenticate_with_http_token","(&login_procedure)",""],["authentication_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_header","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-authentication_request","(controller, realm)",""],["authentication_request","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-authentication_request","(controller, realm, message = nil)",""],["authentication_request","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-authentication_request","(controller, realm)","<p>Sets a WWW-Authenticate to let the client know a token is desired.\n<p>controller - ActionController::Base …\n"],["authorization","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-authorization","()","<p>Returns the authorization header regardless of whether it was specified\ndirectly or through one of the …\n"],["auto_discovery_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-auto_discovery_link_tag","(type = :rss, url_options = {}, tag_options = {})","<p>Returns a link tag that browsers and news readers can use to auto-detect an\nRSS or Atom feed. The <code>type</code> …\n"],["autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload","(const_name, path = @_at_path)",""],["autoload_at","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_at","(path)",""],["autoload_once","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_once","()",""],["autoload_once_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_once_paths","()",""],["autoload_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-autoload_paths","()",""],["autoload_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-autoload_paths","()",""],["autoload_under","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoload_under","(path)",""],["autoloads","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-autoloads","()",""],["available_action?","AbstractController::Base","classes/AbstractController/Base.html#method-i-available_action-3F","(action_name)","<p>Returns true if a method for the action is available and can be dispatched,\nfalse otherwise.\n<p>Notice that …\n"],["available_environments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-available_environments","()",""],["average","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-average","(column_name, options = {})","<p>Calculates the average value on a given column. Returns <code>nil</code> if\nthere&#39;s no row. See <code>calculate</code> for …\n"],["await","ActiveSupport::Concurrency::Latch","classes/ActiveSupport/Concurrency/Latch.html#method-i-await","()",""],["await_commit","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-await_commit","()",""],["backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend","()",""],["backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend","()",""],["backend=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-backend-3D","(name)",""],["backend=","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-backend-3D","(name)",""],["backtrace_cleaner","Rails","classes/Rails.html#method-c-backtrace_cleaner","()",""],["banner","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-banner","()","<p>Use Rails default banner.\n"],["base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-base_class","()","<p>Returns the class descending directly from ActiveRecord::Base, or an\nabstract class, if any, in the inheritance …\n"],["base_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_name","()","<p>Sets the base_name taking into account the current class namespace.\n"],["base_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-base_root","()","<p>Returns the base root for a common set of generators. This is used to\ndynamically guess the default source …\n"],["basename","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-basename","()",""],["becomes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes","(klass)","<p>Returns an instance of the specified <code>klass</code> with the attributes\nof the current record. This is mostly …\n"],["becomes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-becomes-21","(klass)","<p>Wrapper around <code>becomes</code> that also changes the instance&#39;s\nsti column value. This is especially useful …\n"],["before","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-before","(*args, &block)",""],["before","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-before","()",""],["before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-before_action","","<p>Append a callback before actions. See _insert_callbacks for parameter\ndetails. Aliased as before_filter. …\n"],["before_configuration","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_configuration","(&block)","<p>First configurable block to run. Called before any initializers are run.\n"],["before_eager_load","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_eager_load","(&block)","<p>Third configurable block to run. Does not run if\n<code>config.cache_classes</code> set to false.\n"],["before_filters","ActionController::Testing::ClassMethods","classes/ActionController/Testing/ClassMethods.html#method-i-before_filters","()",""],["before_initialize","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-before_initialize","(&block)","<p>Second configurable block to run. Called before frameworks initialize.\n"],["before_setup","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-before_setup","()",""],["before_setup","ActiveSupport::Testing::SetupAndTeardown","classes/ActiveSupport/Testing/SetupAndTeardown.html#method-i-before_setup","()",""],["before_validation","ActiveModel::Validations::Callbacks::ClassMethods","classes/ActiveModel/Validations/Callbacks/ClassMethods.html#method-i-before_validation","(*args, &block)","<p>Defines a callback that will get called right before validation happens.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_db_transaction","()",""],["begin_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins the transaction (and turns off auto-committing).\n"],["begin_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_db_transaction","()","<p>Begins a transaction.\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-begin_isolated_db_transaction","(isolation)",""],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)","<p>Begins the transaction with the isolation level set. Raises an error by\ndefault; adapters that support …\n"],["begin_isolated_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-begin_isolated_db_transaction","(isolation)",""],["beginning_of_day","Date","classes/Date.html#method-i-beginning_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["beginning_of_day","DateTime","classes/DateTime.html#method-i-beginning_of_day","()","<p>Returns a new DateTime representing the start of the day (0:00).\n"],["beginning_of_day","Time","classes/Time.html#method-i-beginning_of_day","()","<p>Returns a new Time representing the start of the day (0:00)\n"],["beginning_of_hour","DateTime","classes/DateTime.html#method-i-beginning_of_hour","()","<p>Returns a new DateTime representing the start of the hour (hh:00:00).\n"],["beginning_of_hour","Time","classes/Time.html#method-i-beginning_of_hour","()","<p>Returns a new Time representing the start of the hour (x:00)\n"],["beginning_of_minute","DateTime","classes/DateTime.html#method-i-beginning_of_minute","()","<p>Returns a new DateTime representing the start of the minute (hh:mm:00).\n"],["beginning_of_minute","Time","classes/Time.html#method-i-beginning_of_minute","()","<p>Returns a new Time representing the start of the minute (x:xx:00)\n"],["beginning_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_month","()","<p>Returns a new date/time at the start of the month. DateTime objects will\nhave a time set to 0:00.\n"],["beginning_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter","()","<p>Returns a new date/time at the start of the quarter. Example: 1st January,\n1st July, 1st October. DateTime …\n"],["beginning_of_week","Date","classes/Date.html#method-c-beginning_of_week","()","<p>Returns the week start (e.g. :monday) for the current request, if this has\nbeen set (via Date.beginning_of_week= …\n"],["beginning_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the start of this week on the given\nday. Week is assumed to start …\n"],["beginning_of_week=","Date","classes/Date.html#method-c-beginning_of_week-3D","(week_start)","<p>Sets <code>Date.beginning_of_week</code> to a week start (e.g. :monday) for\ncurrent request/thread.\n<p>This method accepts …\n"],["beginning_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-beginning_of_year","()","<p>Return a new date/time at the beginning of the year. Example: 1st January.\nDateTime objects will have …\n"],["behavior","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior","()","<p>Returns the current behavior or if one isn&#39;t set, defaults to\n<code>:stderr</code>.\n"],["behavior=","ActiveSupport::Deprecation::Behavior","classes/ActiveSupport/Deprecation/Behavior.html#method-i-behavior-3D","(behavior)","<p>Sets the behavior to the specified value. Can be a single value, array, or\nan object that responds to …\n"],["belongs_to","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-belongs_to","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if this class …\n"],["belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-belongs_to","(*args)",""],["belongs_to","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-belongs_to","(*args)",""],["belongs_to?","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-belongs_to-3F","(group)",""],["benchmark","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-benchmark","(message = \"Benchmarking\", options = {})","<p>Allows you to measure the execution time of a block in a template and\nrecords the result to the log. …\n"],["between?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-between-3F","(min, max)","<p>Returns true if the current object&#39;s time is within the specified\n<code>min</code> and <code>max</code> time.\n"],["bin","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-bin","()",""],["bin","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-bin","(force = false)",""],["bind","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-bind","(value)",""],["bind","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-bind","(context)",""],["blank?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-blank-3F","()","<p>aliases empty?\n"],["blank?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-blank-3F","()","<p>Returns true if relation is blank.\n"],["blank?","FalseClass","classes/FalseClass.html#method-i-blank-3F","()","<p><code>false</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","NilClass","classes/NilClass.html#method-i-blank-3F","()","<p><code>nil</code> is blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; true</span>\n</pre>\n"],["blank?","Object","classes/Object.html#method-i-blank-3F","()","<p>An object is blank if it&#39;s false, empty, or a whitespace string. For\nexample, &#39;&#39;, &#39;  …\n"],["blank?","String","classes/String.html#method-i-blank-3F","()","<p>A string is blank if it&#39;s empty or contains whitespaces only:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;&#39;</span>.<span class=\"ruby-identifier\">blank?</span>                 <span class=\"ruby-comment\"># =&gt; true ...</span>\n</pre>\n"],["blank?","TrueClass","classes/TrueClass.html#method-i-blank-3F","()","<p><code>true</code> is not blank:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">blank?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n</pre>\n"],["block_format","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-block_format","(text)","<p>Take the text and format it, indented two spaces for each line, and wrapped\nat 72 columns.\n"],["body","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-body","()","<p>The request body is an IO input stream. If the RAW_POST_DATA environment\nvariable is already set, wrap …\n"],["body","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body","()","<p>Returns the content of the response as a string. This contains the contents\nof any calls to <code>render</code>.\n"],["body","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-body","()","<p>Extended in activerecord-deprecated_finders\n"],["body","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-body","()",""],["body=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body-3D","(body)","<p>Allows you to manually set or override the response body.\n"],["body_parts","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-body_parts","()",""],["breakpoint","Kernel","classes/Kernel.html#method-i-breakpoint","()",""],["browser_generated_types","Mime::Type","classes/Mime/Type.html#method-c-browser_generated_types","()",""],["build","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-build","(app)",""],["build","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-build","(app = nil, &block)",""],["build","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-build","(app)",""],["build","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-build","(name, prefix, partial)",""],["build","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-build","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\n<code>attributes</code> and linked to …\n"],["build","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-build","(*args, &block)",""],["build","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-build","(klass, params=nil)","<p>GET new POST create\n"],["build_arel","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-build_arel","()","<p>Like #arel, but ignores the default scope of the model.\n"],["build_mem_cache","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-build_mem_cache","(*addresses)",""],["build_request","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-build_request","()",""],["build_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-build_response","()",""],["button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-button","(value = nil, options = {}, &block)","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag","(content_or_options = nil, options = nil, &block)","<p>Creates a button element that defines a <code>submit</code> button,\n<code>reset</code>button or a generic button which can be used …\n"],["button_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-button_to","(name = nil, options = nil, html_options = nil, &block)","<p>Generates a form containing a single button that submits to the URL created\nby the set of <code>options</code>. This …\n"],["button_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-button_to_function","(name, function=nil, html_options={})","<p>Returns a button whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["byte","Numeric","classes/Numeric.html#method-i-byte","()",""],["bytes","Numeric","classes/Numeric.html#method-i-bytes","()","<p>Enables the use of byte calculations and declarations, like 45.bytes +\n2.6.megabytes\n"],["cache","ActionController::Caching","classes/ActionController/Caching.html#method-i-cache","(key, options = {}, &block)","<p>Convenience accessor.\n"],["cache","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache","(name = {}, options = nil, &block)","<p>This helper exposes a method for caching fragments of a view rather than an\nentire action or page. This …\n"],["cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-cache","()","<p>Enable the query cache within the block.\n"],["cache","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-cache","(&block)","<p>Enable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["cache_attribute?","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the provided attribute is being cached.\n"],["cache_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cache_attributes","(*attribute_names)","<p><code>cache_attributes</code> allows you to declare which converted\nattribute values should be cached. Usually caching …\n"],["cache_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_fixtures","(connection, fixtures_map)",""],["cache_for_connection","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cache_for_connection","(connection)",""],["cache_fragment_name","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_fragment_name","(name = {}, options = nil)","<p>This helper returns the name of a cache key for a given fragment cache\ncall. By supplying skip_digest …\n"],["cache_if","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_if","(condition, name = {}, options = nil, &block)","<p>Cache fragments of a view if <code>condition</code> is true\n\n<pre>&lt;%= cache_if admin?, project do %&gt;\n  &lt;b&gt;All the topics ...</pre>\n"],["cache_key","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-cache_key","()","<p>Returns a cache key that can be used to identify this record.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Product</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">cache_key</span>     <span class=\"ruby-comment\"># =&gt; &quot;products/new&quot; ...</span>\n</pre>\n"],["cache_store","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store","()",""],["cache_store=","ActionController::Caching::ConfigMethods","classes/ActionController/Caching/ConfigMethods.html#method-i-cache_store-3D","(store)",""],["cache_template_loading","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading","()",""],["cache_template_loading=","ActionView::Base","classes/ActionView/Base.html#method-c-cache_template_loading-3D","(value)",""],["cache_unless","ActionView::Helpers::CacheHelper","classes/ActionView/Helpers/CacheHelper.html#method-i-cache_unless","(condition, name = {}, options = nil, &block)","<p>Cache fragments of a view unless <code>condition</code> is true\n\n<pre>&lt;%= cache_unless admin?, project do %&gt;\n  &lt;b&gt;All the ...</pre>\n"],["cached_attributes","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-cached_attributes","()","<p>Returns the attributes which are cached. By default time related columns\nwith datatype <code>:datetime, :timestamp,</code> …\n"],["cached_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-cached_fixtures","(connection, keys_to_fetch = nil)",""],["calculate","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-calculate","(operation, column_name, options = {})","<p>This calculates aggregate values in the given column. Methods for count,\nsum, average, minimum, and maximum …\n"],["calculate_ip","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-calculate_ip","()","<p>Sort through the various IP address headers, looking for the IP most likely\nto be the address of the …\n"],["call","ActionController::Metal","classes/ActionController/Metal.html#method-c-call","(env)","<p>Makes the controller a Rack endpoint that runs the action in the given\n<code>env</code>&#39;s <code>action_dispatch.request.path_parameters</code>\n…\n"],["call","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-i-call","(env)",""],["call","ActionController::Responder","classes/ActionController/Responder.html#method-c-call","(*args)","<p>Initializes a new responder an invoke the proper format. If the format is\nnot defined, call to_format. …\n"],["call","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-i-call","(env)",""],["call","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-i-call","(env)",""],["call","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-call","(env)",""],["call","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-i-call","(env)",""],["call","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-i-call","(env)",""],["call","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-i-call","(env)",""],["call","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-i-call","(env)","<p>Since the IP address may not be needed, we store the object here without\ncalculating the IP to keep from …\n"],["call","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-i-call","(env)",""],["call","ActionDispatch::SSL","classes/ActionDispatch/SSL.html#method-i-call","(env)",""],["call","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-i-call","(env)",""],["call","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-i-call","(env)",""],["call","ActionView::DependencyTracker::ERBTracker","classes/ActionView/DependencyTracker/ERBTracker.html#method-c-call","(name, template)",""],["call","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-call","(template)",""],["call","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-c-call","(template)",""],["call","ActionView::Template::Handlers::Raw","classes/ActionView/Template/Handlers/Raw.html#method-i-call","(template)",""],["call","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-i-call","(env)",""],["call","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-i-call","(env)",""],["call","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-i-call","(env)",""],["call","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-i-call","(name, start, finish, message_id, values)",""],["call","ActiveSupport::Logger::SimpleFormatter","classes/ActiveSupport/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["call","I18n::ExceptionHandler","classes/I18n/ExceptionHandler.html#method-i-call","(exception, locale, key, options)",""],["call","Logger::SimpleFormatter","classes/Logger/SimpleFormatter.html#method-i-call","(severity, timestamp, progname, msg)","<p>This method is invoked when a log event occurs\n"],["call","Rails::Application","classes/Rails/Application.html#method-i-call","(env)","<p>Implements call according to the Rack API. It simply dispatches the request\nto the underlying middleware …\n"],["call","Rails::Engine","classes/Rails/Engine.html#method-c-call","(env)","<p>Define the Rack API for this engine.\n"],["call","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-i-call","(env)",""],["call","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-call","(env)",""],["call","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call","(env)",""],["call_app","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-call_app","(request, env)",""],["camelcase","String","classes/String.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-camelize","(term, uppercase_first_letter = true)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to <code>camelize</code> is set to <code>:lower</code> …\n"],["camelize","String","classes/String.html#method-i-camelize","(first_letter = :upper)","<p>By default, <code>camelize</code> converts strings to UpperCamelCase. If\nthe argument to camelize is set to <code>:lower</code> …\n"],["capify!","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-capify-21","()","<p>Just run the capify command in root\n\n<pre>capify!</pre>\n"],["capitalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-capitalize","()","<p>Converts the first character to uppercase and the remainder to lowercase.\n\n<pre>&#39;über&#39;.mb_chars.capitalize.to_s ...</pre>\n"],["capture","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-capture","(*args)","<p>The capture method allows you to extract part of a template into a\nvariable. You can then use this variable …\n"],["capture","Kernel","classes/Kernel.html#method-i-capture","(stream)","<p>Captures the given stream and returns it:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">stream</span> = <span class=\"ruby-identifier\">capture</span>(:<span class=\"ruby-identifier\">stdout</span>) { <span class=\"ruby-identifier\">puts</span> <span class=\"ruby-string\">&#39;notice&#39;</span> }\n<span class=\"ruby-identifier\">stream</span> <span class=\"ruby-comment\"># =&gt; &quot;notice\\n&quot; ...</span>\n</pre>\n"],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_insensitive_comparison","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_insensitive_comparison","(table, attribute, column, value)",""],["case_sensitive_equality_operator","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-case_sensitive_equality_operator","()",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-case_sensitive_modifier","(node)",""],["case_sensitive_modifier","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-case_sensitive_modifier","(node)",""],["cattr_accessor","Class","classes/Class.html#method-i-cattr_accessor","(*syms, &blk)","<p>Defines both class and instance accessors for class attributes.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">cattr_accessor</span> :<span class=\"ruby-identifier\">hair_colors</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["cattr_reader","Class","classes/Class.html#method-i-cattr_reader","(*syms)","<p>Defines a class attribute if it&#39;s not defined and creates a reader\nmethod that returns the attribute …\n"],["cattr_writer","Class","classes/Class.html#method-i-cattr_writer","(*syms)","<p>Defines a class attribute if it&#39;s not defined and creates a writer\nmethod to allow assignment to …\n"],["cdata_block","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-cdata_block","(string)",""],["cdata_section","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-cdata_section","(content)","<p>Returns a CDATA section with the given <code>content</code>. CDATA sections\nare used to escape blocks of text containing …\n"],["change","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change","(column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change","Date","classes/Date.html#method-i-change","(options)","<p>Returns a new Date where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","DateTime","classes/DateTime.html#method-i-change","(options)","<p>Returns a new DateTime where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change","Time","classes/Time.html#method-i-change","(options)","<p>Returns a new Time where one or more of the elements have been changed\naccording to the <code>options</code> parameter. …\n"],["change_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column of a table.\n"],["change_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column","(table_name, column_name, type, options = {})","<p>Changes the column&#39;s definition according to the new options. See\nTableDefinition#column for details …\n"],["change_column_default","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_default","(table_name, column_name, default)",""],["change_column_default","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Changes the default value of a table column.\n"],["change_column_default","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_default","(table_name, column_name, default)","<p>Sets a new default value for a column:\n\n<pre>change_column_default(:suppliers, :qualification, &#39;new&#39;)\nchange_column_default(:accounts, ...</pre>\n"],["change_column_null","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-change_column_null","(table_name, column_name, null, default = nil)",""],["change_column_null","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_column_null","(table_name, column_name, null, default = nil)","<p>Sets or removes a +NOT NULL+ constraint on a column. The <code>null</code>\nflag indicates whether the value can be …\n"],["change_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-change_column_sql","(table_name, column_name, type, options = {})",""],["change_default","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-change_default","(column_name, default)","<p>Sets a new default value for a column. See\nSchemaStatements#change_column_default\n\n<pre>t.change_default(:qualification, ...</pre>\n"],["change_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table","(table_name, options = {})","<p>A block for changing columns in <code>table</code>.\n\n<pre># change_table() yields a Table instance\nchange_table(:suppliers) ...</pre>\n"],["change_table","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-change_table","(table_name, options = {})",""],["changed","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed","()","<p>Returns an array with the name of the attributes with unsaved changes.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed</span> <span class=\"ruby-comment\"># =&gt; []</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed?","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed-3F","()","<p>Returns <code>true</code> if any attribute have unsaved changes,\n<code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">changed?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["changed_attributes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changed_attributes","()","<p>Returns a hash of the attributes with unsaved changes indicating their\noriginal values like <code>attr =&gt;</code> …\n"],["changed_for_autosave?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-changed_for_autosave-3F","()","<p>Returns whether or not this record has been changed in any way (including\nwhether any of its nested autosave …\n"],["changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-changes","()","<p>Returns a hash of changed attributes indicating their original and new\nvalues like <code>attr =&gt; [original</code> …\n"],["characters","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-characters","(string)",""],["charset","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-charset","()","<p>Returns the database character set.\n"],["charset","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset","(*arguments)",""],["charset_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-charset_current","(environment = env)",""],["check_box","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-check_box","(method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-check_box","(object_name, method, options = {}, checked_value = \"1\", unchecked_value = \"0\")","<p>Returns a checkbox tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an object …\n"],["check_box_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-check_box_tag","(name, value = \"1\", checked = false, options = {})","<p>Creates a check box form input tag.\n<p>Options\n<p><code>:disabled</code> - If set to true, the user will not be able to use …\n"],["check_class_collision","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-c-check_class_collision","(options={})","<p>Add a class collisions name to be checked on class initialization. You can\nsupply a hash with a :prefix …\n"],["check_pending!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-check_pending-21","()",""],["checkin","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkin","(conn)","<p>Check-in a database connection back into the pool, indicating that you no\nlonger need this connection. …\n"],["checkout","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-checkout","()","<p>Check-out a database connection from the pool, indicating that you want to\nuse it. You should call #checkin …\n"],["children","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-children","()",""],["cidr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-cidr","(name, options = {})",""],["cidr_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-cidr_to_string","(object)",""],["civil_from_format","DateTime","classes/DateTime.html#method-c-civil_from_format","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0)","<p>Returns DateTime with local offset for given year if format is local else\noffset is zero.\n\n<pre>DateTime.civil_from_format ...</pre>\n"],["class","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-i-class","()",""],["class_attribute","Class","classes/Class.html#method-i-class_attribute","(*attrs)","<p>Declare a class-level attribute whose value is inheritable by subclasses.\nSubclasses can change their …\n"],["class_eval","Kernel","classes/Kernel.html#method-i-class_eval","(*args, &block)","<p>class_eval on an object acts like singleton_class.class_eval.\n"],["class_name","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-class_name","()","<p>Returns the class name for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns\n<code>&#39;Money&#39;</code> …\n"],["class_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_name","()",""],["class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-class_path","()",""],["classify","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-classify","(table_name)","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["classify","String","classes/String.html#method-i-classify","()","<p>Create a class name from a plural table name like Rails does for table\nnames to models. Note that this …\n"],["clean","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-clean","(backtrace, kind = :silent)","<p>Returns the backtrace after all filters and silencers have been run against\nit. Filters run first, then …\n"],["cleanup","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-cleanup","(options = nil)",""],["cleanup","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-cleanup","(options = nil)","<p>Cleanup the cache by removing expired entries.\n<p>Options are passed to the underlying cache implementation. …\n"],["cleanup!","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-cleanup-21","()","<p>Execute all cleanup callbacks.\n"],["clear","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-clear","()",""],["clear","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-clear","()","<p>Clear the error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_messages</span> <span class=\"ruby-comment\"># =&gt; [&quot;name can not be nil&quot;]</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">clear</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clear","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-clear","()","<p>Remove all elements from the queue.\n"],["clear","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-clear","()",""],["clear","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-clear","()",""],["clear","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-clear","(options = nil)","<p>Clear the entire cache on all memcached servers. This method should be used\nwith care when shared cache …\n"],["clear","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-clear","(options = nil)","<p>Clear the entire cache. Be careful with this method since it could affect\nother processes if shared cache …\n"],["clear","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-clear","(options = nil)",""],["clear","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-clear","()",""],["clear","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-clear","(scope = :all)","<p>Clears the loaded inflections within a given scope (default is\n<code>:all</code>). Give the scope as a symbol of the …\n"],["clear!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear-21","()","<p>Clears out internal caches\n"],["clear!","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-clear-21","()",""],["clear_action_methods!","AbstractController::Base","classes/AbstractController/Base.html#method-c-clear_action_methods-21","()","<p>action_methods are cached and there is sometimes need to refresh them.\nclear_action_methods! allows you …\n"],["clear_active_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_active_connections-21","()","<p>Returns any connections in use by the current thread back to the pool, and\nalso returns connections to …\n"],["clear_all_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_all_connections-21","()",""],["clear_cache","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-clear_cache","()",""],["clear_cache!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-clear_cache-21","()","<p>Clear any caching the database adapter may be doing, for example clearing\nthe prepared statement cache. …\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_cache!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-clear_cache-21","()","<p>Clears the prepared statements cache.\n"],["clear_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-clear_helpers","()","<p>Clears up all existing helpers in this class, only keeping the helper with\nthe same name as this class. …\n"],["clear_log","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-c-clear_log","()",""],["clear_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-clear_query_cache","()","<p>Clears the query cache.\n<p>One reason you may wish to call this method explicitly is between queries\nthat …\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_reloadable_connections!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-clear_reloadable_connections-21","()","<p>Clears the cache which maps classes.\n"],["clear_respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-clear_respond_to","()","<p>Clear all mime types in <code>respond_to</code>.\n"],["clear_table_cache!","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-clear_table_cache-21","(table_name)","<p>Clear out internal caches for table with <code>table_name</code>.\n"],["clear_validators!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-clear_validators-21","()","<p>Clears all of the validators and validations.\n<p>Note that this will clear anything that is being used to …\n"],["client_encoding","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-client_encoding","()","<p>Get the client encoding for this database\n"],["client_min_messages","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages","()","<p>Returns the current client message level.\n"],["client_min_messages=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-client_min_messages-3D","(level)","<p>Set the client message level.\n"],["clone","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-clone","","<p>Identical to Ruby&#39;s clone method.  This is a “shallow” copy.  Be warned\nthat your attributes …\n"],["clone_empty","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-clone_empty","()",""],["close","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-close","(unlink_now=false)","<p>Shortcut for <code>tempfile.close</code>.\n"],["close","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-close","()",""],["close","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-close","()","<p>Check the connection back in to the connection pool\n"],["close","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-i-close","()",""],["code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-code","()","<p>Returns a string to ensure compatibility with\n<code>Net::HTTPResponse</code>.\n"],["collation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-collation","()","<p>Returns the database collation strategy.\n"],["collation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-collation","()","<p>Returns the current database collation.\n"],["collation","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation","(*arguments)",""],["collation_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-collation_current","(environment = env)",""],["collection","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-collection","()","<p>To add a route to the collection:\n\n<pre>resources :photos do\n  collection do\n    get &#39;search&#39;\n  end\nend</pre>\n<p>This …\n"],["collection_check_boxes","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_check_boxes","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_check_boxes for\nform builders:\n\n<pre>&lt;%= form_for @post ...</pre>\n"],["collection_check_boxes","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_check_boxes","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns check box tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],["collection_radio_buttons","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_radio_buttons","(method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_radio_buttons for\nform builders:\n\n<pre>&lt;%= form_for ...</pre>\n"],["collection_radio_buttons","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_radio_buttons","(object, method, collection, value_method, text_method, options = {}, html_options = {}, &block)","<p>Returns radio button tags for the collection of existing return values of\n<code>method</code> for <code>object</code>&#39;s class. …\n"],["collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-collection_select","(method, collection, value_method, text_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#collection_select for form\nbuilders:\n\n<pre>&lt;%= form_for @post do ...</pre>\n"],["collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select","(object, method, collection, value_method, text_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code> and <code>&lt;option&gt;</code> tags\nfor the collection of existing return values of <code>method</code> …\n"],["color","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-color","(text, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to <code>true</code>, it also …\n"],["color_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-color_field","(object_name, method, options = {})","<p>Returns a text_field of type “color”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">color_field</span>(<span class=\"ruby-string\">&quot;car&quot;</span>, <span class=\"ruby-string\">&quot;color&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;car_color&quot; ...</span>\n</pre>\n"],["color_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-color_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “color”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["colorize_logging","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging","()",""],["colorize_logging=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-colorize_logging-3D","(val)",""],["column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-column","(name, type = nil, options = {})",""],["column","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column","(column_name, type, options = {})","<p>Adds a new column to the named table. See TableDefinition#column for\ndetails of the options you can use. …\n"],["column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-column","(name, type, options = {})","<p>Instantiates a new column for the table. The <code>type</code> parameter is\nnormally one of the migrations native …\n"],["column_defaults","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-column_defaults","()",""],["column_defaults","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_defaults","()","<p>Returns a hash where the keys are column names and the values are default\nvalues when instantiating the …\n"],["column_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-column_exists-3F","(table_name, column_name, type = nil, options = {})","<p>Checks to see if a column exists in a given table.\n\n<pre># Check a column exists\ncolumn_exists?(:suppliers, ...</pre>\n"],["column_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-column_exists-3F","(column_name, type = nil, options = {})","<p>Checks to see if a column exists. See SchemaStatements#column_exists?\n"],["column_for_attribute","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-column_for_attribute","(name)","<p>Returns the column object for the named attribute. Returns <code>nil</code>\nif the named attribute not exists.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["column_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-column_name_length","()","<p>Returns the maximum length of a column name.\n"],["column_names","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-column_names","()","<p>Returns an array of column names as strings.\n"],["column_spec","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-column_spec","(column, types)",""],["columns","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns the list of all column definitions for a table.\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns","(table = nil)","<p>Get the columns for a table\n"],["columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns","(table_name)","<p>Returns an array of Column objects for the table specified by\n<code>table_name</code>. See the concrete implementation …\n"],["columns","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-columns","()",""],["columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns","()","<p>Returns an array of column objects for the table associated with this\nclass.\n"],["columns_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-columns_for_remove","(table_name, *column_names)",""],["columns_hash","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-columns_hash","(table = nil)","<p>Get the columns for a table as a hash, key is the column name value is the\ncolumn object.\n"],["columns_hash","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-columns_hash","()","<p>Returns a hash of column objects for the table associated with this class.\n"],["columns_per_multicolumn_index","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_multicolumn_index","()","<p>Returns the maximum number of columns in a multicolumn index.\n"],["columns_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-columns_per_table","()","<p>Returns the maximum number of columns per table.\n"],["commit!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-commit-21","()",""],["commit_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits the transaction (and turns on auto-committing).\n"],["commit_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-commit_db_transaction","()","<p>Commits a transaction.\n"],["committed?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-committed-3F","()",""],["committed?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-committed-3F","()",""],["comparable_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-comparable_time","()",""],["compare_with_coercion","Date","classes/Date.html#method-i-compare_with_coercion","(other)","<p>Allow Date to be compared with Time by converting to DateTime and relying\non the &lt;=&gt; from there. …\n"],["compare_with_coercion","Time","classes/Time.html#method-i-compare_with_coercion","(other)","<p>Layers additional behavior on Time#&lt;=&gt; so that DateTime and\nActiveSupport::TimeWithZone instances …\n"],["compare_without_coercion","Date","classes/Date.html#method-i-compare_without_coercion","(other)",""],["compare_without_coercion","Time","classes/Time.html#method-i-compare_without_coercion","(other)",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-i-compile_methods-21","()",""],["compile_methods!","ActiveSupport::Configurable::Configuration","classes/ActiveSupport/Configurable/Configuration.html#method-c-compile_methods-21","(keys)","<p>Compiles reader methods so we don&#39;t have to go through method_missing.\n"],["component_root_dir","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-component_root_dir","(gem_name)",""],["component_root_dir","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-component_root_dir","(component)",""],["compose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-compose","()","<p>Performs composition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                       <span class=\"ruby-comment\"># =&gt; 3</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">compose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["compose","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-compose","(codepoints)","<p>Compose decomposed characters to the composed form.\n"],["composed_of","ActiveRecord::Aggregations::ClassMethods","classes/ActiveRecord/Aggregations/ClassMethods.html#method-i-composed_of","(part_id, options = {})","<p>Adds reader and writer methods for manipulating a value object:\n<code>composed_of :address</code> adds <code>address</code> and …\n"],["compress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-compress","(source, level=Zlib::DEFAULT_COMPRESSION, strategy=Zlib::DEFAULT_STRATEGY)","<p>Compresses a string using gzip.\n"],["compute_asset_extname","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_extname","(source, options = {})","<p>Compute extname to append to asset path. Returns nil if nothing should be\nadded.\n"],["compute_asset_host","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_host","(source = \"\", options = {})","<p>Pick an asset host for this source. Returns <code>nil</code> if no host is\nset, the host if no wildcard is set, the …\n"],["compute_asset_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-compute_asset_path","(source, options = {})","<p>Computes asset path to public directory. Plugins and extensions can\noverride this method to point to …\n"],["compute_tags","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-compute_tags","(request)",""],["compute_type","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-compute_type","(type_name)","<p>Returns the class type of the record using the current module as a prefix.\nSo descendants of MyApp::Business::Account …\n"],["concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-concat","(string)","<p>The preferred method of outputting text in your views is to use the &lt;%=\n“text” %&gt; eRuby …\n"],["concat","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-concat","(*records)","<p>Add one or more records to the collection by setting their foreign keys to\nthe association&#39;s primary …\n"],["concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-concat","(value)",""],["concat","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-concat","(paths)",""],["concern","ActionDispatch::Routing::Mapper::Concerns","classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concern","(name, callable = nil, &block)","<p>Define a routing concern using a name.\n<p>Concerns may be defined inline, using a block, or handled by another …\n"],["concerns","ActionDispatch::Routing::Mapper::Concerns","classes/ActionDispatch/Routing/Mapper/Concerns.html#method-i-concerns","(*args)","<p>Use the named concerns\n\n<pre>resources :posts do\n  concerns :commentable\nend</pre>\n<p>concerns also work in any routes …\n"],["config","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-config","()",""],["config","ActiveSupport::Configurable","classes/ActiveSupport/Configurable.html#method-i-config","()","<p>Reads and writes attributes from a configuration <code>OrderedHash</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;active_support/configurable&#39;</span>\n\n<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["config","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config","()",""],["config","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-config","()",""],["config","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-config","()",""],["config","Rails::Engine","classes/Rails/Engine.html#method-c-config","()","<p>Define the configuration object for the engine.\n"],["config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-config","()",""],["config","Rails::Railtie","classes/Rails/Railtie.html#method-i-config","()",""],["config_accessor","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-config_accessor","(*names)","<p>Allows you to add shortcut so that you don&#39;t have to refer to attribute\nthrough config. Also look …\n"],["configru","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-configru","()",""],["configuration","Rails","classes/Rails.html#method-c-configuration","()","<p>The Configuration instance used to configure the Rails environment\n"],["configure","ActiveSupport::Configurable::ClassMethods","classes/ActiveSupport/Configurable/ClassMethods.html#method-i-configure","()",""],["configure","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-configure","(&block)",""],["configure_rdoc_files","Rails::API::Task","classes/Rails/API/Task.html#method-i-configure_rdoc_files","()",""],["connected?","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connected-3F","(klass)","<p>Returns true if a connection that&#39;s accessible to this class has\nalready been opened.\n"],["connected?","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connected-3F","()","<p>Returns true if a connection has already been opened.\n"],["connected?","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connected-3F","()","<p>Returns <code>true</code> if Active Record is connected.\n"],["connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-connection","()","<p>Retrieve the connection associated with the current thread, or call\n#checkout to obtain one if necessary. …\n"],["connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection","()","<p>Returns the connection currently associated with the class. This can also\nbe used to “borrow” …\n"],["connection","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-connection","()",""],["connection_config","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_config","()","<p>Returns the configuration of the associated connection as a hash:\n\n<pre>ActiveRecord::Base.connection_config ...</pre>\n"],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler","()",""],["connection_handler","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-connection_handler","()",""],["connection_handler=","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-connection_handler-3D","(handler)",""],["connection_id","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id","()",""],["connection_id=","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_id-3D","(connection_id)",""],["connection_pool","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-connection_pool","()",""],["connection_pool_list","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pool_list","()",""],["connection_pools","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-connection_pools","()",""],["console","Rails::Railtie","classes/Rails/Railtie.html#method-c-console","(&blk)",""],["const_missing","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-c-const_missing","(name)",""],["constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Module&#39;</span>.<span class=\"ruby-identifier\">constantize</span>     <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["constantize","String","classes/String.html#method-i-constantize","()","<p><code>constantize</code> tries to find a declared constant with the name\nspecified in the string. It raises a NameError …\n"],["constraints","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-constraints","(constraints = {})","<p>Parameter Restriction\n<p>Allows you to constrain the nested routes based on a set of rules. For\ninstance, …\n"],["constraints","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-constraints","()",""],["construct_join_dependency_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_join_dependency_for_association_find","()",""],["construct_limited_ids_condition","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_limited_ids_condition","(relation)",""],["construct_relation_for_association_calculations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_calculations","()",""],["construct_relation_for_association_find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-construct_relation_for_association_find","(join_dependency)",""],["consumes?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-consumes-3F","(string)","<p>Returns <code>true</code> when the proxy class can handle the string.\nReturns <code>false</code> otherwise.\n"],["contains_bad_protocols?","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-contains_bad_protocols-3F","(attr_name, value)",""],["content_columns","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-content_columns","()","<p>Returns an array of column objects where the primary id, all columns ending\nin “_id” or “_count”, …\n"],["content_for","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for","(name, content = nil, options = {}, &block)","<p>Calling content_for stores a block of markup in an identifier for later\nuse. In order to access this …\n"],["content_for?","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-content_for-3F","(name)","<p>content_for? checks whether any content has been captured yet using\n`content_for`. Useful to render parts …\n"],["content_length","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-content_length","()","<p>Returns the content length of the request as an integer.\n"],["content_mime_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_mime_type","()","<p>The MIME type of the HTTP request, such as Mime::XML.\n<p>For backward compatibility, the post format is extracted …\n"],["content_tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-content_tag","(*)",""],["content_tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-content_tag","(name, content_or_options_with_block = nil, options = nil, escape = true, &block)","<p>Returns an HTML block tag of type <code>name</code> surrounding the\n<code>content</code>. Add HTML attributes by passing an attributes …\n"],["content_tag_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for","(tag_name, single_or_multiple_records, prefix = nil, options = nil, &block)","<p>content_tag_for creates an HTML element with id and class parameters that\nrelate to the specified Active …\n"],["content_type","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type","()",""],["content_type","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-content_type","()",""],["content_type=","ActionController::Metal","classes/ActionController/Metal.html#method-i-content_type-3D","(type)","<p>Basic implementations for content_type=, location=, and headers are\nprovided to reduce the dependency …\n"],["content_type=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-content_type-3D","(content_type)",""],["controller","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-controller","(controller, options={})","<p>Scopes routes to a specific controller\n\n<pre>controller &quot;food&quot; do\n  match &quot;bacon&quot;, action: &quot;bacon&quot;\nend</pre>\n"],["controller","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-controller","()",""],["controller","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-controller","()",""],["controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class","()",""],["controller_class=","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-controller_class-3D","(new_class)",""],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-i-controller_name","()","<p>Delegates to the class&#39; <code>controller_name</code>\n"],["controller_name","ActionController::Metal","classes/ActionController/Metal.html#method-c-controller_name","()","<p>Returns the last part of the controller&#39;s name, underscored, without\nthe ending <code>Controller</code>. For instance, …\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-i-controller_path","()","<p>Delegates to the class&#39; #controller_path\n"],["controller_path","AbstractController::Base","classes/AbstractController/Base.html#method-c-controller_path","()","<p>Returns the full controller name, underscored, without the ending\nController. For instance, MyApp::MyPostsController …\n"],["controller_path","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-controller_path","()",""],["controller_path=","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-i-controller_path-3D","(path)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_key","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_key","(key)",""],["convert_to_model","ActionController::ModelNaming","classes/ActionController/ModelNaming.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["convert_to_model","ActionView::ModelNaming","classes/ActionView/ModelNaming.html#method-i-convert_to_model","(object)","<p>Converts the given object to an ActiveModel compliant one.\n"],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, options = {})",""],["convert_value","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-convert_value","(value, options = {})",""],["cookie_jar","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-cookie_jar","()",""],["cookies","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-cookies","()","<p>A map of the cookies returned by the last response, and which will be sent\nwith the next request.\n"],["cookies","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-cookies","()","<p>Returns the response cookies, converted to a Hash of (name =&gt; value)\npairs\n\n<pre>assert_equal &#39;AuthorOfNewPage&#39;, ...</pre>\n"],["cookies","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-cookies","()",""],["cookies","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-cookies","()",""],["copy","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-copy","(destination, sources, options = {})",""],["count","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-count","()","<p>Returns the number of error messages.\n\n<pre>person.errors.add(:name, &quot;can&#39;t be blank&quot;)\nperson.errors.count # ...</pre>\n"],["count","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-count","(column_name = nil, options = {})","<p>Count all records using SQL.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">count</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["count","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-count","(column_name = nil, options = {})","<p>Count the records.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>\n<span class=\"ruby-comment\"># =&gt; the total count of all people</span>\n\n<span class=\"ruby-constant\">Person</span>.<span class=\"ruby-identifier\">count</span>(:<span class=\"ruby-identifier\">age</span>)\n<span class=\"ruby-comment\"># =&gt; returns the ...</span>\n</pre>\n"],["count_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-count_by_sql","(sql)","<p>Returns the result of an SQL statement that should only include a COUNT(*)\nin the SELECT part. The use …\n"],["create","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create","(attributes = {}, &block)","<p>Returns a new object of the collection type that has been instantiated with\nattributes, linked to this …\n"],["create","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-create","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["create","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-create","()",""],["create","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create","(attributes = nil, &block)","<p>Creates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create","(*args, &block)","<p>Tries to create a new record with the same scoped attributes defined in the\nrelation. Returns the initialized …\n"],["create","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create","(*arguments)",""],["create","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-create","(name, utc_offset = nil, tzinfo = nil)",""],["create!","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-create-21","(attributes = {}, &block)","<p>Like <code>create</code>, except that if the record is invalid, raises an\nexception.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["create!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-create-21","(*args, &block)","<p>Similar to #create, but calls <code>create!</code> on the base class.\nRaises an exception if a validation error occurs. …\n"],["create!","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-create-21","(attributes = nil, &block)","<p>Creates an object just like Base.create but calls <code>save!</code>\ninstead of <code>save</code> so an exception is raised if …\n"],["create_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_all","()",""],["create_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_current","(environment = env)",""],["create_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_database","(name, options = {})","<p>Create a new MySQL database with optional <code>:charset</code> and\n<code>:collation</code>. Charset defaults to utf8.\n<p>Example: …\n"],["create_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_database","(name, options = {})","<p>Create a new PostgreSQL database. Options include <code>:owner</code>,\n<code>:template</code>, <code>:encoding</code>, <code>:collation</code>,\n<code>:ctype</code>,  …\n"],["create_database_url","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-create_database_url","()",""],["create_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-create_fixtures","(fixtures_directory, fixture_set_names, class_names = {})",""],["create_fixtures","Object","classes/Object.html#method-i-create_fixtures","(*fixture_set_names, &block)",""],["create_generated_attribute","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-create_generated_attribute","(attribute_type, name = 'test', index = nil)","<p>Create a Rails::Generators::GeneratedAttribute by supplying the attribute\ntype and, optionally, the attribute …\n"],["create_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table","(table_1, table_2, options = {})","<p>Creates a new join table with the name created using the lexical order of\nthe first two arguments. These …\n"],["create_reflection","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-create_reflection","(macro, name, scope, options, active_record)",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-create_savepoint","()",""],["create_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-create_savepoint","()",""],["create_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-create_schema","(schema_name)","<p>Creates a schema for the given schema name.\n"],["create_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_table","(table_name, options = {})","<p>Creates a new table with the name <code>table_name</code>.\n<code>table_name</code> may either be a String or a Symbol.\n<p>There are …\n"],["create_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-create_table","(limit=nil)",""],["create_with","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-create_with","(value)","<p>Sets attributes to be used when creating new records from a relation\nobject.\n\n<pre>users = User.where(name: ...</pre>\n"],["csrf_meta_tag","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tag","()","<p>For backwards compatibility.\n"],["csrf_meta_tags","ActionView::Helpers::CsrfHelper","classes/ActionView/Helpers/CsrfHelper.html#method-i-csrf_meta_tags","()","<p>Returns meta tags “csrf-param” and “csrf-token” with the name of the\ncross-site request …\n"],["css_select","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-css_select","(*args)","<p>Select and return all matching elements.\n<p>If called with a single argument, uses that argument as a selector …\n"],["ctype","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-ctype","()","<p>Returns the current database ctype.\n"],["current","Date","classes/Date.html#method-c-current","()","<p>Returns Time.zone.today when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns Date.today …\n"],["current","DateTime","classes/DateTime.html#method-c-current","()","<p>Returns <code>Time.zone.now.to_datetime</code> when <code>Time.zone</code>\nor <code>config.time_zone</code> are set, otherwise returns\n<code>Time.now</code> …\n"],["current","Time","classes/Time.html#method-c-current","()","<p>Returns <code>Time.zone.now</code> when <code>Time.zone</code> or\n<code>config.time_zone</code> are set, otherwise just returns\n<code>Time.now</code>.\n"],["current_config","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-current_config","(options = {})",""],["current_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-current_cycle","(name = \"default\")","<p>Returns the current cycle string after a cycle has been started. Useful for\ncomplex table highlighting …\n"],["current_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-current_database","()",""],["current_database","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_database","()","<p>Returns the current database name.\n"],["current_hash","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-current_hash","()",""],["current_hash","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-current_hash","()",""],["current_page?","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-current_page-3F","(options)","<p>True if the current request URI was generated by the given\n<code>options</code>.\n<p>Examples\n<p>Let&#39;s say we&#39;re in …\n"],["current_savepoint_name","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-current_savepoint_name","()",""],["current_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-current_schema","()","<p>Returns the current schema name.\n"],["custom","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-custom","(mime_type, &block)",""],["custom","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-i-custom","(mime, options = {})",""],["cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-cycle","(first_value, *values)","<p>Creates a Cycle object whose <em>to_s</em> method cycles through elements\nof an array every time it is called. …\n"],["dangerous_attribute_method?","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-dangerous_attribute_method-3F","(method_name)",""],["dasherize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-dasherize","(underscored_word)","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;puni_puni&#39;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["dasherize","String","classes/String.html#method-i-dasherize","()","<p>Replaces underscores with dashes in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;puni_puni&#39;</span>.<span class=\"ruby-identifier\">dasherize</span> <span class=\"ruby-comment\"># =&gt; &quot;puni-puni&quot;</span>\n</pre>\n"],["database_configuration","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-database_configuration","()","<p>Loads and returns the configuration of the database.\n"],["database_yml","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-database_yml","()",""],["date","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date","()",""],["date=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3D","(utc_time)",""],["date?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-date-3F","()",""],["date_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-date_field","(object_name, method, options = {})","<p>Returns a text_field of type “date”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">date_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;born_on&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_born_on&quot; ...</span>\n</pre>\n"],["date_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-date_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “date”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["date_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-date_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, and day) pre-selected\nfor accessing a specified date-based …\n"],["date_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-date_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#date_select for form builders:\n\n<pre>&lt;%= form_for @person do |f| %&gt;\n  ...</pre>\n"],["daterange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-daterange","(name, options = {})",""],["datetime_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_field","(object_name, method, options = {})","<p>Returns a text_field of type “datetime”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">datetime_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;born_on&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_born_on&quot; ...</span>\n</pre>\n"],["datetime_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “datetime”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["datetime_local_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-datetime_local_field","(object_name, method, options = {})","<p>Returns a text_field of type “datetime-local”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">datetime_local_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;born_on&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["datetime_local_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-datetime_local_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “datetime-local”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["datetime_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-datetime_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for year, month, day, hour, and minute)\npre-selected for accessing …\n"],["datetime_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-datetime_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#datetime_select for form builders:\n\n<pre>&lt;%= form_for @person do |f| %&gt; ...</pre>\n"],["day","Numeric","classes/Numeric.html#method-i-day","()",""],["days","Numeric","classes/Numeric.html#method-i-days","()",""],["days_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_ago","(days)","<p>Returns a new date/time the specified number of days ago.\n"],["days_in_month","Time","classes/Time.html#method-c-days_in_month","(month, year = now.year)","<p>Return the number of days in the given month. If no year is specified, it\nwill use the current year. …\n"],["days_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_since","(days)","<p>Returns a new date/time the specified number of days in the future.\n"],["days_to_week_start","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-days_to_week_start","(start_day = Date.beginning_of_week)","<p>Returns the number of days to the start of the week on the given day. Week\nis assumed to start on <code>start_day</code> …\n"],["db","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-db","()",""],["debug","ActionView::Helpers::DebugHelper","classes/ActionView/Helpers/DebugHelper.html#method-i-debug","(object)","<p>Returns a YAML representation of <code>object</code> wrapped with\n&lt;pre&gt; and &lt;/pre&gt;. If the object cannot …\n"],["debugger","Kernel","classes/Kernel.html#method-i-debugger","()","<p>Starts a debugging session if the <code>debugger</code> gem has been loaded\n(call rails server –debugger to do load …\n"],["debugger?","Rails::Console","classes/Rails/Console.html#method-i-debugger-3F","()",""],["decode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-decode","(json, options ={})","<p>Parses a JSON string (JavaScript Object Notation) into a hash. See\nwww.json.org for more info.\n\n<pre>ActiveSupport::JSON.decode(&quot;{\\&quot;team\\&quot;:\\&quot;rails\\&quot;,\\&quot;players\\&quot;:\\&quot;36\\&quot;}&quot;) ...</pre>\n"],["decode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-decode_credentials","(request)",""],["decode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials","(header)",""],["decode_credentials_header","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-decode_credentials_header","(request)",""],["decompose","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-decompose","()","<p>Performs canonical decomposition on all the characters.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">length</span>                         <span class=\"ruby-comment\"># =&gt; 2</span>\n<span class=\"ruby-string\">&#39;é&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">decompose</span>.<span class=\"ruby-identifier\">to_s</span>.<span class=\"ruby-identifier\">length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["decompose","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-decompose","(type, codepoints)","<p>Decompose composed characters to the decomposed form.\n"],["decompress","ActiveSupport::Gzip","classes/ActiveSupport/Gzip.html#method-c-decompress","(source)","<p>Decompresses a gzipped string.\n"],["deconstantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-deconstantize","(path)","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&#39;Net::HTTP&#39;.deconstantize   ...</pre>\n"],["deconstantize","String","classes/String.html#method-i-deconstantize","()","<p>Removes the rightmost segment from the constant expression in the string.\n\n<pre>&#39;Net::HTTP&#39;.deconstantize   ...</pre>\n"],["decrement","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and\nsubtracts the value passed as <code>by</code> (default is 1). The decrement\n…\n"],["decrement","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n"],["decrement","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-decrement","(name, amount = 1, options = nil)",""],["decrement","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-decrement","(name, amount = 1, options = nil)","<p>Decrement an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["decrement!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-decrement-21","(attribute, by = 1)","<p>Wrapper around <code>decrement</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["decrement_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-decrement_counter","(counter_name, id)","<p>Decrement a numeric field by one, via a direct SQL update.\n<p>This works the same as increment_counter but …\n"],["decrement_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-decrement_open_transactions","()",""],["decrypt_and_verify","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-decrypt_and_verify","(value)","<p>Decrypt and verify a message. We need to verify the message in order to\navoid padding attacks. Reference: …\n"],["deep_dup","Array","classes/Array.html#method-i-deep_dup","()","<p>Returns a deep copy of array.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">array</span> = [<span class=\"ruby-value\">1</span>, [<span class=\"ruby-value\">2</span>, <span class=\"ruby-value\">3</span>]]\n<span class=\"ruby-identifier\">dup</span>   = <span class=\"ruby-identifier\">array</span>.<span class=\"ruby-identifier\">deep_dup</span>\n<span class=\"ruby-identifier\">dup</span>[<span class=\"ruby-value\">1</span>][<span class=\"ruby-value\">2</span>] = <span class=\"ruby-value\">4</span>\n\n<span class=\"ruby-identifier\">array</span>[<span class=\"ruby-value\">1</span>][<span class=\"ruby-value\">2</span>] <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["deep_dup","Hash","classes/Hash.html#method-i-deep_dup","()","<p>Returns a deep copy of hash.\n\n<pre>hash = { a: { b: &#39;b&#39; } }\ndup  = hash.deep_dup\ndup[:a][:c] = &#39;c&#39;\n\nhash[:a][:c] ...</pre>\n"],["deep_dup","Object","classes/Object.html#method-i-deep_dup","()","<p>Returns a deep copy of object if it&#39;s duplicable. If it&#39;s not\nduplicable, returns <code>self</code>.\n\n<pre>object ...</pre>\n"],["deep_merge","Hash","classes/Hash.html#method-i-deep_merge","(other_hash, &block)","<p>Returns a new hash with <code>self</code> and <code>other_hash</code>\nmerged recursively.\n\n<pre>h1 = { x: { y: [4,5,6] }, z: [7,8,9] } ...</pre>\n"],["deep_merge!","Hash","classes/Hash.html#method-i-deep_merge-21","(other_hash, &block)","<p>Same as <code>deep_merge</code>, but modifies <code>self</code>.\n"],["deep_munge","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-deep_munge","(hash)","<p>Remove nils from the params hash\n"],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys","()",""],["deep_stringify_keys","Hash","classes/Hash.html#method-i-deep_stringify_keys","()","<p>Return a new hash with all keys converted to strings. This includes the\nkeys from the root hash and from …\n"],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_stringify_keys-21","()",""],["deep_stringify_keys!","Hash","classes/Hash.html#method-i-deep_stringify_keys-21","()","<p>Destructively convert all keys to strings. This includes the keys from the\nroot hash and from all nested …\n"],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-deep_symbolize_keys","()",""],["deep_symbolize_keys","Hash","classes/Hash.html#method-i-deep_symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>. This includes …\n"],["deep_symbolize_keys!","Hash","classes/Hash.html#method-i-deep_symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>. This includes the keys …\n"],["deep_transform_keys","Hash","classes/Hash.html#method-i-deep_transform_keys","(&block)","<p>Return a new hash with all keys converted by the block operation. This\nincludes the keys from the root …\n"],["deep_transform_keys!","Hash","classes/Hash.html#method-i-deep_transform_keys-21","(&block)","<p>Destructively convert all keys by using the block operation. This includes\nthe keys from the root hash …\n"],["default","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default","(value = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-default","(key = nil)",""],["default_action","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_action","()","<p>By default, render the <code>:edit</code> action for HTML requests with\nerrors, unless the verb was POST.\n"],["default_aliases_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_aliases_for_option","(name, options)","<p>Return default aliases for the option name given doing a lookup in\nRails::Generators.aliases.\n"],["default_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_for_option","(config, name, options, default)","<p>Return default for the option name given doing a lookup in config.\n"],["default_generator_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_generator_root","()",""],["default_hsts_options","ActionDispatch::SSL","classes/ActionDispatch/SSL.html#method-c-default_hsts_options","()",""],["default_i18n_subject","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-default_i18n_subject","(interpolations = {})","<p>Translates the <code>subject</code> using Rails I18n class under\n<code>[mailer_scope, action_name]</code> scope. If it does not …\n"],["default_inspect","Date","classes/Date.html#method-i-default_inspect","()",""],["default_inspect","DateTime","classes/DateTime.html#method-i-default_inspect","()",""],["default_options","Rails::Server","classes/Rails/Server.html#method-i-default_options","()",""],["default_options=","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-default_options-3D","(value = nil)","<p>Allows to set defaults through app configuration:\n\n<pre>config.action_mailer.default_options = { from: &quot;no-reply@example.org&quot; ...</pre>\n"],["default_primary_key_type","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-default_primary_key_type","()",""],["default_render","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-default_render","(*args)",""],["default_render","ActionController::Responder","classes/ActionController/Responder.html#method-i-default_render","()","<p>If a response block was given, use it, otherwise call render on controller.\n"],["default_scope","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-default_scope","(scope = nil)","<p>Use this macro in your model to set a default scope for all operations on\nthe model.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Article</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["default_scopes?","ActiveRecord::Scoping::Default","classes/ActiveRecord/Scoping/Default.html#method-c-default_scopes-3F","()",""],["default_sequence_name","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-default_sequence_name","(table, column)",""],["default_source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_source_root","()","<p>Returns the default source root for a given generator. This is used\ninternally by rails to set its generators …\n"],["default_url_options","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options","()",""],["default_url_options","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options","(options)",""],["default_url_options=","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-default_url_options-3D","(options)",""],["default_url_options=","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-default_url_options-3D","(options)",""],["default_value_for_option","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-default_value_for_option","(name, options)","<p>Return the default value for the option name given doing a lookup in\nRails::Generators.options.\n"],["defaults","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-defaults","(defaults = {})","<p>Allows you to set default parameters for a route, such as this:\n\n<pre>defaults id: &#39;home&#39; do\n  match &#39;scoped_pages/(:id)&#39;, ...</pre>\n"],["define","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-define","()",""],["define","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-c-define","(info={}, &block)","<p>Eval the given block. All methods available to the current connection\nadapter are available within the …\n"],["define_attribute_method","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_method","(attr_name)","<p>Declares an attribute that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, pass …\n"],["define_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-define_attribute_methods","(*attr_names)","<p>Declares the attributes that should be prefixed and suffixed by\nActiveModel::AttributeMethods.\n<p>To use, …\n"],["define_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-define_callbacks","(*callbacks)","<p>Define sets of events in the object lifecycle that support callbacks.\n\n<pre>define_callbacks :validate\ndefine_callbacks ...</pre>\n"],["define_method_attribute","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-define_method_attribute","(attr_name)",""],["define_method_attribute","ActiveRecord::AttributeMethods::Read::ClassMethods","classes/ActiveRecord/AttributeMethods/Read/ClassMethods.html#method-i-define_method_attribute","(name)","<p>We want to generate the methods via module_eval rather than define_method,\nbecause define_method is slower …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods","classes/ActiveRecord/AttributeMethods/TimeZoneConversion/ClassMethods.html#method-i-define_method_attribute-3D","(attr_name)","<p>Defined for all <code>datetime</code> and <code>timestamp</code> attributes\nwhen <code>time_zone_aware_attributes</code> are enabled. This enhanced …\n"],["define_method_attribute=","ActiveRecord::AttributeMethods::Write::ClassMethods","classes/ActiveRecord/AttributeMethods/Write/ClassMethods.html#method-i-define_method_attribute-3D","(name)","<p>See define_method_attribute in read.rb for an explanation of this code.\n"],["define_model_callbacks","ActiveModel::Callbacks","classes/ActiveModel/Callbacks.html#method-i-define_model_callbacks","(*callbacks)","<p>define_model_callbacks accepts the same options\n<code>define_callbacks</code> does, in case you want to overwrite …\n"],["delegate","Module","classes/Module.html#method-i-delegate","(*methods)","<p>Provides a <code>delegate</code> class method to easily expose contained\nobjects&#39; public methods as your own. …\n"],["delegate_to","ActionView::Template::Types","classes/ActionView/Template/Types.html#method-c-delegate_to","(klass)",""],["delete","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-delete","(action, *args)","<p>Simulate a DELETE request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["delete","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-delete","(key)",""],["delete","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete","(path, parameters = nil, headers_or_env = nil)","<p>Performs a DELETE request with the given parameters. See <code>#get</code>\nfor more details.\n"],["delete","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-delete","(target)",""],["delete","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-delete","(*args, &block)","<p>Define a route that only recognizes HTTP DELETE. For supported arguments,\nsee match\n\n<pre>delete &#39;broccoli&#39;, ...</pre>\n"],["delete","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-delete","(key)","<p>Delete messages for <code>key</code>. Returns the deleted messages.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">get</span>(:<span class=\"ruby-identifier\">name</span>)    <span class=\"ruby-comment\"># =&gt; [&quot;can not be nil&quot;] ...</span>\n</pre>\n"],["delete","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete","(*records)","<p>Deletes the <code>records</code> supplied and removes them from the\ncollection. For <code>has_many</code> associations, the deletion …\n"],["delete","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-delete","(element)","<p>If <code>element</code> is in the queue, remove and return it, or nil.\n"],["delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete","(arel, name = nil, binds = [])","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-delete","(sql_key)",""],["delete","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-delete","(key)",""],["delete","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-delete","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["delete","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete","(id_or_array)","<p>Deletes the row with a primary key matching the <code>id</code> argument,\nusing a SQL <code>DELETE</code> statement, and returns …\n"],["delete","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete","(name, options = nil)","<p>Deletes an entry in the cache. Returns <code>true</code> if an entry is\ndeleted.\n<p>Options are passed to the underlying …\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-delete","(key)","<p>Removes the specified key from the hash.\n"],["delete","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-delete","(*args, &block)",""],["delete?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-delete-3F","()","<p>Is this a DELETE request? Equivalent to <code>request.request_method_symbol\n== :delete</code>.\n"],["delete_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-delete_all","()","<p>Deletes all the records from the collection. For <code>has_many</code>\nassociations, the deletion is done according …\n"],["delete_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-delete_all","(conditions = nil)","<p>Deletes the records matching <code>conditions</code> without instantiating\nthe records first, and hence not calling …\n"],["delete_cookie","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-delete_cookie","(key, value={})",""],["delete_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_entry","(key, options)",""],["delete_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-delete_entry","(key, options)",""],["delete_matched","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-delete_matched","(matcher, options = nil)",""],["delete_matched","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-delete_matched","(matcher, options = nil)","<p>Delete all entries with keys matching the pattern.\n<p>Options are passed to the underlying cache implementation. …\n"],["delete_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-delete_sql","(sql, name = nil)","<p>Executes the delete statement and returns the number of rows affected.\n"],["delete_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-delete_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a DELETE request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["deliver","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-deliver","(event)",""],["demodulize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-demodulize","(path)","<p>Removes the module part from the expression in the string.\n\n<pre>&#39;ActiveRecord::CoreExtensions::String::Inflections&#39;.demodulize ...</pre>\n"],["demodulize","String","classes/String.html#method-i-demodulize","()","<p>Removes the module part from the constant expression in the string.\n\n<pre>&#39;ActiveRecord::CoreExtensions::String::Inflections&#39;.demodulize ...</pre>\n"],["dependencies","ActionView::DependencyTracker::ERBTracker","classes/ActionView/DependencyTracker/ERBTracker.html#method-i-dependencies","()",""],["dependencies","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-dependencies","()",""],["deprecate","Module","classes/Module.html#method-i-deprecate","(*method_names)","\n<pre>deprecate :foo\ndeprecate bar: &#39;message&#39;\ndeprecate :foo, :bar, baz: &#39;warning!&#39;, qux: &#39;gone!&#39;</pre>\n<p>You can also …\n"],["deprecate","Rails::DeprecatedConstant","classes/Rails/DeprecatedConstant.html#method-c-deprecate","(old, current)",""],["deprecate_methods","ActiveSupport::Deprecation::MethodWrapper","classes/ActiveSupport/Deprecation/MethodWrapper.html#method-i-deprecate_methods","(target_module, *method_names)","<p>Declare that a method has been deprecated.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">Fred</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-keyword\">self</span>\n\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">foo</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">bar</span>; <span class=\"ruby-keyword\">end</span>\n  <span class=\"ruby-operator\">...</span>\n</pre>\n"],["deprecation_warning","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-deprecation_warning","(deprecated_method_name, message = nil, caller_backtrace = nil)",""],["desc","Rails::API::Task","classes/Rails/API/Task.html#method-i-desc","(description)","<p>Hack, ignore the desc calls performed by the original initializer.\n"],["desc","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-desc","(description=nil)","<p>Tries to get the description from a USAGE file one folder above the source\nroot otherwise uses a default …\n"],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-descendants","()",""],["descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-descendants","(klass)",""],["descends_from_active_record?","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-descends_from_active_record-3F","()","<p>True if this isn&#39;t a concrete subclass needing a STI type condition.\n"],["describe","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-c-describe","(text)",""],["destination","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-destination","(path)","<p>Sets the destination of generator files:\n\n<pre>destination File.expand_path(&quot;../tmp&quot;, File.dirname(__FILE__))</pre>\n"],["destroy","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy","(*records)","<p>Destroys the <code>records</code> supplied and removes them from the\ncollection. This method will <em>always</em> remove record …\n"],["destroy","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy","(id)","<p>Destroy an object (or multiple objects) that has the given id. The object\nis instantiated first, therefore …\n"],["destroy","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-destroy","()","<p>DELETE destroy\n"],["destroy!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroy-21","()","<p>Deletes the record in the database and freezes this instance to reflect\nthat no changes should be made …\n"],["destroy_all","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-destroy_all","()","<p>Deletes the records of the collection directly from the database. This will\n<em>always</em> remove the records …\n"],["destroy_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-destroy_all","(conditions = nil)","<p>Destroys the records matching <code>conditions</code> by instantiating each\nrecord and calling its <code>destroy</code> method. …\n"],["destroy_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-destroy_session","(env, sid, options)","<p>Remove a session from the cache.\n"],["destroy_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-destroy_session","(env, session_id, options)",""],["destroyed?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-destroyed-3F","()","<p>Returns true if this object has been destroyed, otherwise returns false.\n"],["destroyed_by_association","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association","()","<p>Returns the association for the parent being destroyed.\n<p>Used to avoid updating the counter cache unnecessarily. …\n"],["destroyed_by_association=","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-destroyed_by_association-3D","(reflection)","<p>Records the association that is being destroyed and destroying this record\nin the process.\n"],["detail_args_for","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-detail_args_for","(options)","<p>Compute details hash and key according to user options (e.g. passed from\n#render).\n"],["details_for_lookup","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-details_for_lookup","()",""],["determine_default_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-determine_default_controller_class","(name)",""],["determine_default_helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-determine_default_helper_class","(name)",""],["determine_default_mailer","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-determine_default_mailer","(name)",""],["diff","Hash","classes/Hash.html#method-i-diff","(other)","<p>Returns a hash that represents the difference between two hashes.\n\n<pre class=\"ruby\">{<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">diff</span>(<span class=\"ruby-value\">1</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>)         <span class=\"ruby-comment\"># =&gt; {} ...</span>\n</pre>\n"],["digest","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-digest","(name, format, finder, options = {})",""],["digest","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-digest","()",""],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-direct_descendants","()",""],["direct_descendants","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-direct_descendants","(klass)",""],["directories","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-c-directories","()",""],["dirname","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-dirname","()","<p>Returns the directory in which the data files are stored.\n"],["dirties_query_cache","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-c-dirties_query_cache","(base, *method_names)",""],["disable_cache","ActionView::LookupContext::DetailsCache","classes/ActionView/LookupContext/DetailsCache.html#method-i-disable_cache","()","<p>Temporary skip passing the details_key forward.\n"],["disable_ddl_transaction!","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-disable_ddl_transaction-21","()","<p>Disable DDL transactions for this migration.\n"],["disable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disable_extension","(name)",""],["disable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-disable_query_cache-21","()",""],["disable_referential_integrity","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disable_referential_integrity","()","<p>Override to turn off referential integrity while executing\n<code>&amp;block</code>.\n"],["discard","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-discard","(k = nil)","<p>Marks the entire flash or a single flash entry to be discarded by the end\nof the current action:\n\n<pre>flash.discard ...</pre>\n"],["disconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-disconnect-21","()","<p>Disconnects all connections in the pool, and clears the pool.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["disconnect!","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-disconnect-21","()","<p>Disconnects from the database if already connected. Otherwise, this method\ndoes nothing.\n"],["dispatch","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-dispatch","(action, request)",""],["display","ActionController::Responder","classes/ActionController/Responder.html#method-i-display","(resource, given_options={})","<p>Display is just a shortcut to render a resource with the current format.\n\n<pre>display @user, status: :ok</pre>\n<p>For …\n"],["display","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-display","(results, options={})","<p>Prints the mapping from filenames to annotations in <code>results</code>\nordered by filename. The <code>options</code> hash is …\n"],["display_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-display_errors","()",""],["distance_of_time_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words","(from_time, to_time = 0, include_seconds_or_options = {}, options = {})","<p>Reports the approximate distance in time between two Time, Date or DateTime\nobjects or integers as seconds. …\n"],["distance_of_time_in_words_to_now","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-distance_of_time_in_words_to_now","(from_time, include_seconds_or_options = {})",""],["distinct","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-distinct","()","<p>Specifies whether the records should be unique or not.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> :<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["distinct","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-distinct","(columns, order_by)","<p>SELECT DISTINCT clause for a given set of columns and a given ORDER BY\nclause. Both PostgreSQL and Oracle …\n"],["distinct","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-distinct","(value = true)","<p>Specifies whether the records should be unique or not. For example:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">select</span>(:<span class=\"ruby-identifier\">name</span>)\n<span class=\"ruby-comment\"># =&gt; Might return ...</span>\n</pre>\n"],["div_for","ActionView::Helpers::RecordTagHelper","classes/ActionView/Helpers/RecordTagHelper.html#method-i-div_for","(record, *args, &block)","<p>Produces a wrapper DIV element with id and class parameters that relate to\nthe specified Active Record …\n"],["dom_class","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_class","(record, prefix = nil)",""],["dom_class","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-c-dom_class","(record, prefix = nil)",""],["dom_class","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_class","(record_or_class, prefix = nil)","<p>The DOM class convention is to use the singular form of an object or class.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">dom_class</span>(<span class=\"ruby-identifier\">post</span>)   <span class=\"ruby-comment\"># =&gt; &quot;post&quot; ...</span>\n</pre>\n"],["dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)",""],["dom_id","ActionController::RecordIdentifier","classes/ActionController/RecordIdentifier.html#method-c-dom_id","(record, prefix = nil)",""],["dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-dom_id","(record, prefix = nil)","<p>The DOM id convention is to use the singular form of an object or class\nwith the id following an underscore. …\n"],["domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-domain","(tld_length = @@tld_length)","<p>Returns the domain part of a host, such as “rubyonrails.org” in\n“www.rubyonrails.org”. …\n"],["down","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-down","()",""],["downcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-downcase","()","<p>Converts characters in the string to lowercase.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;VĚDA A VÝZKUM&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">downcase</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &quot;věda a výzkum&quot;</span>\n</pre>\n"],["downcase","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-downcase","(string)",""],["drop","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop","(*arguments)",""],["drop_all","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_all","()",""],["drop_current","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_current","(environment = env)",""],["drop_database_url","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-drop_database_url","()",""],["drop_join_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_join_table","(table_1, table_2, options = {})","<p>Drops the join table specified by the given arguments. See\n<code>create_join_table</code> for details.\n<p>Although this …\n"],["drop_schema","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-drop_schema","(schema_name)","<p>Drops the schema for the given schema name.\n"],["drop_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-drop_table","(table_name, options = {})","<p>Drops a table from the database.\n<p>Although this command ignores <code>options</code> and the block if one is\ngiven, …\n"],["drop_table","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-drop_table","()",""],["dst?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-dst-3F","()","<p>Returns true if the current time is within Daylight Savings Time for the\nspecified time zone.\n\n<pre>Time.zone ...</pre>\n"],["dup","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-dup","()","<p>Returns an exact copy of the <code>ActionController::Parameters</code>\ninstance. <code>permitted</code> state is kept on the duped …\n"],["dup","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-dup","","<p>Duped objects have no id assigned and are treated as new records. Note that\nthis is a “shallow” …\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["dup","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-dup","()","<p>Returns an exact copy of the hash.\n"],["duplicable?","BigDecimal","classes/BigDecimal.html#method-i-duplicable-3F","()",""],["duplicable?","FalseClass","classes/FalseClass.html#method-i-duplicable-3F","()","<p><code>false</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">false</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup FalseClass</span>\n</pre>\n"],["duplicable?","NilClass","classes/NilClass.html#method-i-duplicable-3F","()","<p><code>nil</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup NilClass</span>\n</pre>\n"],["duplicable?","Numeric","classes/Numeric.html#method-i-duplicable-3F","()","<p>Numbers are not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-value\">3</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup Fixnum</span>\n</pre>\n"],["duplicable?","Object","classes/Object.html#method-i-duplicable-3F","()","<p>Can you safely dup this object?\n<p>False for <code>nil</code>, <code>false</code>, <code>true</code>, symbol,\nand number objects; true otherwise. …\n"],["duplicable?","Symbol","classes/Symbol.html#method-i-duplicable-3F","()","<p>Symbols are not duplicable:\n\n<pre class=\"ruby\">:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n:<span class=\"ruby-identifier\">my_symbol</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t ...</span>\n</pre>\n"],["duplicable?","TrueClass","classes/TrueClass.html#method-i-duplicable-3F","()","<p><code>true</code> is not duplicable:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">duplicable?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-keyword\">true</span>.<span class=\"ruby-identifier\">dup</span>         <span class=\"ruby-comment\"># =&gt; TypeError: can&#39;t dup TrueClass</span>\n</pre>\n"],["duration","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-duration","()",""],["each","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-each","(&block)",""],["each","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-each","(&block)",""],["each","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-each","()",""],["each","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-each","()","<p>Iterates through each error key, value pair in the error messages hash.\nYields the attribute and the …\n"],["each","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-each","(&block)",""],["each","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-each","()",""],["each","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-each","(&block)",""],["each","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-each","()",""],["each","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-each","(&block)",""],["each","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-i-each","(*args, &block)",""],["each","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-each","(&block)",""],["eager_autoload","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_autoload","()",""],["eager_load","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-eager_load","(*args)","<p>Forces eager loading by performing a LEFT OUTER JOIN on <code>args</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">eager_load</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.<span class=\"ruby-string\">&quot;id&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["eager_load","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-eager_load","()",""],["eager_load!","ActiveSupport::Autoload","classes/ActiveSupport/Autoload.html#method-i-eager_load-21","()",""],["eager_load!","Rails::Engine","classes/Rails/Engine.html#method-c-eager_load-21","()","<p>Eager load the application by loading all ruby files inside eager_load\npaths.\n"],["eager_load_namespaces","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-eager_load_namespaces","()","<p>All namespaces that are eager loaded\n"],["eager_load_paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-eager_load_paths","()",""],["eager_loading?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-eager_loading-3F","()","<p>Returns true if relation needs eager loading.\n"],["email_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-email_field","(object_name, method, options = {})","<p>Returns a text_field of type “email”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">email_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;address&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_address&quot; ...</span>\n</pre>\n"],["email_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-email_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “email”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["emitted_hidden_id?","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-emitted_hidden_id-3F","()",""],["empty?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-empty-3F","()",""],["empty?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-empty-3F","()","<p>Returns <code>true</code> if no errors are found, <code>false</code>\notherwise. If the error message is a string it can be empty. …\n"],["empty?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the collection is empty. If the collection has\nbeen loaded or the <code>:counter_sql</code> option …\n"],["empty?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-empty-3F","()","<p>Returns true if there are no records.\n"],["empty?","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-empty-3F","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-empty_insert_statement_value","()",""],["empty_insert_statement_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-empty_insert_statement_value","()",""],["emulate_booleans","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-emulate_booleans","","<p>By default, the MysqlAdapter will consider all columns of type\n<code>tinyint(1)</code> as boolean. If you wish to …\n"],["enable_extension","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-enable_extension","(name)",""],["enable_query_cache!","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-enable_query_cache-21","()",""],["enable_warnings","Kernel","classes/Kernel.html#method-i-enable_warnings","()","<p>Sets $VERBOSE to <code>true</code> for the duration of the block and back\nto its original value afterwards.\n"],["encode","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-encode","(value, options = nil)","<p>Dumps objects in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n\n<pre>ActiveSupport::JSON.encode({ ...</pre>\n"],["encode","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-encode","(value, use_options = true)",""],["encode!","ActionView::Template","classes/ActionView/Template.html#method-i-encode-21","()","<p>This method is responsible for properly setting the encoding of the source.\nUntil this point, we assume …\n"],["encode_credentials","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-encode_credentials","(user_name, password)",""],["encode_credentials","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-encode_credentials","(http_method, credentials, password, password_is_ha1)",""],["encode_credentials","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-encode_credentials","(token, options = {})","<p>Encodes the given token and options into an Authorization header value.\n<p>token   - String token. options …\n"],["encode_json","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-i-encode_json","(encoder)",""],["encode_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-encode_with","(coder)","<p>Populate <code>coder</code> with attributes about this record that should\nbe serialized. The structure of <code>coder</code> defined …\n"],["encode_with","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-encode_with","(coder)",""],["encode_with","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-encode_with","(coder)",""],["encode_with","BigDecimal","classes/BigDecimal.html#method-i-encode_with","(coder)",""],["encoding","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-encoding","()","<p>Returns the current database encoding format.\n"],["encoding","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-encoding","()","<p>Returns the current database encoding format as a string, eg:\n&#39;UTF-8&#39;\n"],["encoding=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-encoding-3D","(value)",""],["encoding_aware?","String","classes/String.html#method-i-encoding_aware-3F","()",""],["encrypt_and_sign","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-i-encrypt_and_sign","(value)","<p>Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: …\n"],["encrypted","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted","()","<p>Returns a jar that&#39;ll automatically encrypt cookie values before\nsending them to the client and will …\n"],["end_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_document","()",""],["end_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-end_element","(name)",""],["end_of_day","Date","classes/Date.html#method-i-end_of_day","()","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the end of the day (23:59:59) …\n"],["end_of_day","DateTime","classes/DateTime.html#method-i-end_of_day","()","<p>Returns a new DateTime representing the end of the day (23:59:59).\n"],["end_of_day","Time","classes/Time.html#method-i-end_of_day","()","<p>Returns a new Time representing the end of the day, 23:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_hour","DateTime","classes/DateTime.html#method-i-end_of_hour","()","<p>Returns a new DateTime representing the end of the hour (hh:59:59).\n"],["end_of_hour","Time","classes/Time.html#method-i-end_of_hour","()","<p>Returns a new Time representing the end of the hour, x:59:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_minute","DateTime","classes/DateTime.html#method-i-end_of_minute","()","<p>Returns a new DateTime representing the end of the minute (hh:mm:59).\n"],["end_of_minute","Time","classes/Time.html#method-i-end_of_minute","()","<p>Returns a new Time representing the end of the minute, x:xx:59.999999\n(.999999999 in ruby1.9)\n"],["end_of_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_month","()","<p>Returns a new date/time representing the end of the month. DateTime objects\nwill have a time set to 23:59:59. …\n"],["end_of_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_quarter","()","<p>Returns a new date/time at the end of the quarter. Example: 31st March,\n30th June, 30th September. DateTime …\n"],["end_of_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the end of this week on the given day.\nWeek is assumed to start …\n"],["end_of_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-end_of_year","()","<p>Returns a new date/time representing the end of the year. DateTime objects\nwill have a time set to 23:59:59. …\n"],["endpoint","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-endpoint","()",""],["endpoint","Rails::Engine","classes/Rails/Engine.html#method-c-endpoint","(endpoint = nil)",""],["engine","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-engine","()",""],["engine=","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-engine-3D","(name)",""],["engine?","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-engine-3F","()",""],["engines","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-engines","()",""],["enlist_fixture_connections","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-enlist_fixture_connections","()",""],["enumerate","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-enumerate","(tag, options={})","<p>Prints all annotations with tag <code>tag</code> under the root directories\n<code>app</code>, <code>config</code>, <code>db</code>, <code>lib</code>,\nand <code>test</code> (recursively). …\n"],["env","ActionController::Metal","classes/ActionController/Metal.html#method-i-env","()",""],["env","Rails","classes/Rails.html#method-c-env","()",""],["env=","Rails","classes/Rails.html#method-c-env-3D","(environment)",""],["env_config","Rails::Application","classes/Rails/Application.html#method-i-env_config","()","<p>Stores some of the Rails initial environment parameters which will be used\nby middlewares and engines …\n"],["env_config","Rails::Engine","classes/Rails/Engine.html#method-c-env_config","()","<p>Defines additional Rack env configuration that is added on each call.\n"],["env_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-env_filter","()",""],["environment","Rails::Console","classes/Rails/Console.html#method-i-environment","()",""],["environment","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-environment","()",""],["environment","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-environment","(data=nil, options={}, &block)","<p>Adds a line inside the Application class for config/application.rb.\n<p>If options :env is specified, the …\n"],["environment?","Rails::Console","classes/Rails/Console.html#method-i-environment-3F","()",""],["eof?","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-eof-3F","()","<p>Shortcut for <code>tempfile.eof?</code>.\n"],["eql?","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-eql-3F","(resolver)",""],["eql?","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-eql-3F","","<p>Equivalent to <code>String#eql?</code>. Returns <code>true</code> if the\nclass name and <code>other</code> have the same length and content, …\n"],["eql?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-eql-3F","(comparison_object)",""],["eql?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-eql-3F","(other)",""],["eql?","Time","classes/Time.html#method-i-eql-3F","(other)",""],["eql_with_coercion","Time","classes/Time.html#method-i-eql_with_coercion","(other)","<p>Layers additional behavior on Time#eql? so that ActiveSupport::TimeWithZone\ninstances can be eql? to …\n"],["eql_without_coercion","Time","classes/Time.html#method-i-eql_without_coercion","(other)",""],["error","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-error","(error_message)",""],["error_message","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_message","()",""],["error_number","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-error_number","(exception)",""],["error_wrapping","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-error_wrapping","(html_tag)",""],["errors","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-errors","()","<p>Returns the <code>Errors</code> object that holds all information about\nattribute error messages.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["errors","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-errors","()","<p>POST create PATCH/PUT update\n"],["escape","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-escape","(string)",""],["escape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-escape_bytea","(value)","<p>Escapes binary strings for bytea input to the database.\n"],["escape_glob_chars","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-escape_glob_chars","(path)",""],["escape_javascript","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-escape_javascript","(javascript)","<p>Escapes carriage returns and single and double quotes for JavaScript\nsegments.\n<p>Also available through …\n"],["escape_once","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-escape_once","(html)","<p>Returns an escaped version of <code>html</code> without affecting existing\nescaped entities.\n\n<pre>escape_once(&quot;1 &lt; 2 &amp;amp; ...</pre>\n"],["establish_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-establish_connection","(owner, spec)",""],["establish_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-establish_connection","(spec = ENV[\"DATABASE_URL\"])","<p>Establishes the connection to the database. Accepts a hash as input where\nthe <code>:adapter</code> key must be specified …\n"],["etag","ActionController::ConditionalGet::ClassMethods","classes/ActionController/ConditionalGet/ClassMethods.html#method-i-etag","(&etagger)","<p>Allows you to consider additional controller-wide information when\ngenerating an etag. For example, if …\n"],["etag=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-etag-3D","(etag)",""],["etag_matches?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-etag_matches-3F","(etag)",""],["exabyte","Numeric","classes/Numeric.html#method-i-exabyte","()",""],["exabytes","Numeric","classes/Numeric.html#method-i-exabytes","()",""],["except","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-except","(*skips)","<p>Removes from the query the condition(s) specified in <code>skips</code>.\n\n<pre>Post.order(&#39;id asc&#39;).except(:order)       ...</pre>\n"],["except","Hash","classes/Hash.html#method-i-except","(*keys)","<p>Return a hash that includes everything but the given keys. This is useful\nfor limiting a set of parameters …\n"],["except!","Hash","classes/Hash.html#method-i-except-21","(*keys)","<p>Replaces the hash without the given keys.\n"],["excerpt","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-excerpt","(text, phrase, options = {})","<p>Extracts an excerpt from <code>text</code> that matches the first instance\nof <code>phrase</code>. The <code>:radius</code> option expands the …\n"],["exclude?","Enumerable","classes/Enumerable.html#method-i-exclude-3F","(object)","<p>The negative of the <code>Enumerable#include?</code>. Returns\n<code>true</code> if the collection does not include the object. …\n"],["exclude?","String","classes/String.html#method-i-exclude-3F","(string)","<p>The inverse of <code>String#include?</code>. Returns true if the string\ndoes not include the other string.\n\n<pre>&quot;hello&quot;.exclude? ...</pre>\n"],["exec_app_rails","Rails::AppRailsLoader","classes/Rails/AppRailsLoader.html#method-c-exec_app_rails","()",""],["exec_delete","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_delete","(sql, name, binds)","<p>Executes delete <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_delete","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_delete","(sql, name, binds)",""],["exec_delete","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_delete","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_delete","(sql, name = 'SQL', binds = [])",""],["exec_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)","<p>Executes insert <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_insert","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_insert","(sql, name, binds, pk = nil, sequence_name = nil)",""],["exec_migration","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-exec_migration","(conn, direction)",""],["exec_query","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])","<p>Executes <code>sql</code> statement in the context of this connection using\n<code>binds</code> as the bind substitutes. <code>name</code> is …\n"],["exec_query","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_query","(sql, name = 'SQL', binds = [])",""],["exec_query","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_query","(sql, name = nil, binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-exec_update","(sql, name, binds)","<p>Executes update <code>sql</code> statement in the context of this\nconnection using <code>binds</code> as the bind substitutes. …\n"],["exec_update","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-exec_update","(sql, name, binds)",""],["exec_update","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_update","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-exec_update","(sql, name = 'SQL', binds = [])",""],["exec_without_stmt","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-exec_without_stmt","(sql, name = 'SQL', binds = [])",""],["execute","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-execute","(sql, name = nil)","<p>Executes the SQL statement in the context of this connection.\n"],["execute","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-execute","(sql, name = nil)","<p>Executes an SQL statement, returning a PGresult object on success or\nraising a PGError exception otherwise. …\n"],["execute","ActiveRecord::StatementCache","classes/ActiveRecord/StatementCache.html#method-i-execute","()",""],["execute","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute","()","<p>Executes the given block and updates the latest watched files and\ntimestamp.\n"],["execute_and_free","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-execute_and_free","(sql, name = nil)",""],["execute_hook","ActiveSupport","classes/ActiveSupport.html#method-c-execute_hook","(base, options, block)",""],["execute_if_updated","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-execute_if_updated","()","<p>Execute the block given if updated.\n"],["exist?","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-exist-3F","(key)",""],["exist?","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-exist-3F","(name, options = nil)","<p>Return <code>true</code> if the cache contains an entry for the given key.\n<p>Options are passed to the underlying cache …\n"],["existent","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent","()","<p>Returns all expanded paths but only if they exist in the filesystem.\n"],["existent_directories","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-existent_directories","()",""],["exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["exists?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-exists-3F","(conditions = :none)","<p>Returns truthy if a record exists in the table that matches the\n<code>id</code> or conditions given, or falsy otherwise. …\n"],["expand_cache_key","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-expand_cache_key","(key, namespace = nil)","<p>Expands out the <code>key</code> argument into a key that can be used for\nthe cache store. Optionally accepts a namespace, …\n"],["expand_hash_conditions_for_aggregates","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-expand_hash_conditions_for_aggregates","(attrs)","<p>Accepts a hash of SQL conditions and replaces those attributes that\ncorrespond to a <code>composed_of</code> relationship …\n"],["expanded","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-expanded","()","<p>Expands all paths against the root and return all unique values.\n"],["expected_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-expected_response","(http_method, uri, credentials, password, password_is_ha1=true)","<p>Returns the expected response for a request of <code>http_method</code> to\n<code>uri</code> with the decoded <code>credentials</code> and the …\n"],["expire","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-expire","()",""],["expire_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-expire_fragment","(key, options = nil)","<p>Removes fragments from the cache.\n<p><code>key</code> can take one of three forms:\n<p>String - This would normally take the …\n"],["expires_in","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_in","(seconds, options = {})","<p>Sets a HTTP 1.1 Cache-Control header. Defaults to issuing a\n<code>private</code> instruction, so that intermediate …\n"],["expires_now","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-expires_now","()","<p>Sets a HTTP 1.1 Cache-Control header of <code>no-cache</code> so no caching\nshould occur by the browser or intermediate …\n"],["explain","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-explain","(arel, binds = [])",""],["explain","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-explain","(arel, binds = [])","<p>DATABASE STATEMENTS ======================================\n"],["explain","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-explain","()","<p>Runs EXPLAIN on the query or queries triggered by this relation and returns\nthe result as a string.  …\n"],["ext","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-ext","()",""],["extending","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-extending","(*modules, &block)","<p>Used to extend a scope with additional methods, either through a module or\nthrough a block provided. …\n"],["extension_enabled?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extension_enabled-3F","(name)",""],["extensions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-extensions","()","<p>A list of extensions, to be filled in by adapters that support them. At the\nmoment only postgresql does. …\n"],["extensions","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-extensions","()",""],["extify","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-extify","(name)","<p>Add an extension to the given name based on the platform.\n"],["extract!","Hash","classes/Hash.html#method-i-extract-21","(*keys)","<p>Removes and returns the key/value pairs matching the given keys.\n\n<pre>{ a: 1, b: 2, c: 3, d: 4 }.extract!(:a, ...</pre>\n"],["extract_annotations_from","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-extract_annotations_from","(file, pattern)","<p>If <code>file</code> is the filename of a file that contains annotations\nthis method returns a hash with a single …\n"],["extract_bounds","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-extract_bounds","(value)",""],["extract_domain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_domain","(host, tld_length = @@tld_length)",""],["extract_options!","Array","classes/Array.html#method-i-extract_options-21","()","<p>Extracts options from a set of arguments. Removes and returns the last\nelement in the array if it&#39;s …\n"],["extract_schema_and_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Utils","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Utils.html#method-i-extract_schema_and_table","(name)","<p>Returns an array of <code>[schema_name, table_name]</code> extracted from\n<code>name</code>. <code>schema_name</code> is nil if not specified …\n"],["extract_session_id","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-extract_session_id","(env)",""],["extract_subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomain","(host, tld_length = @@tld_length)",""],["extract_subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-extract_subdomains","(host, tld_length = @@tld_length)",""],["extract_value_from_default","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-c-extract_value_from_default","(default)","<p>Extracts the value from a PostgreSQL column default definition.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-extractable_options-3F","()","<p>Returns <code>true</code> so that <code>Array#extract_options!</code> finds\nmembers of this class.\n"],["extractable_options?","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-extractable_options-3F","()","<p>Returns true to make sure that this hash is extractable via\n<code>Array#extract_options!</code>\n"],["extractable_options?","Hash","classes/Hash.html#method-i-extractable_options-3F","()","<p>By default, only instances of Hash itself are extractable. Subclasses of\nHash may implement this method …\n"],["fallbacks","Rails::Generators","classes/Rails/Generators.html#method-c-fallbacks","()","<p>Hold configured generators fallbacks. If a plugin developer wants a\ngenerator group to fallback to another …\n"],["favicon_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-favicon_link_tag","(source='favicon.ico', options={})","<p>Returns a link loading a favicon file. You may specify a different file in\nthe first argument. The helper …\n"],["fetch","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-fetch","(key, *args)","<p>Returns a parameter for the given <code>key</code>. If the <code>key</code>\ncan&#39;t be found, there are several options: With …\n"],["fetch","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-fetch","(key, *args, &block)",""],["fetch","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-fetch","(ftype, fmod)",""],["fetch","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-fetch","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["fetch","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-fetch","(key, *extras)","<p>Same as <code>Hash#fetch</code> where the key passed as argument can be\neither a string or a symbol:\n\n<pre>counters = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["fetch","Mime","classes/Mime.html#method-c-fetch","(type)",""],["field_set_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-field_set_tag","(legend = nil, options = nil, &block)","<p>Creates a field set for grouping HTML form elements.\n<p><code>legend</code> will become the fieldset&#39;s title (optional …\n"],["fields_for","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-fields_for","(record_name, record_object = nil, fields_options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fields_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-fields_for","(record_name, record_object = nil, options = {}, &block)","<p>Creates a scope around a specific model object like form_for, but\ndoesn&#39;t create the form tags themselves. …\n"],["fifth","Array","classes/Array.html#method-i-fifth","()","<p>Equal to <code>self[4]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fifth</span> <span class=\"ruby-comment\"># =&gt; &quot;e&quot;</span>\n</pre>\n"],["file_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-file_field","(method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-file_field","(object_name, method, options = {})","<p>Returns a file upload input tag tailored for accessing a specified\nattribute (identified by <code>method</code>) on …\n"],["file_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-file_field_tag","(name, options = {})","<p>Creates a file upload field. If you are using file uploads then you will\nalso need to set the multipart …\n"],["file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-file_path","()",""],["filename","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-filename","()","<p>Returns the filename for the data file for this version.\n"],["filter","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-i-filter","(params)",""],["filter","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-filter","(backtrace, kind = :silent)",""],["filter_by","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-filter_by","(constraint)",""],["filter_proxies","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-filter_proxies","(ips)",""],["filtered_env","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_env","()","<p>Return a hash of request.env with all sensitive data replaced.\n"],["filtered_location","ActionDispatch::Http::FilterRedirect","classes/ActionDispatch/Http/FilterRedirect.html#method-i-filtered_location","()",""],["filtered_parameters","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_parameters","()","<p>Return a hash of parameters with all sensitive data replaced.\n"],["filtered_path","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_path","()","<p>Reconstructed a path with all sensitive GET parameters replaced.\n"],["filtered_query_string","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-filtered_query_string","()",""],["find","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-find","(*args, &block)","<p>Finds an object in the collection responding to the <code>id</code>. Uses\nthe same rules as <code>ActiveRecord::Base.find</code> …\n"],["find","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find","(*args)","<p>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6),\nor an array of ids ([5, 6, …\n"],["find","Rails::Engine","classes/Rails/Engine.html#method-c-find","(path)","<p>Finds engine with given path\n"],["find","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-find","(klass, params=nil)","<p>GET show GET edit PATCH/PUT update DELETE destroy\n"],["find","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find","(dirs)","<p>Returns a hash that maps filenames under <code>dirs</code> (recursively) to\narrays with their annotations.\n"],["find_all","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_all","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_all","ActionView::Resolver","classes/ActionView/Resolver.html#method-i-find_all","(name, prefix=nil, partial=false, details={}, key=nil, locals=[])","<p>Normalizes the arguments and passes it on to find_templates.\n"],["find_all_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_all_tag","(conditions)",""],["find_beginning_of_week!","Date","classes/Date.html#method-c-find_beginning_of_week-21","(week_start)","<p>Returns week start day symbol (e.g. :monday), or raises an ArgumentError\nfor invalid day symbol.\n"],["find_by","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by","(*args)","<p>Finds the first record matching the specified conditions. There is no\nimplied ordering so if order matters, …\n"],["find_by!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_by-21","(*args)","<p>Like <code>find_by</code>, except that if no record is found, raises an\n<code>ActiveRecord::RecordNotFound</code> error.\n"],["find_by_sql","ActiveRecord::Querying","classes/ActiveRecord/Querying.html#method-i-find_by_sql","(sql, binds = [])","<p>Executes a custom SQL query against your database and returns all the\nresults. The results will be returned …\n"],["find_cmd_and_exec","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-find_cmd_and_exec","(commands, *args)",""],["find_dependencies","ActionView::DependencyTracker","classes/ActionView/DependencyTracker.html#method-c-find_dependencies","(name, template)",""],["find_each","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_each","(options = {})","<p>Looping through a collection of records from the database (using the\n<code>all</code> method, for example) is very …\n"],["find_executable","Rails::AppRailsLoader","classes/Rails/AppRailsLoader.html#method-c-find_executable","()",""],["find_first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_first","()",""],["find_in","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-i-find_in","(dir)","<p>Returns a hash that maps filenames under <code>dir</code> (recursively) to\narrays with their annotations. Only files …\n"],["find_in_batches","ActiveRecord::Batches","classes/ActiveRecord/Batches.html#method-i-find_in_batches","(options = {})","<p>Yields each batch of records that was found by the find\n<code>options</code> as an array. The size of each batch is …\n"],["find_last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_last","()",""],["find_one","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_one","(id)",""],["find_or_create_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by","(attributes, &block)","<p>Finds the first record with the given attributes, or creates a record with\nthe attributes if one is not …\n"],["find_or_create_by!","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_create_by-21","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>create!</code> so an\nexception is raised if the created record is invalid. …\n"],["find_or_initialize_by","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-find_or_initialize_by","(attributes, &block)","<p>Like <code>find_or_create_by</code>, but calls <code>new</code> instead of\n<code>create</code>.\n"],["find_some","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_some","(ids)",""],["find_tag","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-find_tag","(conditions)",""],["find_take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_take","()",""],["find_template","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-find_template","(name, prefixes = [], partial = false, keys = [], options = {})",""],["find_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-find_tzinfo","(name)",""],["find_with_associations","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_associations","()",""],["find_with_ids","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-find_with_ids","(*ids)",""],["find_zone","Time","classes/Time.html#method-c-find_zone","(time_zone)",""],["find_zone!","Time","classes/Time.html#method-c-find_zone-21","(time_zone)","<p>Returns a TimeZone instance or nil, or raises an ArgumentError for invalid\ntimezones.\n"],["finder","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-i-finder","()",""],["finder","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-finder","()",""],["finish","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Fanout::Subscribers::Timed","classes/ActiveSupport/Notifications/Fanout/Subscribers/Timed.html#method-i-finish","(name, id, payload)",""],["finish","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-finish","(name, payload)","<p>Send a finish notification with <code>name</code> and <code>payload</code>.\n"],["finish","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-i-finish","(name, id, payload)",""],["first","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-first","(*args)","<p>Returns the first record, or the first <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["first","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first","(limit = nil)","<p>Find the first record (or first N records if a parameter is supplied). If\nno order is defined it will …\n"],["first","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-first","()",""],["first","String","classes/String.html#method-i-first","(limit = 1)","<p>Returns the first character. If a limit is supplied, returns a substring\nfrom the beginning of the string …\n"],["first!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-first-21","()","<p>Same as <code>first</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>first!</code> accepts …\n"],["fixture_file_upload","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-fixture_file_upload","(path, mime_type = nil, binary = false)","<p>Shortcut for\n<code>Rack::Test::UploadedFile.new(File.join(ActionController::TestCase.fixture_path,\npath), type)</code> …\n"],["fixture_is_cached?","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-fixture_is_cached-3F","(connection, table_name)",""],["fixtures","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-fixtures","(*fixture_set_names)",""],["flash","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-flash","()","<p>Access the contents of the flash. Use <code>flash[\"notice\"]</code> to read\na notice you put there or <code>flash[\"notice\"]</code> …\n"],["flash","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-flash","()",""],["flush","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-flush","()",""],["flush","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-flush","()",""],["flush_all!","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-flush_all-21","()","<p>Flush all log_subscribers&#39; logger.\n"],["flush_newline_if_pending","ActionView::Template::Handlers::Erubis","classes/ActionView/Template/Handlers/Erubis.html#method-i-flush_newline_if_pending","(src)",""],["follow_redirect!","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-follow_redirect-21","()","<p>Follow a single redirect response. If the last response was not a redirect,\nan exception will be raised. …\n"],["font_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_path","(source, options = {})","<p>Computes the path to a font asset. Full paths from the document root will\nbe passed through.\n\n<pre>font_path(&quot;font&quot;) ...</pre>\n"],["font_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-font_url","(source, options = {})","<p>Computes the full URL to a font asset. This will use <code>font_path</code>\ninternally, so most of their behaviors …\n"],["for_class","HTML::Selector","classes/HTML/Selector.html#method-c-for_class","(cls)","<p>Creates a new selector for the given class name.\n"],["for_id","HTML::Selector","classes/HTML/Selector.html#method-c-for_id","(id)","<p>Creates a new selector for the given id.\n"],["for_tag","ActiveSupport::TestCase","classes/ActiveSupport/TestCase.html#method-c-for_tag","(tag)",""],["force_ssl","ActionController::ForceSSL::ClassMethods","classes/ActionController/ForceSSL/ClassMethods.html#method-i-force_ssl","(options = {})","<p>Force the request to this particular controller or specified actions to be\nunder HTTPS protocol.\n<p>If you …\n"],["force_ssl_redirect","ActionController::ForceSSL","classes/ActionController/ForceSSL.html#method-i-force_ssl_redirect","(host_or_options = nil)","<p>Redirect the existing request to use the HTTPS protocol.\n<p>Parameters\n<p><code>host_or_options</code> - Either a host name …\n"],["foreign_key","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-foreign_key","(class_name, separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["foreign_key","String","classes/String.html#method-i-foreign_key","(separate_class_name_and_id_with_underscore = true)","<p>Creates a foreign key name from a class name.\n<code>separate_class_name_and_id_with_underscore</code> sets whether …\n"],["forking_env?","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-c-forking_env-3F","()",""],["form_authenticity_param","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_param","()","<p>The form&#39;s authenticity parameter. Override to provide your own.\n"],["form_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-form_authenticity_token","()","<p>Sets the token value for the current session.\n"],["form_data?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-form_data-3F","()",""],["form_for","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-form_for","(record, options = {}, &block)","<p>Creates a form that allows the user to create or update the attributes of a\nspecific model object.\n<p>The …\n"],["form_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-form_tag","(url_for_options = {}, options = {}, &block)","<p>Starts a form tag that points the action to an url configured with\n<code>url_for_options</code> just like ActionController::Base#url_for …\n"],["format","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format","(view_path = [])","<p>Returns the MIME type for the format used in the request.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">GET</span> <span class=\"ruby-regexp\">/posts/</span><span class=\"ruby-value\">5</span>.<span class=\"ruby-identifier\">xml</span>   <span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">format</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">Mime</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">XML</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["format=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-format-3D","(extension)","<p>Sets the format by string extension, which can be used to force custom\nformats that are not controlled …\n"],["format_paragraph","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-format_paragraph","(text, len = 72, indent = 2)","<p>Returns <code>text</code> wrapped at <code>len</code> columns and indented\n<code>indent</code> spaces.\n\n<pre>my_text = &#39;Here is a sample text with ...</pre>\n"],["formats","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats","()",""],["formats=","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-formats-3D","(extensions)","<p>Sets the formats by string extensions. This differs from #format= by\nallowing you to set multiple, ordered …\n"],["formatted_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns a formatted string of the offset from UTC, or an alternative string\nif the time zone is already …\n"],["formatted_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-formatted_offset","(colon=true, alternate_utc_string = nil)","<p>Returns the offset of this time zone as a formatted string, of the format\n“+HH:MM”.\n"],["formatted_offset","DateTime","classes/DateTime.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>datetime = DateTime.civil(2000, 1, 1, 0, 0, 0, Rational(-6, 24))\ndatetime.formatted_offset         # …\n"],["formatted_offset","Time","classes/Time.html#method-i-formatted_offset","(colon = true, alternate_utc_string = nil)","<p>Returns the UTC offset as an +HH:MM formatted string.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">local</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">formatted_offset</span>        <span class=\"ruby-comment\"># =&gt; &quot;-06:00&quot; ...</span>\n</pre>\n"],["fortnight","Numeric","classes/Numeric.html#method-i-fortnight","()",""],["fortnights","Numeric","classes/Numeric.html#method-i-fortnights","()",""],["forty_two","Array","classes/Array.html#method-i-forty_two","()","<p>Equal to <code>self[41]</code>. Also known as accessing “the reddit”.\n"],["fourth","Array","classes/Array.html#method-i-fourth","()","<p>Equal to <code>self[3]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">fourth</span> <span class=\"ruby-comment\"># =&gt; &quot;d&quot;</span>\n</pre>\n"],["fragment_cache_key","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_cache_key","(key)","<p>Given a key (as described in <code>expire_fragment</code>), returns a key\nsuitable for use in reading, writing, or …\n"],["fragment_exist?","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-fragment_exist-3F","(key, options = nil)","<p>Check if a cached fragment from the location signified by <code>key</code>\nexists (see <code>expire_fragment</code> for acceptable …\n"],["framework_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-framework_trace","()",""],["framework_version","Rails::Info","classes/Rails/Info.html#method-c-framework_version","(framework)",""],["frameworks","Rails::Info","classes/Rails/Info.html#method-c-frameworks","()",""],["freeze","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-freeze","()","<p>Clone and freeze the attributes hash such that associations are still\naccessible, even on destroyed records, …\n"],["freeze","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-freeze","()",""],["fresh?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-fresh-3F","(response)","<p>Check response freshness (Last-Modified and ETag) against request\nIf-Modified-Since and If-None-Match …\n"],["fresh_when","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-fresh_when","(record_or_options, additional_options = {})","<p>Sets the etag, <code>last_modified</code>, or both on the response and\nrenders a <code>304 Not Modified</code> response if the …\n"],["from","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-from","(value, subquery_name = nil)","<p>Specifies table from which the records will be fetched. For example:\n\n<pre>Topic.select(&#39;title&#39;).from(&#39;posts&#39;) ...</pre>\n"],["from","Array","classes/Array.html#method-i-from","(position)","<p>Returns the tail of the array from <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">from</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span>\n<span class=\"ruby-node\">%w( a b ...\n</span></pre>\n"],["from","String","classes/String.html#method-i-from","(position)","<p>Returns a substring from the given position to the end of the string. If\nthe position is negative, it …\n"],["from_json","ActiveModel::Serializers::JSON","classes/ActiveModel/Serializers/JSON.html#method-i-from_json","(json, include_root=include_root_in_json)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Serializers</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">JSON</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from_now","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-from_now","(time = ::Time.current)",""],["from_now","Numeric","classes/Numeric.html#method-i-from_now","(time = ::Time.current)","<p>Reads best without arguments:  10.minutes.from_now\n"],["from_rails_root","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-from_rails_root","(string)",""],["from_response","ActionDispatch::TestResponse","classes/ActionDispatch/TestResponse.html#method-c-from_response","(response)",""],["from_session_value","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-c-from_session_value","(value)",""],["from_trusted_xml","Hash","classes/Hash.html#method-c-from_trusted_xml","(xml)","<p>Builds a Hash from XML just like <code>Hash.from_xml</code>, but also\nallows Symbol and YAML.\n"],["from_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-from_xml","(xml)","<p>Sets the model <code>attributes</code> from a JSON string. Returns\n<code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Serializers</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Xml</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["from_xml","Hash","classes/Hash.html#method-c-from_xml","(xml, disallowed_types = nil)","<p>Returns a Hash containing a collection of pairs when the key is the node\nname and the value is its content …\n"],["frozen?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-frozen-3F","()","<p>Returns <code>true</code> if the attributes hash has been frozen.\n"],["full_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_message","(attribute, message)","<p>Returns a full message for a given attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">full_message</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-string\">&#39;is invalid&#39;</span>) <span class=\"ruby-comment\"># =&gt; &quot;Name ...</span>\n</pre>\n"],["full_messages","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages","()","<p>Returns all the full error messages in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> :<span class=\"ruby-identifier\">name</span>, :<span class=\"ruby-identifier\">address</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_messages_for","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-full_messages_for","(attribute)","<p>Returns all the full error messages for a given attribute in an array.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">validates_presence_of</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["full_trace","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-full_trace","()",""],["fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-fullpath","()","<p>Returns the <code>String</code> full path including params of the last URL\nrequested.\n\n<pre># get &quot;/articles&quot;\nrequest.fullpath ...</pre>\n"],["future?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-future-3F","()","<p>Returns true if the current object&#39;s time is in the future.\n"],["future?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-future-3F","()","<p>Returns true if the date/time is in the future.\n"],["future?","DateTime","classes/DateTime.html#method-i-future-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the future.\n"],["gem","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem","(*args)","<p>Adds an entry into Gemfile for the supplied gem.\n\n<pre>gem &quot;rspec&quot;, group: :test\ngem &quot;technoweenie-restful-authentication&quot;, ...</pre>\n"],["gem_group","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-gem_group","(*names, &block)","<p>Wraps gem entries inside a group.\n\n<pre>gem_group :development, :test do\n  gem &quot;rspec-rails&quot;\nend</pre>\n"],["gemfile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gemfile","()",""],["gemfile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile","()",""],["gemfile_entry","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemfile_entry","()",""],["gemspec","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gemspec","()",""],["generate","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-generate","(value)",""],["generate","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-generate","(what, *args)","<p>Generate something using a generator from Rails or a plugin. The second\nparameter is the argument string …\n"],["generate_key","ActiveSupport::CachingKeyGenerator","classes/ActiveSupport/CachingKeyGenerator.html#method-i-generate_key","(salt, key_size=64)","<p>Returns a derived key suitable for use.  The default key_size is chosen to\nbe compatible with the default …\n"],["generate_key","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-i-generate_key","(salt, key_size=64)","<p>Returns a derived key suitable for use.  The default key_size is chosen to\nbe compatible with the default …\n"],["generate_message","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-generate_message","(attribute, type = :invalid, options = {})","<p>Translates an error message in its default scope\n(<code>activemodel.errors.messages</code>).\n<p>Error messages are first …\n"],["generate_method_for_mime","AbstractController::Collector","classes/AbstractController/Collector.html#method-c-generate_method_for_mime","(mime)",""],["generate_railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-generate_railtie_name","(class_or_module)",""],["generate_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-generate_sid","()",""],["generate_test_dummy","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-generate_test_dummy","(force = false)",""],["generated_feature_methods","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-generated_feature_methods","()",""],["generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-generator","(args=self.default_arguments, options={}, config={})","<p>Instantiate the generator.\n"],["generator_name","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-generator_name","()","<p>Removes the namespaces and get the generator name. For example,\nRails::Generators::ModelGenerator will …\n"],["generators","Rails::Railtie","classes/Rails/Railtie.html#method-c-generators","(&blk)",""],["get","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-get","(action, *args)","<p>Simulate a GET request with the given parameters.\n<p><code>action</code>: The controller action to call.\n<p><code>parameters</code>: The …\n"],["get","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get","(path, parameters = nil, headers_or_env = nil)","<p>Performs a GET request with the given parameters.\n<p><code>path</code>: The URI (as a String) on which you want to perform …\n"],["get","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-get","(*args, &block)","<p>Define a route that only recognizes HTTP GET. For supported arguments, see\nmatch\n\n<pre>get &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["get","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-get","(key)","<p>Get messages for <code>key</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">messages</span>   <span class=\"ruby-comment\"># =&gt; {:name=&gt;[&quot;can not be nil&quot;]}</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">get</span>(:<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["get","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-get","(key)",""],["get?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-get-3F","()","<p>Is this a GET (or HEAD) request? Equivalent to\n<code>request.request_method_symbol == :get</code>.\n"],["get_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-get_session","(env, sid)","<p>Get a session from the cache.\n"],["get_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-get_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a GET request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["getgm","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getgm","()",""],["getlocal","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getlocal","()",""],["getutc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-getutc","()",""],["getutc","DateTime","classes/DateTime.html#method-i-getutc","()",""],["gigabyte","Numeric","classes/Numeric.html#method-i-gigabyte","()",""],["gigabytes","Numeric","classes/Numeric.html#method-i-gigabytes","()",""],["git","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-git","(commands={})","<p>Run a command in git.\n\n<pre>git :init\ngit add: &quot;this.file that.rb&quot;\ngit add: &quot;onefile.rb&quot;, rm: &quot;badfile.cxx&quot;</pre>\n"],["gitignore","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-gitignore","()",""],["gitignore","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-gitignore","()",""],["gmt?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt-3F","()",""],["gmt_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmt_offset","()",""],["gmtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtime","()",""],["gmtoff","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-gmtoff","()",""],["grapheme_length","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-grapheme_length","()","<p>Returns the number of grapheme clusters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">length</span>   <span class=\"ruby-comment\"># =&gt; 4</span>\n<span class=\"ruby-string\">&#39;क्षि&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">grapheme_length</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["group","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-group","(*args)","<p>Allows to specify a group attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">group</span>(:<span class=\"ruby-identifier\">name</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.* <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">GROUP</span> <span class=\"ruby-constant\">BY</span> <span class=\"ruby-identifier\">name</span>\n</pre>\n"],["grouped_collection_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-grouped_collection_select","(method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#grouped_collection_select for\nform builders:\n\n<pre>&lt;%= form_for ...</pre>\n"],["grouped_collection_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_collection_select","(object, method, collection, group_method, group_label_method, option_key_method, option_value_method, options = {}, html_options = {})","<p>Returns <code>&lt;select&gt;</code>, <code>&lt;optgroup&gt;</code> and\n<code>&lt;option&gt;</code> tags for the collection of existing return …\n"],["grouped_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-grouped_options_for_select","(grouped_options, selected_key = nil, options = {})","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_for_select</code>, but wraps them with\n<code>&lt;optgroup&gt;</code> …\n"],["groups","Rails","classes/Rails.html#method-c-groups","(*groups)","<p>Returns all rails groups for loading based on:\n<p>The Rails environment;\n<p>The environment variable RAILS_GROUPS …\n"],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["ha1","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-ha1","(credentials, password)",""],["halted_callback","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-halted_callback","(event)",""],["handle_unverified_request","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-i-handle_unverified_request","()",""],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-i-handle_unverified_request","()","<p>This is the method that defines the application behavior when a request is\nfound to be unverified.\n"],["handle_unverified_request","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-i-handle_unverified_request","()",""],["handler_for_rescue","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-handler_for_rescue","(exception)",""],["handles_encoding?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-handles_encoding-3F","()",""],["has_and_belongs_to_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_and_belongs_to_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a many-to-many relationship with another class. This associates\ntwo classes via an intermediate …\n"],["has_attribute?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-has_attribute-3F","(attr_name)","<p>Returns <code>true</code> if the given attribute is in the attributes hash,\notherwise <code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["has_errors?","ActionController::Responder","classes/ActionController/Responder.html#method-i-has_errors-3F","()","<p>Check whether the resource has errors.\n"],["has_key?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-has_key-3F","(attribute)","<p>aliases include?\n"],["has_many","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_many","(name, scope = nil, options = {}, &extension)","<p>Specifies a one-to-many association. The following methods for retrieval\nand query of collections of …\n"],["has_one","ActiveRecord::Associations::ClassMethods","classes/ActiveRecord/Associations/ClassMethods.html#method-i-has_one","(name, scope = nil, options = {})","<p>Specifies a one-to-one association with another class. This method should\nonly be used if the other class …\n"],["has_secure_password","ActiveModel::SecurePassword::ClassMethods","classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password","(options = {})","<p>Adds methods to set and authenticate against a BCrypt password. This\nmechanism requires you to have a …\n"],["hash","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-hash","()","<p>Delegates to id in order to allow two records of the same type and id to\nwork with something like:\n\n<pre>[ Person.find(1), ...</pre>\n"],["hash","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-hash","()",""],["having","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-having","(opts, *rest)","<p>Allows to specify a HAVING clause. Note that you can&#39;t use HAVING\nwithout also specifying a GROUP …\n"],["head","ActionController::Head","classes/ActionController/Head.html#method-i-head","(status, options = {})","<p>Return a response that has no content (merely headers). The options\nargument is interpreted to be a hash …\n"],["head","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-head","(action, *args)","<p>Simulate a HEAD request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["head","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-head","(path, parameters = nil, headers_or_env = nil)","<p>Performs a HEAD request with the given parameters. See <code>#get</code>\nfor more details.\n"],["head?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-head-3F","()","<p>Is this a HEAD request? Equivalent to <code>request.request_method_symbol\n== :head</code>.\n"],["header","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-header","(routes)",""],["header","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-header","(routes)","<p>the header is part of the HTML page, so we don&#39;t construct it here.\n"],["headers","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-headers","()","<p>Provides access to the request&#39;s HTTP headers, for example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">headers</span>[<span class=\"ruby-string\">&quot;Content-Type&quot;</span>] <span class=\"ruby-comment\"># =&gt; &quot;text/plain&quot;</span>\n</pre>\n"],["headers","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-headers","(args = nil)","<p>Allows you to pass random and unusual headers to the new\n<code>Mail::Message</code> object which will add them to …\n"],["headers=","ActionController::Testing","classes/ActionController/Testing.html#method-i-headers-3D","(new_headers)","<p>TODO : Rewrite tests using controller.headers= to use Rack env\n"],["help","Rails::Generators","classes/Rails/Generators.html#method-c-help","(command = 'generate')","<p>Show help message with available generators.\n"],["helper","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper","(*args, &block)","<p>The <code>helper</code> class method can take a series of helper module\nnames, a block, or both.\n<p>Options\n<p><code>*args</code> - Module …\n"],["helper","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-helper","()",""],["helper_attr","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helper_attr","(*attrs)","<p>Declares helper accessors for controller attributes. For example, the\nfollowing adds new <code>name</code> and <code>name=</code> …\n"],["helper_class","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_class","()",""],["helper_method","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-helper_method","(*meths)","<p>Declare a controller method as a helper. For example, the following makes\nthe <code>current_user</code> controller …\n"],["helper_method","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-helper_method","(*methods)",""],["helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-helpers","()","<p>Provides a proxy to access helpers methods from outside the view.\n"],["helpers","Rails::Engine","classes/Rails/Engine.html#method-c-helpers","()","<p>Returns a module with all the helpers defined for the engine.\n"],["helpers_paths","Rails::Engine","classes/Rails/Engine.html#method-c-helpers_paths","()","<p>Returns all registered helpers paths.\n"],["hidden_actions","AbstractController::Base","classes/AbstractController/Base.html#method-c-hidden_actions","()","<p>The list of hidden actions. Defaults to an empty array. This can be\nmodified by other modules or subclasses …\n"],["hidden_field","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-hidden_field","(method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-hidden_field","(object_name, method, options = {})","<p>Returns a hidden input tag tailored for accessing a specified attribute\n(identified by <code>method</code>) on an …\n"],["hidden_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-hidden_field_tag","(name, value = nil, options = {})","<p>Creates a hidden form input field used to transmit data that would be lost\ndue to HTTP&#39;s statelessness …\n"],["hidden_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hidden_namespaces","()",""],["hide!","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hide-21","()","<p>Convenience method to hide this generator from the available ones when\nrunning rails generator command. …\n"],["hide_action","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-hide_action","(*args)","<p>Sets all of the actions passed in as hidden actions.\n<p>Parameters\n<p><code>args</code> - A list of actions\n"],["hide_namespace","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespace","(*namespaces)",""],["hide_namespaces","Rails::Generators","classes/Rails/Generators.html#method-c-hide_namespaces","(*namespaces)",""],["highlight","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-highlight","(text, phrases, options = {})","<p>Highlights one or more <code>phrases</code> everywhere in <code>text</code>\nby inserting it into a <code>:highlighter</code> string. The highlighter …\n"],["hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-hook_for","(*names, &block)","<p>Invoke a generator based on the value supplied by the user to the given\noption named “name”. …\n"],["host","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host","()","<p>Returns the host for this request, such as example.com.\n"],["host","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-host","()","<p>The hostname used in the last request.\n"],["host=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-host-3D","(host)",""],["host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-host_with_port","()","<p>Returns a host:port string for this request, such as “example.com” or\n“example.com:8080”. …\n"],["hour","Numeric","classes/Numeric.html#method-i-hour","()",""],["hours","Numeric","classes/Numeric.html#method-i-hours","()",""],["hstore","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-hstore","(name, options = {})",""],["hstore_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-hstore_to_string","(object)",""],["html?","Mime::Type","classes/Mime/Type.html#method-i-html-3F","()",""],["html_document","ActionDispatch::Assertions::TagAssertions","classes/ActionDispatch/Assertions/TagAssertions.html#method-i-html_document","()",""],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters. This method is also\naliased as <code>h</code>.\n<p>In your ERB templates, …\n"],["html_escape_once","ERB::Util","classes/ERB/Util.html#method-c-html_escape_once","(s)","<p>A utility method for escaping HTML without affecting existing escaped\nentities.\n\n<pre>html_escape_once(&#39;1 &lt; ...</pre>\n"],["html_safe","String","classes/String.html#method-i-html_safe","()",""],["html_safe?","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-html_safe-3F","()",""],["html_safe?","Numeric","classes/Numeric.html#method-i-html_safe-3F","()",""],["html_safe?","Object","classes/Object.html#method-i-html_safe-3F","()",""],["http_basic_authenticate_with","ActionController::HttpAuthentication::Basic::ControllerMethods::ClassMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods/ClassMethods.html#method-i-http_basic_authenticate_with","(options = {})",""],["httpdate","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-httpdate","()","<p>Returns a string of the object&#39;s date and time in the format used by\nHTTP requests.\n\n<pre>Time.zone.now.httpdate ...</pre>\n"],["https!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-21","(flag = true)","<p>Specify whether or not the session should mimic a secure HTTPS request.\n\n<pre>session.https!\nsession.https!(false)</pre>\n"],["https?","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-https-3F","()","<p>Return <code>true</code> if the session is mimicking a secure HTTPS\nrequest.\n\n<pre>if session.https?\n  ...\nend</pre>\n"],["human","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-human","(options={})","<p>Transform the model name into a more humane format, using I18n. By default,\nit will underscore then humanize …\n"],["human","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-human","(rule, replacement)","<p>Specifies a humanized form of a string by a regular expression rule or by a\nstring mapping. When using …\n"],["human_attribute_name","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-human_attribute_name","(attribute, options = {})","<p>Transforms attribute names into a more human format, such as “First name”\ninstead of “ …\n"],["human_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-human_name","()",""],["humanize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-humanize","(lower_case_and_underscored_word)","<p>Capitalizes the first word and turns underscores into spaces and strips a\ntrailing “_id”, if …\n"],["humanize","String","classes/String.html#method-i-humanize","()","<p>Capitalizes the first word, turns underscores into spaces, and strips\n&#39;_id&#39;. Like <code>titleize</code>, this …\n"],["i18n_scope","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-i18n_scope","()","<p>Returns the <code>i18n_scope</code> for the class. Overwrite if you want\ncustom lookup.\n"],["i18n_scope","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-i18n_scope","()",""],["id","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id","()","<p>Returns the primary key value.\n"],["id=","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3D","(value)","<p>Sets the primary key value.\n"],["id?","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id-3F","()","<p>Queries the primary key value.\n"],["id_before_type_cast","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-id_before_type_cast","()","<p>Returns the primary key value before type cast.\n"],["identify","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-identify","(label)","<p>Returns a consistent, platform-independent identifier for\n<code>label</code>. Identifiers are positive integers less …\n"],["identity","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-identity","(event)",""],["ids","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-ids","()","<p>Pluck all the ID&#39;s for the relation using the table&#39;s primary key\n\n<pre>Person.ids # SELECT people.id ...</pre>\n"],["if_modified_since","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_modified_since","()",""],["if_modified_since=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_modified_since-3D","(last_modified)",""],["if_none_match","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match","()",""],["if_none_match=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-if_none_match-3D","(etag)",""],["if_none_match_etags","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-if_none_match_etags","()",""],["image_alt","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_alt","(src)","<p>Returns a string suitable for an html image tag alt attribute. The\n<code>src</code> argument is meant to be an image …\n"],["image_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_path","(source, options = {})","<p>Computes the path to an image asset. Full paths from the document root will\nbe passed through. Used internally …\n"],["image_submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-image_submit_tag","(source, options = {})","<p>Displays an image which when clicked will submit the form.\n<p><code>source</code> is passed to AssetTagHelper#path_to_image …\n"],["image_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-image_tag","(source, options={})","<p>Returns an HTML image tag for the <code>source</code>. The\n<code>source</code> can be a full path or a file.\n<p>Options\n<p>You can add …\n"],["image_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-image_url","(source, options = {})","<p>Computes the full URL to an image asset. This will use\n<code>image_path</code> internally, so most of their behaviors …\n"],["in","Date","classes/Date.html#method-i-in","(seconds)",""],["in","DateTime","classes/DateTime.html#method-i-in","(seconds)",""],["in","Time","classes/Time.html#method-i-in","(seconds)",""],["in?","Object","classes/Object.html#method-i-in-3F","(*args)","<p>Returns true if this object is included in the argument. Argument must be\nany object which responds to …\n"],["in_char_class?","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-in_char_class-3F","(codepoint, classes)","<p>Detect whether the codepoint is in a certain character class. Returns\n<code>true</code> when it&#39;s in the specified …\n"],["in_clause_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-in_clause_length","()","<p>Returns the maximum number of elements in an IN (x,y,z) clause. nil means\nno limit.\n"],["in_groups","Array","classes/Array.html#method-i-in_groups","(number, fill_with = nil)","<p>Splits or iterates over the array in <code>number</code> of groups, padding\nany remaining slots with <code>fill_with</code> unless …\n"],["in_groups_of","Array","classes/Array.html#method-i-in_groups_of","(number, fill_with = nil)","<p>Splits or iterates over the array in groups of size <code>number</code>,\npadding any remaining slots with <code>fill_with</code> …\n"],["in_time_zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-in_time_zone","(new_zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>, or the specified\nzone.\n"],["in_time_zone","Date","classes/Date.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Converts Date to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["in_time_zone","DateTime","classes/DateTime.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;Hawaii&#39;</span>             <span class=\"ruby-comment\"># =&gt; &#39;Hawaii&#39;</span>\n<span class=\"ruby-constant\">DateTime</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_time_zone","String","classes/String.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Converts String to a TimeWithZone in the current zone if Time.zone or\nTime.zone_default is set, otherwise …\n"],["in_time_zone","Time","classes/Time.html#method-i-in_time_zone","(zone = ::Time.zone)","<p>Returns the simultaneous time in <code>Time.zone</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;Hawaii&#39;</span>        <span class=\"ruby-comment\"># =&gt; &#39;Hawaii&#39;</span>\n<span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">utc</span>(<span class=\"ruby-value\">2000</span>).<span class=\"ruby-identifier\">in_time_zone</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include?","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-include-3F","(key)",""],["include?","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-include-3F","(attribute)","<p>Returns <code>true</code> if the error messages include an error for the\ngiven key <code>attribute</code>, <code>false</code> otherwise.\n\n<pre>person.errors.messages ...</pre>\n"],["include?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-include-3F","(record)","<p>Returns <code>true</code> if the given object is present in the collection.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-identifier\">has_many</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["include_fallbacks_module","I18n::Railtie","classes/I18n/Railtie.html#method-c-include_fallbacks_module","()",""],["include_with_range?","Range","classes/Range.html#method-i-include_with_range-3F","(value)","<p>Extends the default Range#include? to support range comparisons.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">include?</span>(<span class=\"ruby-value\">2</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">3</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["included","ActiveSupport::Concern","classes/ActiveSupport/Concern.html#method-i-included","(base = nil, &block)",""],["includes","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-includes","(*args)","<p>Specify relationships to be included in the result set. For example:\n\n<pre>users = User.includes(:address)\nusers.each ...</pre>\n"],["increment","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment","(attribute, by = 1)","<p>Initializes <code>attribute</code> to zero if <code>nil</code> and adds the\nvalue passed as <code>by</code> (default is 1). The increment is …\n"],["increment","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n"],["increment","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-i-increment","(name, amount = 1, options = nil)",""],["increment","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-increment","(name, amount = 1, options = nil)","<p>Increment an integer value in the cache.\n<p>Options are passed to the underlying cache implementation.\n<p>All …\n"],["increment!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-increment-21","(attribute, by = 1)","<p>Wrapper around <code>increment</code> that saves the record. This method\ndiffers from its non-bang version in that …\n"],["increment_counter","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-increment_counter","(counter_name, id)","<p>Increment a numeric field by one, via a direct SQL update.\n<p>This method is used primarily for maintaining …\n"],["increment_open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-increment_open_transactions","()",""],["indent","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-indent","(content, multiplier = 2)",""],["indent","String","classes/String.html#method-i-indent","(amount, indent_string=nil, indent_empty_lines=false)","<p>Indents the lines in the receiver:\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;def some_method\n  some_code\nend\n&quot;</span>.<span class=\"ruby-identifier\">indent</span>(<span class=\"ruby-value\">2</span>)\n<span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">some_method</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["indent!","String","classes/String.html#method-i-indent-21","(amount, indent_string=nil, indent_empty_lines=false)","<p>Same as <code>indent</code>, except it indents the receiver in-place.\n<p>Returns the indented string, or <code>nil</code> if there …\n"],["index","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-index","()",""],["index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index","(column_name, options = {})","<p>Adds a new index to the table. <code>column_name</code> can be a single\nSymbol, or an Array of Symbols. See SchemaStatements#add_index …\n"],["index","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-index","(column_name, options = {})","<p>Adds index options to the indexes hash, keyed by column name This is\nprimarily used to track indexes …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-index_algorithms","()","<p>A list of index algorithms, to be filled by adapters that support them.\nMySQL and PostgreSQL have support …\n"],["index_algorithms","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-index_algorithms","()",""],["index_algorithms","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-index_algorithms","()",""],["index_by","Enumerable","classes/Enumerable.html#method-i-index_by","()","<p>Convert an enumerable to a hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">people</span>.<span class=\"ruby-identifier\">index_by</span>(&amp;:<span class=\"ruby-identifier\">login</span>)\n  =<span class=\"ruby-operator\">&gt;</span> { <span class=\"ruby-string\">&quot;nextangle&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span><span class=\"ruby-operator\">&gt;</span>, <span class=\"ruby-string\">&quot;chade-&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_exists-3F","(table_name, column_name, options = {})","<p>Checks to see if an index exists on a table for a given index definition.\n\n<pre># Check an index exists\nindex_exists?(:suppliers, ...</pre>\n"],["index_exists?","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-index_exists-3F","(column_name, options = {})","<p>Checks to see if an index exists. See SchemaStatements#index_exists?\n"],["index_helper","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-index_helper","()",""],["index_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-index_name","()",""],["index_name_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_exists-3F","(table_name, index_name, default)","<p>Verifies the existence of an index with a given name.\n<p>The default argument is returned if the underlying …\n"],["index_name_for_remove","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-index_name_for_remove","(table_name, options = {})",""],["index_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-index_name_length","()","<p>Returns the maximum length of an index name.\n"],["index_name_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-index_name_length","()",""],["indexes","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-indexes","(table_name, name = nil)","<p>Returns an array of indexes for the given table.\n"],["indexes_per_table","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-indexes_per_table","()","<p>Returns the maximum number of indexes per table.\n"],["inet","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-inet","(name, options = {})",""],["infinity","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity","(options = {})",""],["infinity?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-infinity-3F","(value)",""],["inflections","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-inflections","(locale = :en)","<p>Yields a singleton instance of Inflector::Inflections so you can specify\nadditional inflector rules. …\n"],["info_signal","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-info_signal","()",""],["inheritable_copy","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-i-inheritable_copy","()",""],["inheritance_column","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column","()","<p>Defines the name of the table column which will store the class name on\nsingle-table inheritance situations. …\n"],["inheritance_column=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-inheritance_column-3D","(value)","<p>Sets the value of inheritance_column\n"],["inherited","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-inherited","(klass)","<p>When a class is inherited, wrap its helper module in a new module. This\nensures that the parent class&#39;s …\n"],["inherited","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-inherited","(klass)","<p>Sets the default wrapper key or model which will be used to determine\nwrapper key and attribute names. …\n"],["inherited","ActionController::Railties::Helpers","classes/ActionController/Railties/Helpers.html#method-i-inherited","(klass)",""],["inherited","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-inherited","(*)",""],["inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-i-inherited","(base)",""],["inherited","Rails::Application","classes/Rails/Application.html#method-c-inherited","(base)",""],["inherited","Rails::Engine","classes/Rails/Engine.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie","classes/Rails/Railtie.html#method-c-inherited","(base)",""],["inherited","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-inherited","(base)",""],["init_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-init_fallbacks","(fallbacks)",""],["init_with","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-init_with","(coder)","<p>Initialize an empty model object from <code>coder</code>.\n<code>coder</code> must contain the attributes necessary for initializing …\n"],["initialize","Rails::Engine","classes/Rails/Engine.html#method-c-initialize","()",""],["initialize!","Rails","classes/Rails.html#method-c-initialize-21","()",""],["initialize_copy","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-initialize_copy","(other)",""],["initialize_copy","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-initialize_copy","(other)",""],["initialize_generated_modules","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-initialize_generated_modules","()",""],["initialize_i18n","I18n::Railtie","classes/I18n/Railtie.html#method-c-initialize_i18n","(app)","<p>Setup i18n configuration.\n"],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-initialize_schema_migrations_table","()",""],["initialize_schema_migrations_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-initialize_schema_migrations_table","()","<p>Should not be called normally, but this operation is non-destructive. The\nmigrations module handles this …\n"],["initialize_sid","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-i-initialize_sid","()",""],["initialize_test_deliveries","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-initialize_test_deliveries","()",""],["initialized?","Rails","classes/Rails.html#method-c-initialized-3F","()",""],["initialized?","Rails::Application","classes/Rails/Application.html#method-i-initialized-3F","()","<p>Returns true if the application is initialized.\n"],["initializer","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-initializer","(filename, data=nil, &block)","<p>Create a new initializer with the provided code (either in a block or a\nstring).\n\n<pre>initializer(&quot;globals.rb&quot;) ...</pre>\n"],["initializer","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializer","(name, opts = {}, &blk)",""],["initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-initializers","()",""],["initializers","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers","()",""],["initializers_chain","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_chain","()",""],["initializers_for","Rails::Initializable::ClassMethods","classes/Rails/Initializable/ClassMethods.html#method-i-initializers_for","(binding)",""],["inquiry","String","classes/String.html#method-i-inquiry","()","<p>Wraps the current string in the <code>ActiveSupport::StringInquirer</code>\nclass, which gives you a prettier way to …\n"],["insert","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert","(index, *args, &block)",""],["insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert","(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = [])","<p>Returns the last auto-generated ID from the affected table.\n<p><code>id_value</code> will be returned unless the value …\n"],["insert","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-insert","(values)",""],["insert","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert","(*args, &block)",""],["insert_after","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_after","(index, *args, &block)",""],["insert_after","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_after","(*args, &block)",""],["insert_before","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-insert_before","(index, *args, &block)",""],["insert_before","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-insert_before","(*args, &block)",""],["insert_fixture","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_fixture","(fixture, table_name)","<p>Inserts the given fixture into the table. Overridden in adapters that\nrequire something beyond a simple …\n"],["insert_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Returns the last auto-generated ID from the affected table.\n"],["insert_sql","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)",""],["insert_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-insert_sql","(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)","<p>Executes an INSERT query and returns the new record&#39;s ID\n"],["inside_template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template","()",""],["inside_template?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-inside_template-3F","()",""],["inspect","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-inspect","()",""],["inspect","ActionDispatch::Routing::PathRedirect","classes/ActionDispatch/Routing/PathRedirect.html#method-i-inspect","()",""],["inspect","ActionView::Template","classes/ActionView/Template.html#method-i-inspect","()",""],["inspect","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-inspect","()","<p>Returns the contents of the record as a nicely formatted string.\n"],["inspect","ActiveRecord::Core::ClassMethods","classes/ActiveRecord/Core/ClassMethods.html#method-i-inspect","()","<p>Returns a string like &#39;Post(id:integer, title:string, body:text)&#39;\n"],["inspect","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-inspect","()",""],["inspect","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-inspect","()",""],["inspect","Date","classes/Date.html#method-i-inspect","()",""],["inspect","DateTime","classes/DateTime.html#method-i-inspect","()",""],["inspect","Rails::Info","classes/Rails/Info.html#method-c-inspect","()",""],["instance","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-instance","(locale = :en)",""],["instance","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-instance","()",""],["instance_method_already_implemented?","ActiveRecord::AttributeMethods::ClassMethods","classes/ActiveRecord/AttributeMethods/ClassMethods.html#method-i-instance_method_already_implemented-3F","(method_name)","<p>Raises a <code>ActiveRecord::DangerousAttributeError</code> exception when\nan Active Record method is defined in the …\n"],["instance_values","Object","classes/Object.html#method-i-instance_values","()","<p>Returns a hash with string keys that maps instance variable names without\n“@” to their corresponding …\n"],["instance_variable_names","Object","classes/Object.html#method-i-instance_variable_names","()","<p>Returns an array of instance variable names as strings including “@”.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">C</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>(<span class=\"ruby-identifier\">x</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["instantiate","ActiveRecord::Persistence::ClassMethods","classes/ActiveRecord/Persistence/ClassMethods.html#method-i-instantiate","(record, column_types = {})","<p>Given an attributes hash, <code>instantiate</code> returns a new instance\nof the appropriate class.\n<p>For example, <code>Post.all</code> …\n"],["instantiate_all_loaded_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_all_loaded_fixtures","(object, load_instances = true)",""],["instantiate_fixtures","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-instantiate_fixtures","(object, fixture_set, load_instances = true)",""],["instrument","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument","()",""],["instrument","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrument","(name, payload = {})",""],["instrument","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-instrument","(name, payload={})","<p>Instrument the given block by measuring the time taken to execute it and\npublish it. Notice that events …\n"],["instrument=","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-instrument-3D","(boolean)","<p>Set to <code>true</code> if cache stores should be instrumented. Default is\n<code>false</code>.\n"],["instrumenter","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-instrumenter","()",""],["int4range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int4range","(name, options = {})",""],["int8range","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-int8range","(name, options = {})",""],["internal?","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-internal-3F","()",""],["internal_methods","AbstractController::Base","classes/AbstractController/Base.html#method-c-internal_methods","()","<p>A list of all internal methods for a controller. This finds the first\nabstract superclass of a controller, …\n"],["invalid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-invalid-3F","(context = nil)","<p>Performs the opposite of <code>valid?</code>. Returns <code>true</code> if\nerrors were added, <code>false</code> otherwise.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["inverse_of","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-inverse_of","(command, args, &block)","<p>Returns the inverse of the given command. For example:\n\n<pre>recorder.inverse_of(:rename_table, [:old, :new]) ...</pre>\n"],["invoke","Rails::Generators","classes/Rails/Generators.html#method-c-invoke","(namespace, args=ARGV, config={})","<p>Receives a namespace, arguments and the behavior to invoke the generator.\nIt&#39;s used as the default …\n"],["ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-ip","()",""],["ips_from","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-ips_from","(header)",""],["irregular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-irregular","(singular, plural)","<p>Specifies a new irregular that applies to both pluralization and\nsingularization at the same time. This …\n"],["is_a?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-is_a-3F","(klass)","<p>Say we&#39;re a Time to thwart type checking.\n"],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_missing?","LoadError","classes/LoadError.html#method-i-is_missing-3F","(location)",""],["is_utf8?","String","classes/String.html#method-i-is_utf8-3F","()",""],["isdst","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-isdst","()",""],["iso8601","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-iso8601","(fraction_digits = 0)",""],["isolate_namespace","Rails::Engine","classes/Rails/Engine.html#method-c-isolate_namespace","(mod)",""],["j","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j","(javascript)",""],["javascript_include_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-javascript_include_tag","(*sources)","<p>Returns an HTML script tag for each of the <code>sources</code> provided.\n<p>Sources may be paths to JavaScript files. …\n"],["javascript_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_path","(source, options = {})","<p>Computes the path to a javascript asset in the public javascripts\ndirectory. If the <code>source</code> filename has …\n"],["javascript_tag","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-javascript_tag","(content_or_options_with_block = nil, html_options = {}, &block)","<p>Returns a JavaScript tag with the <code>content</code> inside. Example:\n\n<pre>javascript_tag &quot;alert(&#39;All is good&#39;)&quot;</pre>\n<p>Returns: …\n"],["javascript_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-javascript_url","(source, options = {})","<p>Computes the full URL to a javascript asset in the public javascripts\ndirectory. This will use <code>javascript_path</code> …\n"],["javascripts","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-javascripts","()",""],["joined_includes_values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-joined_includes_values","()","<p>Joins that are also marked for preloading. In which case we should just\neager load them. Note that this …\n"],["joins","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-joins","(*args)","<p>Performs a joins on <code>args</code>:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">joins</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.* <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">INNER</span> <span class=\"ruby-constant\">JOIN</span> <span class=\"ruby-string\">&quot;posts&quot;</span> <span class=\"ruby-constant\">ON</span> <span class=\"ruby-string\">&quot;posts&quot;</span>.<span class=\"ruby-string\">&quot;user_id&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["joins_per_query","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-joins_per_query","()","<p>Returns maximum number of joins in a single query.\n"],["json","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-json","(name, options = {})",""],["json_escape","ERB::Util","classes/ERB/Util.html#method-c-json_escape","(s)","<p>A utility method for escaping HTML entities in JSON strings using uXXXX\nJavaScript escape sequences for …\n"],["json_regexp","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-json_regexp","()",""],["json_resource_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-json_resource_errors","()",""],["json_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-json_to_string","(object)",""],["keep","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keep","(k = nil)","<p>Keeps either the entire current flash or a specific flash entry available\nfor the next action:\n\n<pre>flash.keep ...</pre>\n"],["key?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-key-3F","(name)",""],["key?","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-key-3F","(key)",""],["key?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-i-key-3F","(oid)",""],["key?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-key-3F","(key)",""],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["key?","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-key-3F","(key)","<p>Checks the hash for a key matching the argument passed in:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["key_generator","Rails::Application","classes/Rails/Application.html#method-i-key_generator","()","<p>Return the application&#39;s KeyGenerator\n"],["key_matcher","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-key_matcher","(pattern, options)","<p>Add the namespace defined in the options to a pattern designed to match\nkeys. Implementations that support …\n"],["keys","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-keys","()",""],["keys","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-keys","()","<p>Returns all message keys.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">messages</span> <span class=\"ruby-comment\"># =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...</span>\n</pre>\n"],["keys","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-keys","()",""],["kilobyte","Numeric","classes/Numeric.html#method-i-kilobyte","()",""],["kilobytes","Numeric","classes/Numeric.html#method-i-kilobytes","()",""],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-kind","()","<p>Return the kind for this validator.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["kind","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-kind","()","<p>Returns the kind of the validator.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">PresenceValidator</span>.<span class=\"ruby-identifier\">kind</span>   <span class=\"ruby-comment\"># =&gt; :presence</span>\n<span class=\"ruby-constant\">UniquenessValidator</span>.<span class=\"ruby-identifier\">kind</span> <span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["kind_of?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-kind_of-3F","(klass)",""],["klass","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-i-klass","()",""],["klass","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-i-klass","()","<p>Returns the class for the macro.\n<p><code>composed_of :balance, class_name: &#39;Money&#39;</code> returns the\nMoney class …\n"],["l","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-l","(*args)",""],["l","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-l","(*args)",""],["label","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-label","(method, text = nil, options = {}, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-label","(object_name, method, content_or_options = nil, options = nil, &block)","<p>Returns a label tag tailored for labelling an input field for a specified\nattribute (identified by <code>method</code> …\n"],["label_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-label_tag","(name = nil, content_or_options = nil, options = nil, &block)","<p>Creates a label element. Accepts a block.\n<p>Options\n<p>Creates standard HTML attributes for the tag.\n"],["last","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-last","()",""],["last","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-last","(*args)","<p>Returns the last record, or the last <code>n</code> records, from the\ncollection. If the collection is empty, the …\n"],["last","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last","(limit = nil)","<p>Find the last record (or last N records if a parameter is supplied). If no\norder is defined it will order …\n"],["last","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-last","()",""],["last","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-last","()",""],["last","String","classes/String.html#method-i-last","(limit = 1)","<p>Returns the last character of the string. If a limit is supplied, returns a\nsubstring from the end of …\n"],["last!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-last-21","()","<p>Same as <code>last</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>last!</code> accepts no …\n"],["last_inserted_id","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-last_inserted_id","(result)",""],["last_inserted_id","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-last_inserted_id","(result)",""],["last_modified","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified","()",""],["last_modified=","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3D","(utc_time)",""],["last_modified?","ActionDispatch::Http::Cache::Response","classes/ActionDispatch/Http/Cache/Response.html#method-i-last_modified-3F","()",""],["last_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_month","()",""],["last_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_quarter","()",""],["last_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_week","(start_day = Date.beginning_of_week)",""],["last_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-last_year","()",""],["layout","AbstractController::Layouts::ClassMethods","classes/AbstractController/Layouts/ClassMethods.html#method-i-layout","(layout, conditions = {})","<p>Specify the layout to use for this class.\n<p>If the specified layout is a:\n<p>String &mdash; the String is the template …\n"],["lease","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-lease","()",""],["length","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-length","()","<p>Returns the size of the collection calling <code>size</code> on the target.\nIf the collection has been already loaded, …\n"],["length","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-i-length","()",""],["length","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-i-length","()",""],["lib","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-lib","()",""],["lib","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-lib","(filename, data=nil, &block)","<p>Create a new file in the lib/ directory. Code can be specified in a block\nor a data string can be given. …\n"],["lib","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-lib","()",""],["license","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-license","()",""],["limit","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-limit","(value)","<p>Specifies a limit for the number of records to retrieve.\n\n<pre>User.limit(10) # generated SQL has &#39;LIMIT 10&#39; ...</pre>\n"],["limit","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-limit","(limit)","<p>Limits the byte size of the string to a number of bytes without breaking\ncharacters. Usable when the …\n"],["limited_update_conditions","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["limited_update_conditions","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-limited_update_conditions","(where_sql, quoted_table_name, quoted_primary_key)",""],["link_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to","(name = nil, options = nil, html_options = nil, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code>. See the valid options …\n"],["link_to_function","ActionView::Helpers::JavaScriptHelper","classes/ActionView/Helpers/JavaScriptHelper.html#method-i-link_to_function","(name, function, html_options={})","<p>Returns a link whose <code>onclick</code> handler triggers the passed\nJavaScript.\n<p>The helper receives a name, JavaScript …\n"],["link_to_if","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_if","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> if <code>condition</code> is true, …\n"],["link_to_unless","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless","(condition, name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless <code>condition</code> is true, …\n"],["link_to_unless_current","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-link_to_unless_current","(name, options = {}, html_options = {}, &block)","<p>Creates a link tag of the given <code>name</code> using a URL created by\nthe set of <code>options</code> unless the current request …\n"],["listeners_for","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listeners_for","(name)",""],["listening?","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-listening-3F","(name)",""],["load","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-load","()","<p>Causes the records to be loaded from the database if they have not been\nloaded already. You can use this …\n"],["load","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-i-load","()","<p>Loads the Unicode database and returns all the internal objects of\nUnicodeDatabase.\n"],["load_and_configure_sdoc","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-load_and_configure_sdoc","()",""],["load_and_configure_sdoc","Rails::API::Task","classes/Rails/API/Task.html#method-i-load_and_configure_sdoc","()",""],["load_console","Rails::Engine","classes/Rails/Engine.html#method-c-load_console","(app=self)","<p>Load console and invoke the registered hooks. Check\n<code>Rails::Railtie.console</code> for more info.\n"],["load_generators","Rails::Engine","classes/Rails/Engine.html#method-c-load_generators","(app=self)","<p>Load rails generators and invoke the registered hooks. Check\n<code>Rails::Railtie.generators</code> for more info. …\n"],["load_paths","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-load_paths","()",""],["load_rack_cache","Rails::Application","classes/Rails/Application.html#method-i-load_rack_cache","()",""],["load_runner","Rails::Engine","classes/Rails/Engine.html#method-c-load_runner","(app=self)","<p>Load Rails runner and invoke the registered hooks. Check\n<code>Rails::Railtie.runner</code> for more info.\n"],["load_seed","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-load_seed","()",""],["load_seed","Rails::Engine","classes/Rails/Engine.html#method-c-load_seed","()","<p>Load data from db/seeds.rb file. It can be used in to load engines&#39;\nseeds, e.g.:\n<p>Blog::Engine.load_seed …\n"],["load_session","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-i-load_session","(env)",""],["load_session","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-load_session","(env)",""],["load_target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-load_target","()",""],["load_tasks","Rails::Engine","classes/Rails/Engine.html#method-c-load_tasks","(app=self)","<p>Load Rake, railties tasks and invoke the registered hooks. Check\n<code>Rails::Railtie.rake_tasks</code> for more info. …\n"],["load_with_autoloading","Marshal","classes/Marshal.html#method-c-load_with_autoloading","(source)",""],["loaded?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-loaded-3F","()","<p>Returns <code>true</code> if the association has been loaded, otherwise\n<code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span>.<span class=\"ruby-identifier\">loaded?</span> <span class=\"ruby-comment\"># =&gt; false</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">pets</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local","(*args)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from given values. …\n"],["local?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-local-3F","()","<p>True if the request came from localhost, 127.0.0.1.\n"],["local_constant_names","Module","classes/Module.html#method-i-local_constant_names","()","<p><strong>DEPRECATED</strong>: Use <code>local_constants</code> instead.\n<p>Returns the names of the constants defined locally as strings. …\n"],["local_offset","DateTime","classes/DateTime.html#method-c-local_offset","()","<p><strong>DEPRECATED</strong>: Use <code>DateTime.civil_from_format</code>\ndirectly.\n"],["local_time","Time","classes/Time.html#method-c-local_time","(*args)","<p><strong>DEPRECATED</strong>: Use +Time#local+ instead.\n<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> …\n"],["local_to_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-local_to_utc","(time, dst=true)","<p>Adjust the given time to the simultaneous time in UTC. Returns a Time.utc()\ninstance.\n"],["localize","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code>. Also aliased as <code>l</code>.\n"],["localize","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-localize","(*args)","<p>Delegates to <code>I18n.localize</code> with no additional functionality.\n<p>See rubydoc.info/github/svenfuchs/i18n/master/I18n/Backend/Base:localize …\n"],["locals_for","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-locals_for","(view)",""],["localtime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-localtime","()","<p>Returns a <code>Time.local()</code> instance of the simultaneous time in\nyour system&#39;s <code>ENV['TZ']</code> zone.\n"],["location","ActionController::Metal","classes/ActionController/Metal.html#method-i-location","()",""],["location","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location","()",""],["location=","ActionController::Metal","classes/ActionController/Metal.html#method-i-location-3D","(url)",""],["location=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-location-3D","(url)",""],["lock","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-lock","(locks = true)","<p>Specifies locking settings (default to <code>true</code>). For more\ninformation on locking, please see +ActiveRecord::Locking+. …\n"],["lock!","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-lock-21","(lock = true)","<p>Obtain a row lock on this record. Reloads the record to obtain the\nrequested lock. Pass an SQL locking …\n"],["locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column","()","<p>The version column used for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_column=","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_column-3D","(value)","<p>Set the column to use for optimistic locking. Defaults to\n<code>lock_version</code>.\n"],["locking_enabled?","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-locking_enabled-3F","()","<p>Returns true if the <code>lock_optimistically</code> flag is set to true\n(which it is, by default) and the table includes …\n"],["log","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-log","(sql, name = \"SQL\", binds = [])",""],["log","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-log","()",""],["log","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-log","(*args)","<p>Define log for backwards compatibility. If just one argument is sent,\ninvoke say, otherwise invoke say_status. …\n"],["log_error","ActionController::Live","classes/ActionController/Live.html#method-i-log_error","(exception)",""],["log_level","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-log_level","()",""],["log_path","Rails::Server","classes/Rails/Server.html#method-i-log_path","()",""],["log_subscribers","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-log_subscribers","()",""],["logged","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-logged","(level)",""],["logger","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-logger","()",""],["logger","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-logger","()",""],["logger","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-c-logger","()",""],["logger","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-logger","()",""],["lookup","Mime::Type","classes/Mime/Type.html#method-c-lookup","(string)",""],["lookup_ancestors","ActiveModel::Translation","classes/ActiveModel/Translation.html#method-i-lookup_ancestors","()","<p>When localizing a string, it goes through the lookup returned by this\nmethod, which is used in ActiveModel::Name#human …\n"],["lookup_by_extension","Mime::Type","classes/Mime/Type.html#method-c-lookup_by_extension","(extension)",""],["lookup_context","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-lookup_context","()","<p>LookupContext is the object responsible to hold all information required to\nlookup templates, i.e. view …\n"],["lookup_store","ActiveSupport::Cache","classes/ActiveSupport/Cache.html#method-c-lookup_store","(*store_option)","<p>Creates a new CacheStore object according to the given options.\n<p>If no arguments are passed to this method, …\n"],["ltree","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-ltree","(name, options = {})",""],["macaddr","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-macaddr","(name, options = {})",""],["mail","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mail","(headers = {}, &block)","<p>The main method that creates the message and renders the email templates.\nThere are two ways to call …\n"],["mail_to","ActionView::Helpers::UrlHelper","classes/ActionView/Helpers/UrlHelper.html#method-i-mail_to","(email_address, name = nil, html_options = {}, &block)","<p>Creates a mailto link tag to the specified <code>email_address</code>,\nwhich is also used as the name of the link …\n"],["mailer","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-mailer","()","<p>Access the mailer instance.\n"],["mailer_class","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-mailer_class","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-mailer_name","()",""],["mailer_name","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-mailer_name","()",""],["many?","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-many-3F","(&block)","<p>Returns true if the collection has more than one record. Equivalent to\n<code>collection.size &gt; 1</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["many?","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-many-3F","()","<p>Returns true if there is more than one record.\n"],["many?","Enumerable","classes/Enumerable.html#method-i-many-3F","()","<p>Returns <code>true</code> if the enumerable has more than 1 element.\nFunctionally equivalent to <code>enum.to_a.size &gt;</code> …\n"],["mark_for_destruction","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-mark_for_destruction","()","<p>Marks this record to be destroyed as part of the parents save transaction.\nThis does <em>not</em> actually destroy …\n"],["marked_for_destruction?","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-marked_for_destruction-3F","()","<p>Returns whether or not this record will be destroyed as part of the parents\nsave transaction.\n<p>Only useful …\n"],["marshal_dump","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_dump","()",""],["marshal_dump","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-marshal_dump","()",""],["marshal_dump","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_dump","()",""],["marshal_load","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-marshal_load","(array)",""],["marshal_load","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-marshal_load","(calls)",""],["marshal_load","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-marshal_load","(variables)",""],["match","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-match","(path, options=nil)","<p>Matches a url pattern to one or more routes. Any symbols in a pattern are\ninterpreted as url query parameters …\n"],["match","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-match","(path, *rest)","<p>match &#39;path&#39; =&gt; &#39;controller#action&#39; match\n&#39;path&#39;, to: &#39;controller#action …\n"],["match","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-match","(model, name)",""],["match","HTML::Selector","classes/HTML/Selector.html#method-i-match","(element, first_only = false)","<p>Matches an element against the selector.\n<p>For a simple selector this method returns an array with the element …\n"],["match?","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-match-3F","(path)",""],["mattr_accessor","Module","classes/Module.html#method-i-mattr_accessor","(*syms)","<p>Extends the module object with module and instance accessors for class\nattributes, just like the native …\n"],["mattr_reader","Module","classes/Module.html#method-i-mattr_reader","(*syms)",""],["mattr_writer","Module","classes/Module.html#method-i-mattr_writer","(*syms)",""],["maximum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-maximum","(column_name, options = {})","<p>Calculates the maximum value on a given column. The value is returned with\nthe same data type of the …\n"],["mb_chars","String","classes/String.html#method-i-mb_chars","()","<p>Multibyte proxy\n<p><code>mb_chars</code> is a multibyte safe proxy for string methods.\n<p>It creates and returns an instance …\n"],["media_type","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-media_type","()","<p>The <code>String</code> MIME type of the request.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># get &quot;/articles&quot;</span>\n<span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">media_type</span> <span class=\"ruby-comment\"># =&gt; &quot;application/x-www-form-urlencoded&quot;</span>\n</pre>\n"],["megabyte","Numeric","classes/Numeric.html#method-i-megabyte","()",""],["megabytes","Numeric","classes/Numeric.html#method-i-megabytes","()",""],["member","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-member","()","<p>To add a member route, add a member block into the resource block:\n\n<pre>resources :photos do\n  member do\n  ...</pre>\n"],["merge","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-merge","(headers_or_env)",""],["merge","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-merge","(other)","<p>Merges in the conditions from <code>other</code>, if <code>other</code> is\nan <code>ActiveRecord::Relation</code>. Returns an array representing …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash, &block)","<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],["merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-merge","(hash, &block)","<p>This method has the same semantics of <code>update</code>, except it does\nnot modify the receiver but rather returns …\n"],["merge!","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-i-merge-21","(headers_or_env)",""],["message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-message","()","<p>Returns the corresponding message for the current HTTP status code:\n\n<pre>response.status = 200\nresponse.message ...</pre>\n"],["message","ActionMailer::MailHelper","classes/ActionMailer/MailHelper.html#method-i-message","()","<p>Access the message instance.\n"],["method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method","()","<p>Returns the original value of the environment&#39;s REQUEST_METHOD, even if\nit was overridden by middleware. …\n"],["method_added","AbstractController::Base","classes/AbstractController/Base.html#method-c-method_added","(name)","<p>Refresh the cached action_methods when a new action_method is added.\n"],["method_for_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-method_for_action","(action_name)",""],["method_missing","AbstractController::Collector","classes/AbstractController/Collector.html#method-i-method_missing","(symbol, &block)",""],["method_missing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-method_missing","(selector, *args, &block)","<p>ROUTES TODO: These assertions should really work in an integration context\n"],["method_missing","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-method_missing","(sym, *args, &block)","<p>Delegate unhandled messages to the current session instance.\n"],["method_missing","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-method_missing","(method_name, *args)",""],["method_missing","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-method_missing","(method, *args, &block)","<p>Allows access to the object attributes, which are held in the hash returned\nby <code>attributes</code>, as though …\n"],["method_missing","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-method_missing","(method, *arguments, &block)",""],["method_missing","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-i-method_missing","(level, message = nil)",""],["method_missing","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-method_missing","(method, *args, &block)","<p>Forward all undefined methods to the wrapped string.\n"],["method_missing","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-i-method_missing","(name, *args)",""],["method_missing","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-method_missing","(sym, *args, &block)","<p>Send the missing method to <code>time</code> instance, and wrap result in a\nnew TimeWithZone with the existing <code>time_zone</code> …\n"],["method_missing","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-method_missing","(*args, &block)",""],["method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-method_symbol","()","<p>Returns a symbol form of the #method\n"],["middleware","ActionController::Metal","classes/ActionController/Metal.html#method-c-middleware","()","<p>Alias for <code>middleware_stack</code>.\n"],["middleware","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-middleware","()","<p>Middleware class can be inserted as a Rack handler to be local cache for\nthe duration of request.\n"],["middleware","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-middleware","()","<p>Returns the middleware stack for the engine.\n"],["middleware","Rails::Server","classes/Rails/Server.html#method-i-middleware","()",""],["midnight","Date","classes/Date.html#method-i-midnight","()",""],["midnight","DateTime","classes/DateTime.html#method-i-midnight","()",""],["midnight","Time","classes/Time.html#method-i-midnight","()",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-migrate","(direction)",""],["migrate","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-migrate","(direction)","<p>Execute this migration in the named direction\n"],["migration_keys","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-migration_keys","()","<p>Lists the valid migration options\n"],["migration_keys","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-migration_keys","()","<p>Adds `:array` as a valid migration key\n"],["migration_template","Rails::Generators::Migration","classes/Rails/Generators/Migration.html#method-i-migration_template","(source, destination=nil, config={})","<p>Creates a migration template at the given destination. The difference to\nthe default template method …\n"],["migrations_paths","ActiveRecord::Schema","classes/ActiveRecord/Schema.html#method-i-migrations_paths","()","<p>Returns the migrations paths.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Schema</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">migrations_paths</span>\n<span class=\"ruby-comment\"># =&gt; [&quot;db/migrate&quot;] # Rails migration ...</span>\n</pre>\n"],["mime_type","ActionView::Template","classes/ActionView/Template.html#method-i-mime_type","()",""],["minimum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-minimum","(column_name, options = {})","<p>Calculates the minimum value on a given column. The value is returned with\nthe same data type of the …\n"],["minus_with_coercion","Time","classes/Time.html#method-i-minus_with_coercion","(other)","<p>Time#- can also be used to determine the number of seconds between two Time\ninstances. We&#39;re layering …\n"],["minus_without_coercion","Time","classes/Time.html#method-i-minus_without_coercion","(other)",""],["minus_without_duration","Time","classes/Time.html#method-i-minus_without_duration","(other)",""],["minute","Numeric","classes/Numeric.html#method-i-minute","()",""],["minutes","Numeric","classes/Numeric.html#method-i-minutes","()",""],["missing_name","NameError","classes/NameError.html#method-i-missing_name","()","<p>Extract the name of the missing constant from the exception message.\n"],["missing_name?","NameError","classes/NameError.html#method-i-missing_name-3F","(name)","<p>Was this exception raised because the given name was missing?\n"],["model_name","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-i-model_name","()","<p>Returns an ActiveModel::Name object for module. It can be used to retrieve\nall kinds of naming-related …\n"],["model_name_from_record_or_class","ActionController::ModelNaming","classes/ActionController/ModelNaming.html#method-i-model_name_from_record_or_class","(record_or_class)",""],["model_name_from_record_or_class","ActionView::ModelNaming","classes/ActionView/ModelNaming.html#method-i-model_name_from_record_or_class","(record_or_class)",""],["module_namespacing","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-module_namespacing","(&block)","<p>Wrap block with namespace of current application if namespace exists and is\nnot skipped\n"],["modules_for_helpers","AbstractController::Helpers::ClassMethods","classes/AbstractController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Returns a list of modules, normalized from the acceptable kinds of helpers\nwith the following behavior: …\n"],["modules_for_helpers","ActionController::Helpers::ClassMethods","classes/ActionController/Helpers/ClassMethods.html#method-i-modules_for_helpers","(args)","<p>Overwrite modules_for_helpers to accept :all as argument, which loads all\nhelpers in helpers_path.\n<p>Parameters …\n"],["monday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-monday","()","<p>Returns Monday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],["month","Integer","classes/Integer.html#method-i-month","()",""],["month_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-month_field","(object_name, method, options = {})","<p>Returns a text_field of type “month”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">month_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;born_on&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_born_on&quot; ...</span>\n</pre>\n"],["month_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-month_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “month”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["months","Integer","classes/Integer.html#method-i-months","()","<p>Enables the use of time calculations and declarations, like\n<code>45.minutes + 2.hours + 4.years</code>.\n<p>These methods …\n"],["months_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-months_ago","(months)","<p>Returns a new date/time the specified number of months ago.\n"],["months_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-months_since","(months)","<p>Returns a new date/time the specified number of months in the future.\n"],["mount","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-mount","(app, options = nil)","<p>Mount a Rack-based application to be used within the application.\n\n<pre>mount SomeRackApp, at: &quot;some_route&quot;</pre>\n"],["ms","Benchmark","classes/Benchmark.html#method-c-ms","()","<p>Benchmark realtime in milliseconds.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Benchmark</span>.<span class=\"ruby-identifier\">realtime</span> { <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">all</span> }\n<span class=\"ruby-comment\"># =&gt; 8.0e-05</span>\n\n<span class=\"ruby-constant\">Benchmark</span>.<span class=\"ruby-identifier\">ms</span> { <span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">all</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mtime","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-i-mtime","()",""],["multipart=","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-multipart-3D","(multipart)",""],["multiple_of?","Integer","classes/Integer.html#method-i-multiple_of-3F","(number)","<p>Check whether the integer is evenly divisible by the argument.\n\n<pre class=\"ruby\"><span class=\"ruby-value\">0</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\">#=&gt; true</span>\n<span class=\"ruby-value\">6</span>.<span class=\"ruby-identifier\">multiple_of?</span>(<span class=\"ruby-value\">5</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["mute","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-mute","()","<p>Silence the logger within a block.\n"],["name","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-name","()",""],["name","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-name","()","<p>Report class name as &#39;Time&#39; to thwart type checking.\n"],["names","QualifiedConstUtils","classes/QualifiedConstUtils.html#method-c-names","(path)",""],["namespace","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-namespace","(path, options = {})","<p>See ActionDispatch::Routing::Mapper::Scoping#namespace\n"],["namespace","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-namespace","(path, options = {})","<p>Scopes routes to a specific namespace. For example:\n\n<pre>namespace :admin do\n  resources :posts\nend</pre>\n<p>This generates …\n"],["namespace","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-namespace","(name=nil)","<p>Convenience method to get the namespace from the class name. It&#39;s the\nsame as Thor default except …\n"],["namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespace","()",""],["namespaced?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced-3F","()",""],["namespaced_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_class_path","()",""],["namespaced_file_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_file_path","()",""],["namespaced_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-namespaced_path","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-native_database_types","()",""],["native_database_types","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-native_database_types","()","<p>Returns a hash of mappings from the abstract data types to the native\ndatabase types. See TableDefinition#column …\n"],["navigation_behavior","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_behavior","(error)","<p>This is the common behavior for formats associated with browsing, like\n:html, :iphone and so forth.\n"],["navigation_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-navigation_location","()",""],["negotiate_format","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-negotiate_format","(request)",""],["negotiate_mime","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-negotiate_mime","(order)","<p>Receives an array of mimes and return the first user sent mime that matches\nthe order array.\n"],["nested","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-nested","()",""],["nested_dependencies","ActionView::Digestor","classes/ActionView/Digestor.html#method-i-nested_dependencies","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-nested_under_indifferent_access","()",""],["nested_under_indifferent_access","Hash","classes/Hash.html#method-i-nested_under_indifferent_access","()","<p>Called when object is nested under an object that receives\n#with_indifferent_access. This method will …\n"],["new","AbstractController::DoubleRenderError","classes/AbstractController/DoubleRenderError.html#method-c-new","(message = nil)",""],["new","AbstractController::Helpers::ClassMethods::MissingHelperError","classes/AbstractController/Helpers/ClassMethods/MissingHelperError.html#method-c-new","(error, path)",""],["new","ActionController::Metal","classes/ActionController/Metal.html#method-c-new","()",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware","classes/ActionController/Middleware.html#method-c-new","(app)",""],["new","ActionController::Middleware::ActionMiddleware","classes/ActionController/Middleware/ActionMiddleware.html#method-c-new","(controller, app)",""],["new","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-c-new","(mimes)",""],["new","ActionController::Parameters","classes/ActionController/Parameters.html#method-c-new","(attributes = nil)","<p>Returns a new instance of <code>ActionController::Parameters</code>. Also,\nsets the <code>permitted</code> attribute to the default …\n"],["new","ActionController::RequestForgeryProtection::ProtectionMethods::Exception","classes/ActionController/RequestForgeryProtection/ProtectionMethods/Exception.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::NullSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/NullSession.html#method-c-new","(controller)",""],["new","ActionController::RequestForgeryProtection::ProtectionMethods::ResetSession","classes/ActionController/RequestForgeryProtection/ProtectionMethods/ResetSession.html#method-c-new","(controller)",""],["new","ActionController::Responder","classes/ActionController/Responder.html#method-c-new","(controller, resources, options={})",""],["new","ActionDispatch::Callbacks","classes/ActionDispatch/Callbacks.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies","classes/ActionDispatch/Cookies.html#method-c-new","(app)",""],["new","ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","classes/ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html#method-c-new","(*args)",""],["new","ActionDispatch::DebugExceptions","classes/ActionDispatch/DebugExceptions.html#method-c-new","(app, routes_app = nil)",""],["new","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-new","(env, exception)",""],["new","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-c-new","(root, cache_control)",""],["new","ActionDispatch::Flash","classes/ActionDispatch/Flash.html#method-c-new","(app)",""],["new","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-c-new","(env)",""],["new","ActionDispatch::Http::Headers","classes/ActionDispatch/Http/Headers.html#method-c-new","(env = {})",""],["new","ActionDispatch::Http::ParameterFilter","classes/ActionDispatch/Http/ParameterFilter.html#method-c-new","(filters = [])",""],["new","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-c-new","(env)",""],["new","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-new","(env)",""],["new","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-c-new","(app)","<p>Create and initialize a new Session instance.\n"],["new","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-c-new","(*args)",""],["new","ActionDispatch::MiddlewareStack::Middleware","classes/ActionDispatch/MiddlewareStack/Middleware.html#method-c-new","(klass_or_name, *args, &block)",""],["new","ActionDispatch::ParamsParser","classes/ActionDispatch/ParamsParser.html#method-c-new","(app, parsers = {})",""],["new","ActionDispatch::ParamsParser::ParseError","classes/ActionDispatch/ParamsParser/ParseError.html#method-c-new","(message, original_exception)",""],["new","ActionDispatch::PublicExceptions","classes/ActionDispatch/PublicExceptions.html#method-c-new","(public_path)",""],["new","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-new","(store = Rails.cache)",""],["new","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-new","(app, condition=nil)",""],["new","ActionDispatch::RemoteIp","classes/ActionDispatch/RemoteIp.html#method-c-new","(app, check_ip_spoofing = true, custom_proxies = nil)","<p>Create a new <code>RemoteIp</code> middleware instance.\n<p>The <code>check_ip_spoofing</code> option is on by default. When on, an …\n"],["new","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-c-new","(env, middleware)",""],["new","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-c-new","(env)",""],["new","ActionDispatch::RequestId","classes/ActionDispatch/RequestId.html#method-c-new","(app)",""],["new","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-c-new","(status = 200, header = {}, body = [])",""],["new","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-c-new","()",""],["new","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-c-new","(view)",""],["new","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-new","()",""],["new","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-c-new","(*)",""],["new","ActionDispatch::SSL","classes/ActionDispatch/SSL.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-c-new","(app, options = {})","<p>Create a new store. The cache to use can be passed in the\n<code>:cache</code> option. If it is not specified,\n<code>Rails.cache</code> …\n"],["new","ActionDispatch::Session::Compatibility","classes/ActionDispatch/Session/Compatibility.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::Session::CookieStore","classes/ActionDispatch/Session/CookieStore.html#method-c-new","(app, options={})",""],["new","ActionDispatch::Session::MemCacheStore","classes/ActionDispatch/Session/MemCacheStore.html#method-c-new","(app, options = {})",""],["new","ActionDispatch::ShowExceptions","classes/ActionDispatch/ShowExceptions.html#method-c-new","(app, exceptions_app)",""],["new","ActionDispatch::Static","classes/ActionDispatch/Static.html#method-c-new","(app, path, cache_control=nil)",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-c-new","(env = {})",""],["new","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-new","(method_name=nil, *args)","<p>Instantiate a new mailer object. If <code>method_name</code> is not\n<code>nil</code>, the mailer will be initialized according …\n"],["new","ActionMailer::Collector","classes/ActionMailer/Collector.html#method-c-new","(context, &block)",""],["new","ActionMailer::NonInferrableMailerError","classes/ActionMailer/NonInferrableMailerError.html#method-c-new","(name)",""],["new","ActionView::DependencyTracker::ERBTracker","classes/ActionView/DependencyTracker/ERBTracker.html#method-c-new","(name, template)",""],["new","ActionView::Digestor","classes/ActionView/Digestor.html#method-c-new","(name, format, finder, options={})",""],["new","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-c-new","(path, pattern=nil)",""],["new","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-c-new","(hash = {}, pattern=nil)",""],["new","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-c-new","(object_name, object, template, options, block=nil)",""],["new","ActionView::Helpers::NumberHelper::InvalidNumberError","classes/ActionView/Helpers/NumberHelper/InvalidNumberError.html#method-c-new","(number)",""],["new","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-c-new","(*)",""],["new","ActionView::Renderer","classes/ActionView/Renderer.html#method-c-new","(lookup_context)",""],["new","ActionView::Resolver","classes/ActionView/Resolver.html#method-c-new","()",""],["new","ActionView::Resolver::Cache::SmallCache","classes/ActionView/Resolver/Cache/SmallCache.html#method-c-new","(options = {})",""],["new","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-c-new","(name, prefix, partial, virtual)",""],["new","ActionView::Template","classes/ActionView/Template.html#method-c-new","(source, identifier, handler, details)",""],["new","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-new","(symbol)",""],["new","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-new","(*)",""],["new","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-c-new","()",""],["new","ActionView::TestCase::TestController","classes/ActionView/TestCase/TestController.html#method-c-new","()",""],["new","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-c-new","(base)","<p>Pass in the instance of the object that is using the errors object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">initialize</span>\n    <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","ActiveModel::Model","classes/ActiveModel/Model.html#method-c-new","(params={})","<p>Initializes a new model with the given <code>params</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["new","ActiveModel::Name","classes/ActiveModel/Name.html#method-c-new","(klass, namespace = nil, name = nil)","<p>Returns a new ActiveModel::Name instance. By default, the\n<code>namespace</code> and <code>name</code> option will take the namespace\n…\n"],["new","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-c-new","(options = {})","<p>Accepts options that will be made available through the\n<code>options</code> reader.\n"],["new","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-new","(attributes = {}, &block)",""],["new","ActiveRecord::AttributeAssignmentError","classes/ActiveRecord/AttributeAssignmentError.html#method-c-new","(message, exception, attribute)",""],["new","ActiveRecord::ConnectionAdapters::AbstractAdapter::SchemaCreation","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter/SchemaCreation.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)","<p>FIXME: Make the first parameter more similar for the two adapters\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::ConnectionManagement","classes/ActiveRecord/ConnectionAdapters/ConnectionManagement.html#method-c-new","(app)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-c-new","(spec)","<p>Creates a new ConnectionPool object. <code>spec</code> is a\nConnectionSpecification object which describes database …\n"],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-c-new","(lock = Monitor.new)",""],["new","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-c-new","(pool, frequency)",""],["new","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-c-new","(connection, logger, connection_options, config)",""],["new","ActiveRecord::ConnectionAdapters::MysqlAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-c-new","(connection, logger, connection_parameters, config)","<p>Initializes and connects a PostgreSQL adapter.\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-c-new","(subtype)",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::TypeMap","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/TypeMap.html#method-c-new","()",""],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-c-new","(delim, subtype)","<p><code>delim</code> corresponds to the `typdelim` column in the pg_types\ntable.  <code>subtype</code> is derived from the `typelem` …\n"],["new","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-c-new","(connection, logger, config)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/StatementPool.html#method-c-new","(connection, max)",""],["new","ActiveRecord::ConnectionAdapters::SQLite3Adapter::Version","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter/Version.html#method-c-new","(version_string)",""],["new","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-c-new","(conn)",""],["new","ActiveRecord::ConnectionAdapters::StatementPool","classes/ActiveRecord/ConnectionAdapters/StatementPool.html#method-c-new","(connection, max = 1000)",""],["new","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-c-new","(table_name, base)",""],["new","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-c-new","(types, name, temporary, options)",""],["new","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-c-new","(state = nil)",""],["new","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-c-new","(attributes = nil)","<p>New objects can be instantiated as either empty (pass no construction\nparameter) or pre-set with attributes …\n"],["new","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-new","(model, name)",""],["new","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-new","(connection, name, class_name, path)",""],["new","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-new","(*args, &block)","<p>Determines if one of the attributes passed in is the inheritance column,\nand if the inheritance column …\n"],["new","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-new","()",""],["new","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-c-new","(name = self.class.name, version = nil)",""],["new","ActiveRecord::Migration::CheckPending","classes/ActiveRecord/Migration/CheckPending.html#method-c-new","(app)",""],["new","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-c-new","(delegate = nil)",""],["new","ActiveRecord::MigrationProxy","classes/ActiveRecord/MigrationProxy.html#method-c-new","(name, version, filename, scope)",""],["new","ActiveRecord::MultiparameterAssignmentErrors","classes/ActiveRecord/MultiparameterAssignmentErrors.html#method-c-new","(errors)",""],["new","ActiveRecord::QueryCache","classes/ActiveRecord/QueryCache.html#method-c-new","(app)",""],["new","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-c-new","(scope)",""],["new","ActiveRecord::Reflection::MacroReflection","classes/ActiveRecord/Reflection/MacroReflection.html#method-c-new","(macro, name, scope, options, active_record)",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-c-new","(klass, table, values = {})",""],["new","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-new","(*args, &block)","<p>Initializes new record from relation while maintaining the current scope.\n<p>Expects arguments in the same …\n"],["new","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-c-new","(columns, rows, column_types = {})",""],["new","ActiveRecord::SQLCounter","classes/ActiveRecord/SQLCounter.html#method-c-new","(ignore = Regexp.union(self.class.ignored_sql))",""],["new","ActiveRecord::StaleObjectError","classes/ActiveRecord/StaleObjectError.html#method-c-new","(record, attempted_action)",""],["new","ActiveRecord::StatementCache","classes/ActiveRecord/StatementCache.html#method-c-new","()",""],["new","ActiveRecord::StatementInvalid","classes/ActiveRecord/StatementInvalid.html#method-c-new","(message, original_exception = nil)",""],["new","ActiveRecord::UnknownPrimaryKey","classes/ActiveRecord/UnknownPrimaryKey.html#method-c-new","(model)",""],["new","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-c-new","()",""],["new","ActiveSupport::BufferedLogger","classes/ActiveSupport/BufferedLogger.html#method-c-new","(*args)",""],["new","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-c-new","(cache_path, options = nil)",""],["new","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-c-new","(*addresses)","<p>Creates a new MemCacheStore object, with the given memcached server\naddresses. Each address is either …\n"],["new","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::NullStore","classes/ActiveSupport/Cache/NullStore.html#method-c-new","(options = nil)",""],["new","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-c-new","(options = nil)","<p>Create a new cache. The options will be passed to any write method calls\nexcept for <code>:namespace</code> which …\n"],["new","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-c-new","()",""],["new","ActiveSupport::CachingKeyGenerator","classes/ActiveSupport/CachingKeyGenerator.html#method-c-new","(key_generator)",""],["new","ActiveSupport::Concurrency::Latch","classes/ActiveSupport/Concurrency/Latch.html#method-c-new","(count = 1)",""],["new","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-c-new","()",""],["new","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-c-new","()","<p>@watching is a stack of lists of constants being watched. For instance, if\nparent.rb is autoloaded, the …\n"],["new","ActiveSupport::Deprecation","classes/ActiveSupport/Deprecation.html#method-c-new","(deprecation_horizon = '4.1', gem_name = 'Rails')","<p>It accepts two parameters on initialization. The first is an version of\nlibrary and the second is an …\n"],["new","ActiveSupport::Deprecation::DeprecatedConstantProxy","classes/ActiveSupport/Deprecation/DeprecatedConstantProxy.html#method-c-new","(old_const, new_const, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy","classes/ActiveSupport/Deprecation/DeprecatedInstanceVariableProxy.html#method-c-new","(instance, method, var = \"@#{method}\", deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::Deprecation::DeprecatedObjectProxy","classes/ActiveSupport/Deprecation/DeprecatedObjectProxy.html#method-c-new","(object, message, deprecator = ActiveSupport::Deprecation.instance)",""],["new","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-c-new","(files, dirs={}, &block)","<p>It accepts two parameters on initialization. The first is an array of files\nand the second is an optional …\n"],["new","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-c-new","()",""],["new","ActiveSupport::FileWatcher::Backend","classes/ActiveSupport/FileWatcher/Backend.html#method-c-new","(path, watcher)",""],["new","ActiveSupport::Gzip::Stream","classes/ActiveSupport/Gzip/Stream.html#method-c-new","(*)",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new","(constructor = {})",""],["new","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-c-new","()",""],["new","ActiveSupport::InheritableOptions","classes/ActiveSupport/InheritableOptions.html#method-c-new","(parent = nil)",""],["new","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-c-new","(options = nil)",""],["new","ActiveSupport::JSON::Variable","classes/ActiveSupport/JSON/Variable.html#method-c-new","(*args)",""],["new","ActiveSupport::KeyGenerator","classes/ActiveSupport/KeyGenerator.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::LogSubscriber::TestHelper::MockLogger","classes/ActiveSupport/LogSubscriber/TestHelper/MockLogger.html#method-c-new","(level = DEBUG)",""],["new","ActiveSupport::Logger","classes/ActiveSupport/Logger.html#method-c-new","(*args)",""],["new","ActiveSupport::MessageEncryptor","classes/ActiveSupport/MessageEncryptor.html#method-c-new","(secret, *signature_key_or_options)","<p>Initialize a new MessageEncryptor. <code>secret</code> must be at least as\nlong as the cipher key size. For the default …\n"],["new","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-c-new","(secret, options = {})",""],["new","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-c-new","(string)","<p>Creates a new Chars instance by wrapping <em>string</em>.\n"],["new","ActiveSupport::Multibyte::Unicode::UnicodeDatabase","classes/ActiveSupport/Multibyte/Unicode/UnicodeDatabase.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-c-new","(name, start, ending, transaction_id, payload)",""],["new","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-c-new","()",""],["new","ActiveSupport::Notifications::Fanout::Subscribers::Timed","classes/ActiveSupport/Notifications/Fanout/Subscribers/Timed.html#method-c-new","(pattern, delegate)",""],["new","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-c-new","(notifier)",""],["new","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-c-new","(*)",""],["new","ActiveSupport::SafeBuffer::SafeConcatError","classes/ActiveSupport/SafeBuffer/SafeConcatError.html#method-c-new","()",""],["new","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-new","()",""],["new","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-c-new","(logger)",""],["new","ActiveSupport::Testing::ProxyTestResult","classes/ActiveSupport/Testing/ProxyTestResult.html#method-c-new","(calls = [])",""],["new","ActiveSupport::Testing::RemoteError","classes/ActiveSupport/Testing/RemoteError.html#method-c-new","(exception)",""],["new","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-c-new","(utc_time, time_zone, local_time = nil, period = nil)",""],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name, utc_offset = nil, tzinfo = nil)","<p>Create a new TimeZone object with the given name and offset. The offset is\nthe number of seconds that …\n"],["new","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-new","(name)","<p>Return a TimeZone instance with the given name, or <code>nil</code> if no\nsuch TimeZone instance exists. (This exists …\n"],["new","ActiveSupport::XMLConverter::DisallowedType","classes/ActiveSupport/XMLConverter/DisallowedType.html#method-c-new","(type)",""],["new","HTML::Selector","classes/HTML/Selector.html#method-c-new","(selector, *values)","<p>Creates a new selector from a CSS 2 selector expression.\n<p>The first argument is the selector expression. …\n"],["new","Mime::Type","classes/Mime/Type.html#method-c-new","(string, symbol = nil, synonyms = [])",""],["new","Rails::API::Task","classes/Rails/API/Task.html#method-c-new","(name)",""],["new","Rails::Application","classes/Rails/Application.html#method-c-new","()",""],["new","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-c-new","(*)",""],["new","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-c-new","()",""],["new","Rails::BacktraceCleaner","classes/Rails/BacktraceCleaner.html#method-c-new","()",""],["new","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-c-new","()",""],["new","Rails::Console","classes/Rails/Console.html#method-c-new","(app, options={})",""],["new","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-new","(arguments = ARGV)",""],["new","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-c-new","(root=nil)",""],["new","Rails::Engine::Railties","classes/Rails/Engine/Railties.html#method-c-new","()",""],["new","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-c-new","(name)",""],["new","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-c-new","(name, context, options, &block)",""],["new","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-c-new","(root, current, paths, options = {})",""],["new","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-c-new","(path)",""],["new","Rails::Rack::Debugger","classes/Rails/Rack/Debugger.html#method-c-new","(app)",""],["new","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-c-new","(app, log = nil)",""],["new","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-c-new","(app, taggers = nil)",""],["new","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-c-new","()",""],["new","Rails::Server","classes/Rails/Server.html#method-c-new","(*)",""],["new","SourceAnnotationExtractor","classes/SourceAnnotationExtractor.html#method-c-new","(tag)",""],["new_constants","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-new_constants","()","<p>Returns a list of new constants found since the last call to\n<code>watch_namespaces</code>.\n"],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_from_hash_copying_default","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-c-new_from_hash_copying_default","(hash)",""],["new_record?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-new_record-3F","()","<p>Returns true if this object hasn&#39;t been saved yet – that is, a record\nfor the object doesn&#39;t …\n"],["new_session","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-new_session","()","<p>create a new session. If a block is given, the new session will be yielded\nto the block before being …\n"],["next_element","HTML::Selector","classes/HTML/Selector.html#method-i-next_element","(element, name = nil)","<p>Return the next element after this one. Skips sibling text nodes.\n<p>With the <code>name</code> argument, returns the …\n"],["next_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/StatementPool.html#method-i-next_key","()",""],["next_migration_number","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-next_migration_number","(number)",""],["next_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_month","()","<p>Short-hand for months_since(1).\n"],["next_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_quarter","()","<p>Short-hand for months_since(3)\n"],["next_selector","HTML::Selector","classes/HTML/Selector.html#method-i-next_selector","(statement, values)","<p>Called to create a dependent selector (sibling, descendant, etc). Passes\nthe remainder of the statement …\n"],["next_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_week","(given_day_in_next_week = Date.beginning_of_week)","<p>Returns a new date/time representing the given day in the next week. The\n<code>given_day_in_next_week</code> defaults …\n"],["next_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-next_year","()","<p>Short-hand for years_since(1).\n"],["nil?","Mime::NullType","classes/Mime/NullType.html#method-i-nil-3F","()",""],["no_color!","Rails::Generators","classes/Rails/Generators.html#method-c-no_color-21","()","<p>Remove the color from output.\n"],["no_routes","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-no_routes","()",""],["no_routes","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-no_routes","()",""],["nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-nonce","(secret_key, time = Time.now)","<p>Uses an MD5 digest based on time to generate a value to be used only once.\n<p>A server-specified data string …\n"],["none","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-none","()","<p>Returns a chainable relation with zero records, specifically an instance of\nthe <code>ActiveRecord::NullRelation</code> …\n"],["normalize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-normalize","(form = nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-normalize","(string, form=nil)","<p>Returns the KC normalization of the string by default. NFKC is considered\nthe best normalization form …\n"],["normalize_name","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_name","(name)",""],["normalize_path","ActionDispatch::Routing::Mapper","classes/ActionDispatch/Routing/Mapper.html#method-c-normalize_path","(path)","<p>Invokes Journey::Router::Utils.normalize_path and ensure that (:locale)\nbecomes (/:locale) instead of …\n"],["not","ActiveRecord::QueryMethods::WhereChain","classes/ActiveRecord/QueryMethods/WhereChain.html#method-i-not","(opts, *rest)","<p>Returns a new relation expressing WHERE + NOT condition according to the\nconditions in the arguments. …\n"],["not_modified?","ActionDispatch::Http::Cache::Request","classes/ActionDispatch/Http/Cache/Request.html#method-i-not_modified-3F","(modified_at)",""],["notice","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice","()","<p>Convenience accessor for <code>flash[:notice]</code>.\n"],["notice=","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-notice-3D","(message)","<p>Convenience accessor for <code>flash[:notice]=</code>.\n"],["now","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now","()","<p>Sets a flash that will not be available to the next action, only to the\ncurrent.\n\n<pre>flash.now[:message] = ...</pre>\n"],["now","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-now","()","<p>Returns an ActiveSupport::TimeWithZone instance representing the current\ntime in the time zone represented …\n"],["now_is_loaded?","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-now_is_loaded-3F","()",""],["nth_child","HTML::Selector","classes/HTML/Selector.html#method-i-nth_child","(a, b, of_type, reverse)","<p>Returns a lambda that can match an element against the nth-child pseudo\nclass, given the following arguments: …\n"],["num_waiting","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-num_waiting","()","<p>Return the number of threads currently waiting on this queue.\n"],["number_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-number_field","(object_name, method, options = {})","<p>Returns an input tag of type “number”.\n<p>Options\n<p>Accepts same options as number_field_tag\n"],["number_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-number_field_tag","(name, value = nil, options = {})","<p>Creates a number field.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["number_to_currency","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_currency","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_currency","(number, options = {})","<p>Formats a <code>number</code> into a currency string (e.g., $13.65). You\ncan customize the format in the <code>options</code> hash. …\n"],["number_to_delimited","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_delimited","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_to_human","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_human","(number, options = {})","<p>Pretty prints (formats and approximates) a number in a way it is more\nreadable by humans (eg.: 1200000000 …\n"],["number_to_human_size","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_human_size","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_human_size","(number, options = {})","<p>Formats the bytes in <code>number</code> into a more understandable\nrepresentation (e.g., giving it 1500 yields 1.5 …\n"],["number_to_percentage","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_percentage","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_percentage","(number, options = {})","<p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can\ncustomize the format in the <code>options</code> hash. …\n"],["number_to_phone","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_to_phone","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_phone","(number, options = {})","<p>Formats a <code>number</code> into a US phone number (e.g., (555)\n123-9876). You can customize the format in the  …\n"],["number_to_rounded","ActiveSupport::NumberHelper","classes/ActiveSupport/NumberHelper.html#method-i-number_to_rounded","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["number_with_delimiter","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_delimiter","(number, options = {})","<p>Formats a <code>number</code> with grouped thousands using\n<code>delimiter</code> (e.g., 12,324). You can customize the format …\n"],["number_with_precision","ActionView::Helpers::NumberHelper","classes/ActionView/Helpers/NumberHelper.html#method-i-number_with_precision","(number, options = {})","<p>Formats a <code>number</code> with the specified level of\n<code>:precision</code> (e.g., 112.32 has a precision of 2 if\n<code>:significant</code> …\n"],["numrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-numrange","(name, options = {})",""],["object","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-object","()",""],["odd?","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-odd-3F","()",""],["offset","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-offset","(value)","<p>Specifies the number of rows to skip before returning rows.\n\n<pre>User.offset(10) # generated SQL has &quot;OFFSET ...</pre>\n"],["on_cdata_block","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_cdata_block","(string)",""],["on_characters","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_characters","(string)",""],["on_end_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_document","()",""],["on_end_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_end_element","(name)",""],["on_load","ActiveSupport","classes/ActiveSupport.html#method-c-on_load","(name, options = {}, &block)",""],["on_start_document","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_document","()",""],["on_start_element","ActiveSupport::XmlMini_LibXMLSAX::HashBuilder","classes/ActiveSupport/XmlMini_LibXMLSAX/HashBuilder.html#method-i-on_start_element","(name, attrs = {})",""],["only","ActiveRecord::SpawnMethods","classes/ActiveRecord/SpawnMethods.html#method-i-only","(*onlies)","<p>Removes any condition from the query other than the one(s) specified in\n<code>onlies</code>.\n\n<pre>Post.order(&#39;id asc&#39;).only(:where) ...</pre>\n"],["only_child","HTML::Selector","classes/HTML/Selector.html#method-i-only_child","(of_type)","<p>Creates a only child lambda. Pass <code>of-type</code> to only look at\nelements of its type.\n"],["opaque","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-opaque","(secret_key)","<p>Opaque based on random generation - but changing each request?\n"],["open","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-open","()","<p>Shortcut for <code>tempfile.open</code>.\n"],["open","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-open","(key)",""],["open_session","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-open_session","(app = nil)","<p>Open a new session instance. If a block is given, the new session is\nyielded to the block before being …\n"],["open_transactions","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-open_transactions","()",""],["opt_parser","Rails::Server","classes/Rails/Server.html#method-i-opt_parser","()",""],["optimize_routes_generation?","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-optimize_routes_generation-3F","()",""],["option_groups_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-option_groups_from_collection_for_select","(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)","<p>Returns a string of <code>&lt;option&gt;</code> tags, like\n<code>options_from_collection_for_select</code>, but groups them by …\n"],["optional_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-optional_port","()","<p>Returns a number port suffix like 8080 if the port number of this request\nis not the default HTTP port …\n"],["options_for","ActiveSupport::JSON::Encoding::Encoder","classes/ActiveSupport/JSON/Encoding/Encoder.html#method-i-options_for","(value)",""],["options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select","(container, selected = nil)","<p>Accepts a container (hash, array, enumerable, your type) and returns a\nstring of option tags. Given a …\n"],["options_from_collection_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_from_collection_for_select","(collection, value_method, text_method, selected = nil)","<p>Returns a string of option tags that have been compiled by iterating over\nthe <code>collection</code> and assigning …\n"],["options_include_default?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-options_include_default-3F","(options)",""],["order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-order","(*args)","<p>Allows to specify an order attribute:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">order</span>(<span class=\"ruby-string\">&#39;name&#39;</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;users&quot;</span>.* <span class=\"ruby-constant\">FROM</span> <span class=\"ruby-string\">&quot;users&quot;</span> <span class=\"ruby-constant\">ORDER</span> <span class=\"ruby-constant\">BY</span> <span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["ordinal","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinal","(number)","<p>Returns the suffix that should be added to a number to denote the position\nin an ordered sequence such …\n"],["ordinal","Integer","classes/Integer.html#method-i-ordinal","()","<p>Ordinal returns the suffix used to denote the position in an ordered\nsequence such as 1st, 2nd, 3rd, …\n"],["ordinalize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-ordinalize","(number)","<p>Turns a number into an ordinal string used to denote the position in an\nordered sequence such as 1st, …\n"],["ordinalize","Integer","classes/Integer.html#method-i-ordinalize","()","<p>Ordinalize turns a number into an ordinal string used to denote the\nposition in an ordered sequence such …\n"],["original_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-original_concat","(value)",""],["original_fullpath","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_fullpath","()",""],["original_url","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-original_url","()","<p>Returns the original request URL as a <code>String</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># get &quot;/articles?page=2&quot;</span>\n<span class=\"ruby-identifier\">request</span>.<span class=\"ruby-identifier\">original_url</span> <span class=\"ruby-comment\"># =&gt; &quot;http://www.example.com/articles?page=2&quot;</span>\n</pre>\n"],["outside_transaction?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-outside_transaction-3F","()",""],["overlaps?","Range","classes/Range.html#method-i-overlaps-3F","(other)","<p>Compare two ranges and see if they overlap each other\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">4</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">6</span>) <span class=\"ruby-comment\"># =&gt; true</span>\n(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">5</span>).<span class=\"ruby-identifier\">overlaps?</span>(<span class=\"ruby-value\">7</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">9</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pack_graphemes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-pack_graphemes","(unpacked)","<p>Reverse operation of unpack_graphemes.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">pack_graphemes</span>(<span class=\"ruby-constant\">Unicode</span>.<span class=\"ruby-identifier\">unpack_graphemes</span>(<span class=\"ruby-string\">&#39;क्षि&#39;</span>)) <span class=\"ruby-comment\"># =&gt; &#39;क्षि&#39;</span>\n</pre>\n"],["page_cache_extension","ActionController::Caching","classes/ActionController/Caching.html#method-c-page_cache_extension","()",""],["page_cache_extension=","ActionController::Caching","classes/ActionController/Caching.html#method-c-page_cache_extension-3D","(extension)",""],["param_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-param_key","(record_or_class)","<p>Returns string to use for params names. It differs for namespaced models\nregarding whether it&#39;s inside …\n"],["parameter_filter","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter","()",""],["parameter_filter_for","ActionDispatch::Http::FilterParameters","classes/ActionDispatch/Http/FilterParameters.html#method-i-parameter_filter_for","(filters)",""],["parameterize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-parameterize","(string, sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameterize","String","classes/String.html#method-i-parameterize","(sep = '-')","<p>Replaces special characters in a string so that it may be used as part of a\n&#39;pretty&#39; URL.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-parameters","()","<p>Returns both GET and POST parameters in a single hash.\n"],["paramify_values","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-paramify_values","(hash_or_array_or_value)",""],["params","ActionController::Metal","classes/ActionController/Metal.html#method-i-params","()",""],["params","ActionController::StrongParameters","classes/ActionController/StrongParameters.html#method-i-params","()","<p>Returns a new ActionController::Parameters object that has been\ninstantiated with the <code>request.parameters</code> …\n"],["params","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-params","()",""],["params=","ActionController::Metal","classes/ActionController/Metal.html#method-i-params-3D","(val)",""],["params=","ActionController::StrongParameters","classes/ActionController/StrongParameters.html#method-i-params-3D","(value)","<p>Assigns the given <code>value</code> to the <code>params</code> hash. If\n<code>value</code> is a Hash, this will create an\nActionController::Parameters …\n"],["params_array_from","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-params_array_from","(raw_params)","<p>Takes raw_params and turns it into an array of parameters\n"],["parent","Module","classes/Module.html#method-i-parent","()","<p>Returns the module which contains this one according to its name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">M</span>\n  <span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">N</span>\n  <span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-constant\">X</span> = <span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["parent_name","Module","classes/Module.html#method-i-parent_name","()","<p>Returns the name of the module containing this one.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">M</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">N</span>.<span class=\"ruby-identifier\">parent_name</span> <span class=\"ruby-comment\"># =&gt; &quot;M&quot;</span>\n</pre>\n"],["parent_of?","ActiveSupport::Notifications::Event","classes/ActiveSupport/Notifications/Event.html#method-i-parent_of-3F","(event)",""],["parent_prefixes","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-parent_prefixes","()",""],["parents","Module","classes/Module.html#method-i-parents","()","<p>Returns all the parents of this module according to its name, ordered from\nnested outwards. The receiver …\n"],["parse","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-parse","(str, now=now)","<p>Method for creating new ActiveSupport::TimeWithZone instance in time zone\nof <code>self</code> from parsed string. …\n"],["parse","Mime::Type","classes/Mime/Type.html#method-c-parse","(accept_header)",""],["parse!","Rails::Server::Options","classes/Rails/Server/Options.html#method-i-parse-21","(args)",""],["parse_arguments","Rails::Console","classes/Rails/Console.html#method-c-parse_arguments","(arguments)",""],["parse_arguments","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-parse_arguments","(arguments)",""],["parse_data_with_trailing_star","Mime::Type","classes/Mime/Type.html#method-c-parse_data_with_trailing_star","(input)","<p>For an input of <code>&#39;text&#39;</code>, returns <code>[Mime::JSON,\nMime::XML, Mime::ICS, Mime::HTML, Mime::CSS, Mime::CSV</code> …\n"],["parse_error","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-parse_error","()","<p>Returns the class of the error that will be raised when there is an error\nin decoding JSON. Using this …\n"],["parse_query","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-parse_query","(qs)",""],["parse_trailing_star","Mime::Type","classes/Mime/Type.html#method-c-parse_trailing_star","(accept_header)",""],["parser","URI","classes/URI.html#method-c-parser","()",""],["password=","ActiveModel::SecurePassword::ClassMethods::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/ClassMethods/InstanceMethodsOnActivation.html#method-i-password-3D","(unencrypted_password)","<p>Encrypts the password into the <code>password_digest</code> attribute, only\nif the new password is not blank.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["password_confirmation=","ActiveModel::SecurePassword::ClassMethods::InstanceMethodsOnActivation","classes/ActiveModel/SecurePassword/ClassMethods/InstanceMethodsOnActivation.html#method-i-password_confirmation-3D","(unencrypted_password)",""],["password_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-password_field","(object_name, method, options = {})","<p>Returns an input tag of the “password” type tailored for accessing a\nspecified attribute (identified …\n"],["password_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-password_field_tag","(name = \"password\", value = nil, options = {})","<p>Creates a password field, a masked text field that will hide the users\ninput behind a mask character. …\n"],["past?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-past-3F","()","<p>Returns true if the current object&#39;s time is in the past.\n"],["past?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-past-3F","()","<p>Returns true if the date/time is in the past.\n"],["past?","DateTime","classes/DateTime.html#method-i-past-3F","()","<p>Tells whether the DateTime object&#39;s datetime lies in the past.\n"],["patch","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-patch","(action, *args)","<p>Simulate a PATCH request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["patch","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-patch","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PATCH request with the given parameters. See <code>#get</code>\nfor more details.\n"],["patch","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-patch","(*args, &block)","<p>Define a route that only recognizes HTTP PATCH. For supported arguments,\nsee match\n\n<pre>patch &#39;bacon&#39;, to: ...</pre>\n"],["patch?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-patch-3F","()","<p>Is this a PATCH request? Equivalent to <code>request.request_method ==\n:patch</code>.\n"],["patch_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-patch_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PATCH request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["path","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-path","()","<p>Shortcut for <code>tempfile.path</code>.\n"],["path","ActionDispatch::Routing::PathRedirect","classes/ActionDispatch/Routing/PathRedirect.html#method-i-path","(params, request)",""],["path","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-path","()",""],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path","LoadError","classes/LoadError.html#method-i-path","()",""],["path=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-path-3D","(path)",""],["path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-path_parameters","()","<p>Returns a hash with the parameters used to form the path of the request.\nReturned hash keys are strings: …\n"],["path_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_asset","(source, options = {})",""],["path_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_audio","(source, options = {})",""],["path_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_font","(source, options = {})",""],["path_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_image","(source, options = {})",""],["path_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_javascript","(source, options = {})",""],["path_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_stylesheet","(source, options = {})",""],["path_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-path_to_video","(source, options = {})",""],["paths","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-paths","()",""],["paths","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-paths","()",""],["pattern","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-pattern","()",""],["performed?","ActionController::Metal","classes/ActionController/Metal.html#method-i-performed-3F","()",""],["period","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-period","()","<p>Returns the underlying TZInfo::TimezonePeriod.\n"],["period_for_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_local","(time, dst=true)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],["period_for_utc","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-period_for_utc","(time)","<p>Available so that TimeZone instances respond like TZInfo::Timezone\ninstances.\n"],["permanent","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-permanent","()","<p>Returns a jar that&#39;ll automatically set the assigned cookies to have an\nexpiration date 20 years …\n"],["permit","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permit","(*filters)","<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>filters</code> and sets the …\n"],["permit!","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permit-21","()","<p>Sets the <code>permitted</code> attribute to <code>true</code>. This can be\nused to pass mass assignment. Returns <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["permitted?","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-permitted-3F","()","<p>Returns <code>true</code> if the parameter is permitted, <code>false</code>\notherwise.\n\n<pre>params = ActionController::Parameters.new ...</pre>\n"],["persisted?","ActiveModel::Model","classes/ActiveModel/Model.html#method-i-persisted-3F","()","<p>Indicates if the model is persisted. Default is <code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Model</span>\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["persisted?","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-persisted-3F","()","<p>Returns true if the record is persisted, i.e. it&#39;s not a new record and\nit was not destroyed, otherwise …\n"],["petabyte","Numeric","classes/Numeric.html#method-i-petabyte","()",""],["petabytes","Numeric","classes/Numeric.html#method-i-petabytes","()",""],["phone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-phone_field","(object_name, method, options = {})","<p>aliases telephone_field\n"],["phone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-phone_field_tag","(name, value = nil, options = {})",""],["pk_and_sequence_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-pk_and_sequence_for","(table)","<p>Returns a table&#39;s primary key and belonging sequence.\n"],["pluck","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-pluck","(*column_names)","<p>Use <code>pluck</code> as a shortcut to select one or more attributes\nwithout loading a bunch of records just to grab …\n"],["plural","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-plural","(record_or_class)","<p>Returns the plural class name of a record or class.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>.<span class=\"ruby-identifier\">plural</span>(<span class=\"ruby-identifier\">post</span>)             <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["plural","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-plural","(rule, replacement)","<p>Specifies a new pluralization rule and its replacement. The rule can either\nbe a string or a regular …\n"],["plural_file_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_file_name","()",""],["plural_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_name","()",""],["plural_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-plural_table_name","()",""],["pluralize","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-pluralize","(count, singular, plural = nil)","<p>Attempts to pluralize the <code>singular</code> word unless\n<code>count</code> is 1. If <code>plural</code> is supplied, it will use\nthat when …\n"],["pluralize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-pluralize","(word, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If passed an optional <code>locale</code> parameter, the word will …\n"],["pluralize","String","classes/String.html#method-i-pluralize","(count = nil, locale = :en)","<p>Returns the plural form of the word in the string.\n<p>If the optional parameter <code>count</code> is specified, the singular …\n"],["pluralize_table_names?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-pluralize_table_names-3F","()",""],["point_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-point_to_string","(point)",""],["poll","ActiveRecord::ConnectionAdapters::ConnectionPool::Queue","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Queue.html#method-i-poll","(timeout = nil)","<p>Remove the head of the queue.\n<p>If <code>timeout</code> is not given, remove and return the head the queue\nif the number …\n"],["polymorphic_path","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_path","(record_or_hash_or_array, options = {})","<p>Returns the path component of a URL for the given record. It uses\n<code>polymorphic_url</code> with <code>routing_type:</code> …\n"],["polymorphic_url","ActionDispatch::Routing::PolymorphicRoutes","classes/ActionDispatch/Routing/PolymorphicRoutes.html#method-i-polymorphic_url","(record_or_hash_or_array, options = {})","<p>Constructs a call to a named RESTful route for the given record and returns\nthe resulting URL string. …\n"],["populate_with_current_scope_attributes","ActiveRecord::Scoping","classes/ActiveRecord/Scoping.html#method-i-populate_with_current_scope_attributes","()",""],["port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port","()","<p>Returns the port number of this request as an integer.\n"],["port=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-port-3D","(number)",""],["port_string","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-port_string","()","<p>Returns a string port suffix, including colon, like “:8080” if the port\nnumber of this request …\n"],["post","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-post","(action, *args)","<p>Simulate a POST request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["post","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post","(path, parameters = nil, headers_or_env = nil)","<p>Performs a POST request with the given parameters. See <code>#get</code>\nfor more details.\n"],["post","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-post","(*args, &block)","<p>Define a route that only recognizes HTTP POST. For supported arguments, see\nmatch\n\n<pre>post &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["post?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-post-3F","()","<p>Is this a POST request? Equivalent to <code>request.request_method_symbol\n== :post</code>.\n"],["post_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-post_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a POST request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["postgresql_version","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-postgresql_version","()","<p>Returns the version of the connected PostgreSQL server.\n"],["prefetch_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-prefetch_primary_key-3F","(table_name = nil)","<p>Should primary key values be selected from their corresponding sequence\nbefore the insert statement? …\n"],["prefix","ActiveRecord::DynamicMatchers::FindBy","classes/ActiveRecord/DynamicMatchers/FindBy.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-prefix","()",""],["prefix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-prefix","()",""],["preload","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-preload","(*args)","<p>Allows preloading of <code>args</code>, in the same way that\n<code>includes</code> does:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">preload</span>(:<span class=\"ruby-identifier\">posts</span>)\n=<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-constant\">SELECT</span> <span class=\"ruby-string\">&quot;posts&quot;</span>.* <span class=\"ruby-operator\">...</span>\n</pre>\n"],["prepare!","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-prepare-21","()","<p>Execute all prepare callbacks.\n"],["prepare!","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-prepare-21","()",""],["prepare_column_options","ActiveRecord::ConnectionAdapters::ColumnDumper","classes/ActiveRecord/ConnectionAdapters/ColumnDumper.html#method-i-prepare_column_options","(column, types)","<p>This can be overridden on a Adapter level basis to support other extended\ndatatypes (Example: Adding …\n"],["prepare_column_options","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-prepare_column_options","(column, types)","<p>Adds `:array` option to the default set provided by the AbstractAdapter\n"],["prepare_controller_class","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-prepare_controller_class","(new_class)",""],["prepend_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_after_action","","<p>Prepend a callback after actions. See _insert_callbacks for parameter\ndetails. Aliased as prepend_after_filter. …\n"],["prepend_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_around_action","","<p>Prepend a callback around actions. See _insert_callbacks for parameter\ndetails. Aliased as prepend_around_filter. …\n"],["prepend_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-prepend_before_action","","<p>Prepend a callback before actions. See _insert_callbacks for parameter\ndetails. Aliased as prepend_before_filter. …\n"],["prepend_view_path","AbstractController::ViewPaths","classes/AbstractController/ViewPaths.html#method-i-prepend_view_path","(path)",""],["prepend_view_path","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-prepend_view_path","(path)","<p>Prepend a path to the list of view paths for this controller.\n<p>Parameters\n<p><code>path</code> - If a String is provided, …\n"],["presence","Object","classes/Object.html#method-i-presence","()","<p>Returns object if it&#39;s <code>present?</code> otherwise returns\n<code>nil</code>. <code>object.presence</code> is equivalent to\n<code>object.present</code> …\n"],["present?","Object","classes/Object.html#method-i-present-3F","()","<p>An object is present if it&#39;s not <code>blank?</code>.\n"],["pretty_print","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-pretty_print","(q)",""],["prev_month","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_month","()","<p>Short-hand for months_ago(1).\n"],["prev_quarter","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_quarter","()","<p>Short-hand for months_ago(3).\n"],["prev_week","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_week","(start_day = Date.beginning_of_week)","<p>Returns a new date/time representing the given day in the previous week.\nWeek is assumed to start on …\n"],["prev_year","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-prev_year","()","<p>Short-hand for years_ago(1).\n"],["previous_changes","ActiveModel::Dirty","classes/ActiveModel/Dirty.html#method-i-previous_changes","()","<p>Returns a hash of attributes that were changed before the model was saved.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-comment\"># =&gt; &quot;bob&quot;</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">name</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key","()","<p>Defines the primary key field – can be overridden in subclasses.\nOverwriting will negate any effect …\n"],["primary_key","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-primary_key","(table)","<p>Returns just a table&#39;s primary key\n"],["primary_key","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Defines the primary key field. Use of the native PostgreSQL UUID type is\nsupported, and can be used by …\n"],["primary_key","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-primary_key","(name, type = :primary_key, options = {})","<p>Appends a primary key definition to the table definition. Can be called\nmultiple times, but this is probably …\n"],["primary_key=","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-primary_key-3D","(value)","<p>Sets the name of the primary key column.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">primary_key</span> = <span class=\"ruby-string\">&#39;sysid&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["primary_keys","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-primary_keys","(table_name = nil)",""],["process","AbstractController::Base","classes/AbstractController/Base.html#method-i-process","(action, *args)","<p>Calls the action going through the entire action dispatch stack.\n<p>The actual method that is called is determined …\n"],["process","ActionController::Live","classes/ActionController/Live.html#method-i-process","(name)",""],["process","ActionController::Middleware","classes/ActionController/Middleware.html#method-i-process","(action)",""],["process","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-process","(*args)",""],["process","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-process","(action, http_method = 'GET', *args)",""],["process_action","AbstractController::Callbacks","classes/AbstractController/Callbacks.html#method-i-process_action","(*args)","<p>Override AbstractController::Base&#39;s process_action to run the\nprocess_action callbacks around the …\n"],["process_action","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-process_action","(*args)",""],["process_action","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-process_action","(event)",""],["process_action","ActionController::ParamsWrapper","classes/ActionController/ParamsWrapper.html#method-i-process_action","(*args)","<p>Performs parameters wrapping upon the request. Will be called automatically\nby the metal call stack. …\n"],["process_attributes_for","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_attributes_for","(node, options)",""],["process_node","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-process_node","(node, result, options)",""],["process_node","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-process_node","(node, result, options)",""],["property","Rails::Info","classes/Rails/Info.html#method-c-property","(name, value = nil)",""],["protect_against_forgery?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-protect_against_forgery-3F","()",""],["protect_from_forgery","ActionController::RequestForgeryProtection::ClassMethods","classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-protect_from_forgery","(options = {})","<p>Turn on request forgery protection. Bear in mind that only non-GET,\nHTML/JavaScript requests are checked. …\n"],["protocol","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-protocol","()","<p>Returns &#39;https://&#39; if this is an SSL request and &#39;http://&#39;\notherwise.\n"],["provide","ActionView::Helpers::CaptureHelper","classes/ActionView/Helpers/CaptureHelper.html#method-i-provide","(name, content = nil, &block)","<p>The same as <code>content_for</code> but when used with streaming flushes\nstraight back to the layout. In other words, …\n"],["proxy_association","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-proxy_association","()",""],["proxy_class","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class","()","<p>Returns the current proxy class.\n"],["proxy_class=","ActiveSupport::Multibyte","classes/ActiveSupport/Multibyte.html#method-c-proxy_class-3D","(klass)","<p>The proxy class returned when calling mb_chars. You can use this accessor\nto configure your own proxy …\n"],["prune","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-prune","(target_size, max_time = nil)","<p>To ensure entries fit within the specified memory prune the cache by\nremoving the least recently accessed …\n"],["pruning?","ActiveSupport::Cache::MemoryStore","classes/ActiveSupport/Cache/MemoryStore.html#method-i-pruning-3F","()","<p>Returns true if the cache is currently being pruned.\n"],["public_directory","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-public_directory","()",""],["public_path","Rails","classes/Rails.html#method-c-public_path","()",""],["publish","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-publish","(name, *args)",""],["publish","ActiveSupport::Notifications::Fanout::Subscribers::Timed","classes/ActiveSupport/Notifications/Fanout/Subscribers/Timed.html#method-i-publish","(name, *args)",""],["purge","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-purge","(configuration)",""],["push","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-push","(path)",""],["put","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-put","(action, *args)","<p>Simulate a PUT request with the given parameters and set/volley the\nresponse. See <code>get</code> for more details. …\n"],["put","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PUT request with the given parameters. See <code>#get</code> for\nmore details.\n"],["put","ActionDispatch::Routing::Mapper::HttpHelpers","classes/ActionDispatch/Routing/Mapper/HttpHelpers.html#method-i-put","(*args, &block)","<p>Define a route that only recognizes HTTP PUT. For supported arguments, see\nmatch\n\n<pre>put &#39;bacon&#39;, to: &#39;food#bacon&#39;</pre>\n"],["put?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-put-3F","()","<p>Is this a PUT request? Equivalent to <code>request.request_method_symbol ==\n:put</code>.\n"],["put_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-put_via_redirect","(path, parameters = nil, headers_or_env = nil)","<p>Performs a PUT request, following any subsequent redirect. See\n<code>request_via_redirect</code> for more information. …\n"],["qualified_const_defined?","Module","classes/Module.html#method-i-qualified_const_defined-3F","(path, search_parents=true)",""],["qualified_const_get","Module","classes/Module.html#method-i-qualified_const_get","(path)",""],["qualified_const_set","Module","classes/Module.html#method-i-qualified_const_set","(path, value)",""],["query","ActionView::NullResolver","classes/ActionView/NullResolver.html#method-i-query","(path, exts, formats)",""],["query_attribute","ActiveRecord::AttributeMethods::Query","classes/ActiveRecord/AttributeMethods/Query.html#method-i-query_attribute","(attr_name)",""],["query_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-query_parameters","()",""],["quietly","Kernel","classes/Kernel.html#method-i-quietly","()","<p>Silences both STDOUT and STDERR, even for subprocesses.\n\n<pre>quietly { system &#39;bundle install&#39; }</pre>\n"],["quote","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote","(value, column = nil)","<p>Quotes the column value to help prevent SQL injection attacks.\n"],["quote","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote","(value, column = nil)","<p>QUOTING ==================================================\n"],["quote_column_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_column_name","(column_name)","<p>Quotes the column name. Defaults to no quoting.\n"],["quote_string","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-quote_string","(string)","<p>QUOTING ==================================================\n"],["quote_string","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_string","(s)","<p>Quotes a string, escaping any &#39; (single quote) and \\ (backslash)\ncharacters.\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name","(name)","<p>Checks the following cases:\n<p>table_name\n<p>“table.name”\n"],["quote_table_name","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name","(table_name)","<p>Quotes the table name. Defaults to column name quoting.\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quote_table_name_for_assignment","(table, attr)","<p>Override to return the quoted table name for assignment. Defaults to table\nquoting.\n<p>This works for mysql …\n"],["quote_table_name_for_assignment","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-quote_table_name_for_assignment","(table, attr)",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_columns_for_index","(column_names, options = {})",""],["quoted_columns_for_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-quoted_columns_for_index","(column_names, options = {})","<p>Overridden by the mysql adapter for supporting index lengths\n"],["quoted_date","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_date","(value)",""],["quoted_false","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_false","()",""],["quoted_false","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_false","()",""],["quoted_id","ActiveRecord::Sanitization","classes/ActiveRecord/Sanitization.html#method-i-quoted_id","()","<p>TODO: Deprecate this\n"],["quoted_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-quoted_locking_column","()","<p>Quote the column name used for optimistic locking.\n"],["quoted_primary_key","ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods","classes/ActiveRecord/AttributeMethods/PrimaryKey/ClassMethods.html#method-i-quoted_primary_key","()","<p>Returns a quoted version of the primary key name, used to construct SQL\nstatements.\n"],["quoted_table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-quoted_table_name","()","<p>Returns a quoted version of the table name, used to construct SQL\nstatements.\n"],["quoted_true","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-quoted_true","()",""],["quoted_true","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-quoted_true","()",""],["rack_app","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-rack_app","(app = self.app)",""],["rack_cookies","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-rack_cookies","()",""],["radio_button","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-radio_button","(method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-radio_button","(object_name, method, tag_value, options = {})","<p>Returns a radio button tag for accessing a specified attribute (identified\nby <code>method</code>) on an object assigned …\n"],["radio_button_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-radio_button_tag","(name, value, checked = false, options = {})","<p>Creates a radio button; use groups of radio buttons named the same to allow\nusers to select from a group …\n"],["rails_version","Rails::API::AppTask","classes/Rails/API/AppTask.html#method-i-rails_version","()",""],["rails_version","Rails::API::RepoTask","classes/Rails/API/RepoTask.html#method-i-rails_version","()",""],["railtie_name","Rails::Railtie","classes/Rails/Railtie.html#method-c-railtie_name","(name = nil)",""],["railtie_namespace","Rails::Railtie","classes/Rails/Railtie.html#method-i-railtie_namespace","()",""],["railties","Rails::Engine","classes/Rails/Engine.html#method-c-railties","()",""],["raise","ActiveSupport::ProxyObject","classes/ActiveSupport/ProxyObject.html#method-i-raise","(*args)","<p>Let ActiveSupport::ProxyObject at least raise exceptions.\n"],["raise_if_absolute","QualifiedConstUtils","classes/QualifiedConstUtils.html#method-c-raise_if_absolute","(path)",""],["rake","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rake","(command, options={})","<p>Runs the supplied rake task\n\n<pre>rake(&quot;db:migrate&quot;)\nrake(&quot;db:migrate&quot;, env: &quot;production&quot;)\nrake(&quot;gems:install&quot;, ...</pre>\n"],["rake_tasks","Rails::Railtie","classes/Rails/Railtie.html#method-c-rake_tasks","(&blk)",""],["rakefile","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-rakefile","()",""],["rakefile","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-rakefile","(filename, data=nil, &block)","<p>Create a new Rakefile with the provided code (either in a block or a\nstring).\n\n<pre>rakefile(&quot;bootstrap.rake&quot;) ...</pre>\n"],["rakefile","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-rakefile","()",""],["range_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-range_field","(object_name, method, options = {})","<p>Returns an input tag of type “range”.\n<p>Options\n<p>Accepts same options as range_field_tag\n"],["range_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-range_field_tag","(name, value = nil, options = {})","<p>Creates a range form element.\n<p>Options\n<p>Accepts the same options as number_field_tag.\n"],["range_to_string","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-range_to_string","(object)",""],["raw","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw","(stringish)","<p>This method outputs without escaping a string. Since escaping tags is now\ndefault, this can be used when …\n"],["raw_connection","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-raw_connection","()","<p>Provides access to the underlying database driver for this adapter. For\nexample, this method returns …\n"],["raw_host_with_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-raw_host_with_port","()","<p>Returns the host for this request, such as “example.com”.\n"],["raw_params","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-raw_params","(auth)","<p>This method takes an authorization body and splits up the key-value pairs\nby the standardized `:`, `;`, …\n"],["raw_post","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-raw_post","()","<p>Read the request body. This is useful for web services that need to work\nwith raw requests directly. …\n"],["raw_write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-raw_write_attribute","(attr_name, value)",""],["read","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-read","(length=nil, buffer=nil)","<p>Shortcut for <code>tempfile.read</code>.\n"],["read","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-read","(key)",""],["read","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-read","(key)",""],["read","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read","(name, options = nil)","<p>Fetches data from the cache, using the given key. If there is data in the\ncache with the given key, then …\n"],["read_attribute","ActiveRecord::AttributeMethods::Read","classes/ActiveRecord/AttributeMethods/Read.html#method-i-read_attribute","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nafter it has been typecast (for example, “2004-12-12” …\n"],["read_attribute_before_type_cast","ActiveRecord::AttributeMethods::BeforeTypeCast","classes/ActiveRecord/AttributeMethods/BeforeTypeCast.html#method-i-read_attribute_before_type_cast","(attr_name)","<p>Returns the value of the attribute identified by <code>attr_name</code>\nbefore typecasting and deserialization.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["read_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-read_entry","(key, options)",""],["read_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-read_entry","(key, options)",""],["read_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-read_fragment","(key, options = nil)","<p>Reads a cached fragment from the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats). …\n"],["read_multi","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-read_multi","(*names)","<p>Reads multiple values from the cache using a single call to the servers for\nall keys. Options can be …\n"],["read_multi","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-read_multi","(*names)","<p>Read multiple values at once from the cache. Options can be passed in the\nlast argument.\n<p>Some cache implementation …\n"],["read_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-read_store_attribute","(store_attribute, key)",""],["readable_inspect","Date","classes/Date.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005”\n"],["readable_inspect","DateTime","classes/DateTime.html#method-i-readable_inspect","()","<p>Overrides the default inspect method with a human readable one, e.g., “Mon,\n21 Feb 2005 14:30:00 …\n"],["readme","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-readme","()",""],["readme","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-readme","(path)","<p>Reads the given file at the source root and prints it in the console.\n\n<pre>readme &quot;README&quot;</pre>\n"],["readme","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-readme","()",""],["readonly","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-readonly","(value = true)","<p>Sets readonly attributes for the returned relation. If value is true\n(default), attempting to update …\n"],["readonly!","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-21","()","<p>Marks this record as read only.\n"],["readonly?","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-readonly-3F","()","<p>Returns <code>true</code> if the record is read only. Records loaded\nthrough joins with piggy-back attributes will …\n"],["readonly_attributes","ActiveRecord::ReadonlyAttributes::ClassMethods","classes/ActiveRecord/ReadonlyAttributes/ClassMethods.html#method-i-readonly_attributes","()","<p>Returns an array of all the attributes that have been specified as\nreadonly.\n"],["reap","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-reap","()","<p>Removes dead connections from the pool.  A dead connection can occur if a\nprogrammer forgets to close …\n"],["receive","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-receive","(raw_mail)","<p>Receives a raw email, parses it into an email object, decodes it,\ninstantiates a new mailer, and passes …\n"],["receive","ActionMailer::LogSubscriber","classes/ActionMailer/LogSubscriber.html#method-i-receive","(event)",""],["reconnect!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reconnect-21","()","<p>Disconnects from the database if already connected, and establishes a new\nconnection with the database. …\n"],["reconnect!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reconnect-21","()",""],["reconnect!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reconnect-21","()","<p>Close then reopen the connection.\n"],["record","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-record","(*command, &block)","<p>record <code>command</code>. <code>command</code> should be a method name\nand arguments. For example:\n\n<pre>recorder.record(:method_name, ...</pre>\n"],["record_key_for_dom_id","ActionView::RecordIdentifier","classes/ActionView/RecordIdentifier.html#method-i-record_key_for_dom_id","(record)","<p>Returns a string representation of the key attribute(s) that is suitable\nfor use in an HTML DOM id.  …\n"],["recreate_database","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-recreate_database","(name, options = {})","<p>Drops the database specified on the <code>name</code> attribute and creates\nit again using the provided <code>options</code>.\n"],["recycle!","ActionController::TestResponse","classes/ActionController/TestResponse.html#method-i-recycle-21","()",""],["redefine_method","Module","classes/Module.html#method-i-redefine_method","(method, &block)",""],["redirect","ActionDispatch::Routing::Redirection","classes/ActionDispatch/Routing/Redirection.html#method-i-redirect","(*args, &block)","<p>Redirect any path to another path:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">get</span> <span class=\"ruby-string\">&quot;/stories&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">redirect</span>(<span class=\"ruby-string\">&quot;/posts&quot;</span>)\n</pre>\n<p>You can also use interpolation …\n"],["redirect_to","ActionController::Flash","classes/ActionController/Flash.html#method-i-redirect_to","(options = {}, response_status_and_flash = {})",""],["redirect_to","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-redirect_to","(*args)",""],["redirect_to","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-redirect_to","(event)",""],["redirect_to","ActionController::Redirecting","classes/ActionController/Redirecting.html#method-i-redirect_to","(options = {}, response_status = {})","<p>Redirects the browser to the target specified in <code>options</code>. This\nparameter can take one of three forms: …\n"],["redirect_to_url","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-redirect_to_url","()",""],["redirect_url","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-redirect_url","()",""],["ref","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-i-ref","()",""],["ref","Mime::NullType","classes/Mime/NullType.html#method-i-ref","()",""],["ref","Mime::Type","classes/Mime/Type.html#method-i-ref","()",""],["references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-references","(*args)","<p>Adds a reference. Optionally adds a <code>type</code> column, if\n<code>:polymorphic</code> option is provided. <code>references</code> and \n…\n"],["references","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-references","(*args)",""],["references","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-references","(*args)","<p>Used to indicate that an association is referenced by an SQL string, and\nshould therefore be JOINed in …\n"],["reflect_on_aggregation","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_aggregation","(aggregation)","<p>Returns the AggregateReflection object for the named\n<code>aggregation</code> (use the symbol).\n\n<pre>Account.reflect_on_aggregation(:balance) ...</pre>\n"],["reflect_on_all_aggregations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_aggregations","()","<p>Returns an array of AggregateReflection objects for all the aggregations in\nthe class.\n"],["reflect_on_all_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_associations","(macro = nil)","<p>Returns an array of AssociationReflection objects for all the associations\nin the class. If you only …\n"],["reflect_on_all_autosave_associations","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_all_autosave_associations","()","<p>Returns an array of AssociationReflection objects for all associations\nwhich have <code>:autosave</code> enabled. …\n"],["reflect_on_association","ActiveRecord::Reflection::ClassMethods","classes/ActiveRecord/Reflection/ClassMethods.html#method-i-reflect_on_association","(association)","<p>Returns the AssociationReflection object for the <code>association</code>\n(use the symbol).\n\n<pre>Account.reflect_on_association(:owner) ...</pre>\n"],["refresh","ActionView::Template","classes/ActionView/Template.html#method-i-refresh","(view)","<p>Receives a view object and return a template similar to self by using\n@virtual_path.\n<p>This method is useful …\n"],["regexp","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-regexp","()",""],["register","ActionView::Template::Types::Type","classes/ActionView/Template/Types/Type.html#method-c-register","(*t)",""],["register","Mime::Type","classes/Mime/Type.html#method-c-register","(string, symbol, mime_type_synonyms = [], extension_synonyms = [], skip_lookup = false)",""],["register_alias","Mime::Type","classes/Mime/Type.html#method-c-register_alias","(string, symbol, extension_synonyms = [])","<p>Registers an alias that&#39;s not used on mime type lookup, but can be\nreferenced directly. Especially …\n"],["register_callback","Mime::Type","classes/Mime/Type.html#method-c-register_callback","(&block)",""],["register_interceptor","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptor","(interceptor)","<p>Register an Interceptor which will be called before mail is sent. Either a\nclass or a string can be passed …\n"],["register_interceptors","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_interceptors","(*interceptors)","<p>Register one or more Interceptors which will be called before mail is sent.\n"],["register_observer","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observer","(observer)","<p>Register an Observer which will be notified when mail is delivered. Either\na class or a string can be …\n"],["register_observers","ActionMailer::Base","classes/ActionMailer/Base.html#method-c-register_observers","(*observers)","<p>Register one or more Observers which will be notified when mail is\ndelivered.\n"],["register_task","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-register_task","(pattern, task)",""],["register_tracker","ActionView::DependencyTracker","classes/ActionView/DependencyTracker.html#method-c-register_tracker","(extension, tracker)",""],["register_type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields.html#method-c-register_type","(type_id, type)","<p>Register an MySQL <code>type_id</code> with a typecasting object in\n<code>type</code>.\n"],["register_type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-register_type","(name, type)","<p>Register an OID type named <code>name</code> with a typcasting object in\n<code>type</code>.  <code>name</code> should correspond to the `typname` …\n"],["registered_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID.html#method-c-registered_type-3F","(name)","<p>Is <code>name</code> a registered type?\n"],["regular_class_path","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-regular_class_path","()",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_update","(other_hash)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["regular_writer","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-regular_writer","(key, value)",""],["release","ActiveSupport::Concurrency::Latch","classes/ActiveSupport/Concurrency/Latch.html#method-i-release","()",""],["release_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-release_connection","(with_id = current_connection_id)","<p>Signal that the thread is finished with the current connection.\n#release_connection releases the connection-thread …\n"],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-release_savepoint","()",""],["release_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-release_savepoint","()",""],["reload","ActiveRecord::AutosaveAssociation","classes/ActiveRecord/AutosaveAssociation.html#method-i-reload","(options = nil)","<p>Reloads the attributes of the object as usual and clears\n<code>marked_for_destruction</code> flag.\n"],["reload","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-reload","(options = nil)","<p>Reloads the record from the database.\n<p>This method modifies the receiver in-place. Attributes are updated, …\n"],["reload","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reload","()","<p>Forces reloading of relation.\n"],["reload!","Rails::Application::RoutesReloader","classes/Rails/Application/RoutesReloader.html#method-i-reload-21","()",""],["reload!","Rails::ConsoleMethods","classes/Rails/ConsoleMethods.html#method-i-reload-21","(print=true)","<p>reloads the environment\n"],["reload_routes!","Rails::Application","classes/Rails/Application.html#method-i-reload_routes-21","()","<p>Reload application routes regardless if they changed or not.\n"],["remote_addr=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-remote_addr-3D","(addr)",""],["remote_ip","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-remote_ip","()","<p>Originating IP address, usually set by the RemoteIp middleware.\n"],["remove","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-remove","(conn)","<p>Remove a connection from the connection pool.  The connection will remain\nopen and active but will no …\n"],["remove","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove","(*column_names)","<p>Removes the column(s) from the table definition.\n\n<pre>t.remove(:qualification)\nt.remove(:qualification, :experience)</pre>\n"],["remove_belongs_to","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_belongs_to","(table_name, ref_name, options = {})",""],["remove_belongs_to","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_belongs_to","(*args)",""],["remove_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_column","(table_name, column_name, type = nil, options = {})","<p>Removes the column from the table definition.\n\n<pre>remove_column(:suppliers, :qualification)</pre>\n<p>The <code>type</code> and <code>options</code> …\n"],["remove_column","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-remove_column","(name)",""],["remove_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_column_sql","(table_name, column_name, type = nil, options = {})",""],["remove_columns","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_columns","(table_name, *column_names)","<p>Removes the given columns from the table definition.\n\n<pre>remove_columns(:suppliers, :qualification, :experience)</pre>\n"],["remove_columns_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_columns_sql","(table_name, *column_names)",""],["remove_connection","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-remove_connection","(owner)","<p>Remove the connection for this class. This will close the active connection\nand the defined connection …\n"],["remove_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-remove_connection","(klass = self)",""],["remove_filters!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_filters-21","()","<p>Removes all filters, but leaves in silencers. Useful if you suddenly need\nto see entire filepaths in …\n"],["remove_hook_for","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-remove_hook_for","(*names)","<p>Remove a previously added hook.\n\n<pre>remove_hook_for :orm</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_index","(table_name, options = {})","<p>Removes the given index from the table.\n<p>Removes the <code>index_accounts_on_column</code> in the\n<code>accounts</code> table.\n\n<pre>remove_index ...</pre>\n"],["remove_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_index","(options = {})","<p>Removes the given index from the table.\n<p>Remove the index_table_name_on_column in the table_name table …\n"],["remove_index_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_index_sql","(table_name, options = {})",""],["remove_possible_method","Module","classes/Module.html#method-i-remove_possible_method","(method)",""],["remove_reference","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_reference","(table_name, ref_name, options = {})","<p>Removes the reference(s). Also removes a <code>type</code> column if one\nexists. <code>remove_reference</code>, <code>remove_references</code> …\n"],["remove_references","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_references","(*args)","<p>Removes a reference. Optionally removes a <code>type</code> column.\n<code>remove_references</code> and <code>remove_belongs_to</code> are\nacceptable. …\n"],["remove_silencers!","ActiveSupport::BacktraceCleaner","classes/ActiveSupport/BacktraceCleaner.html#method-i-remove_silencers-21","()","<p>Will remove all silencers, but leave in the filters. This is useful if your\ncontext of debugging suddenly …\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-remove_timestamps","(table_name)","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table definition.\n\n<pre>remove_timestamps(:suppliers)</pre>\n"],["remove_timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-remove_timestamps","()","<p>Removes the timestamp columns (<code>created_at</code> and\n<code>updated_at</code>) from the table.\n\n<pre>t.remove_timestamps</pre>\n"],["remove_timestamps_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-remove_timestamps_sql","(table_name)",""],["remove_tracker","ActionView::DependencyTracker","classes/ActionView/DependencyTracker.html#method-c-remove_tracker","(handler)",""],["rename","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename","(column_name, new_column_name)","<p>Renames a column.\n\n<pre>t.rename(:description, :name)</pre>\n"],["rename_column","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column in a table.\n"],["rename_column","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column","(table_name, column_name, new_column_name)","<p>Renames a column.\n\n<pre>rename_column(:suppliers, :description, :name)</pre>\n"],["rename_column_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_column_indexes","(table_name, column_name, new_column_name)",""],["rename_column_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_column_sql","(table_name, column_name, new_column_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)",""],["rename_index","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_index","(table_name, old_name, new_name)","<p>Renames an index.\n<p>Rename the <code>index_people_on_last_name</code> index to\n<code>index_users_on_last_name</code>:\n\n<pre>rename_index ...</pre>\n"],["rename_index","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-rename_index","(index_name, new_index_name)","<p>Renames the given index on the table.\n\n<pre>t.rename_index(:user_id, :account_id)</pre>\n"],["rename_key","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-rename_key","(key, options = {})",""],["rename_table","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table. Also renames a table&#39;s primary key sequence if the\nsequence name matches the Active …\n"],["rename_table","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n<p>Example:\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table","(table_name, new_name)","<p>Renames a table.\n\n<pre>rename_table(&#39;octopuses&#39;, &#39;octopi&#39;)</pre>\n"],["rename_table_indexes","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-rename_table_indexes","(table_name, new_name)",""],["render","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render","(*args, &block)","<p>Normalize arguments, options and then delegates render_to_body and sticks\nthe result in self.response_body. …\n"],["render","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-render","(*args)",""],["render","ActionView::Helpers::RenderingHelper","classes/ActionView/Helpers/RenderingHelper.html#method-i-render","(options = {}, locals = {}, &block)","<p>Returns the result of a render that&#39;s dictated by the options hash. The\nprimary options are:\n<p><code>:partial</code> …\n"],["render","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render","(context, options, block)",""],["render","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render","(context, options)","<p>Main render entry point shared by AV and AC.\n"],["render","ActionView::Template","classes/ActionView/Template.html#method-i-render","(view, locals, buffer=nil, &block)","<p>Render a template. If the template was not compiled yet, it is done exactly\nbefore rendering.\n<p>This method …\n"],["render","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-render","(options = {}, local_assigns = {}, &block)",""],["render","ActionView::TestCase::Behavior::Locals","classes/ActionView/TestCase/Behavior/Locals.html#method-i-render","(options = {}, local_assigns = {})",""],["render_bind","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-render_bind","(column, value)",""],["render_body","ActionView::Renderer","classes/ActionView/Renderer.html#method-i-render_body","(context, options)","<p>Render but returns a valid Rack body. If fibers are defined, we return a\nstreaming body that renders …\n"],["render_collection","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_collection","(event)",""],["render_collection","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render_collection","()",""],["render_partial","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_partial","(event)",""],["render_partial","ActionView::PartialRenderer","classes/ActionView/PartialRenderer.html#method-i-render_partial","()",""],["render_template","ActionView::LogSubscriber","classes/ActionView/LogSubscriber.html#method-i-render_template","(event)",""],["render_to_body","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_body","(options = {})","<p>Raw rendering of a template. :api: plugin\n"],["render_to_body","ActionController::Renderers","classes/ActionController/Renderers.html#method-i-render_to_body","(options)",""],["render_to_body","ActionController::Rendering","classes/ActionController/Rendering.html#method-i-render_to_body","(*)",""],["render_to_string","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-render_to_string","(*args, &block)","<p>Raw rendering of a template to a string.\n<p>It is similar to render, except that it does not set the response_body …\n"],["render_to_string","ActionController::Rendering","classes/ActionController/Rendering.html#method-i-render_to_string","(*)","<p>Overwrite render_to_string because body can now be set to a rack body.\n"],["rendered_views","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-rendered_views","()",""],["rendered_views","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-rendered_views","()",""],["reorder","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reorder","(*args)","<p>Replaces any existing order defined on the relation with the specified\norder.\n\n<pre>User.order(&#39;email DESC&#39;).reorder(&#39;id ...</pre>\n"],["reorder_characters","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-reorder_characters","(codepoints)","<p>Re-order codepoints so the string becomes canonical.\n"],["replace","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-replace","(other_array)","<p>Replaces this collection with <code>other_array</code>. This will perform a\ndiff and delete/add only records that …\n"],["replace","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["replace","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-replace","(other_hash)","<p>Replaces the contents of this hash with other_hash.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">h</span> = { <span class=\"ruby-string\">&quot;a&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">100</span>, <span class=\"ruby-string\">&quot;b&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">200</span> }\n<span class=\"ruby-identifier\">h</span>.<span class=\"ruby-identifier\">replace</span>({ <span class=\"ruby-string\">&quot;c&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["reqs","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-reqs","()",""],["request","ActionController::Base","classes/ActionController/Base.html#method-i-request","","<p>Returns an ActionDispatch::Request instance that represents the current\nrequest.\n"],["request_http_basic_authentication","ActionController::HttpAuthentication::Basic::ControllerMethods","classes/ActionController/HttpAuthentication/Basic/ControllerMethods.html#method-i-request_http_basic_authentication","(realm = \"Application\")",""],["request_http_digest_authentication","ActionController::HttpAuthentication::Digest::ControllerMethods","classes/ActionController/HttpAuthentication/Digest/ControllerMethods.html#method-i-request_http_digest_authentication","(realm = \"Application\", message = nil)","<p>Render output including the HTTP Digest authentication header\n"],["request_http_token_authentication","ActionController::HttpAuthentication::Token::ControllerMethods","classes/ActionController/HttpAuthentication/Token/ControllerMethods.html#method-i-request_http_token_authentication","(realm = \"Application\")",""],["request_method","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method","()","<p>Returns the HTTP method that the application should see. In the case where\nthe method was overridden …\n"],["request_method=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_method-3D","(method)",""],["request_method_symbol","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_method_symbol","()","<p>Returns a symbol form of the #request_method\n"],["request_parameters","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-request_parameters","()",""],["request_uri=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-request_uri-3D","(uri)",""],["request_via_redirect","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-request_via_redirect","(http_method, path, parameters = nil, headers_or_env = nil)","<p>Performs a request using the specified method, following any subsequent\nredirect. Note that the redirects …\n"],["require","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-require","(key)","<p>Ensures that a parameter is present. If it&#39;s present, returns the\nparameter at the given <code>key</code>, otherwise …\n"],["require_debugger","Rails::Console","classes/Rails/Console.html#method-i-require_debugger","()",""],["require_engine","ActionView::Template::Handlers::Builder","classes/ActionView/Template/Handlers/Builder.html#method-i-require_engine","()",""],["require_fixture_classes","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-require_fixture_classes","(fixture_set_names = nil)",""],["require_tzinfo","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-require_tzinfo","()",""],["required","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-required","(key)","<p>Alias of #require.\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-requires_reloading-3F","()","<p>Returns true if its required to reload the connection between requests for\ndevelopment mode. This is …\n"],["requires_reloading?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-requires_reloading-3F","()",""],["rescue_action_without_handler","ActionController::TestCase::RaiseActionExceptions","classes/ActionController/TestCase/RaiseActionExceptions.html#method-i-rescue_action_without_handler","(e)",""],["rescue_from","ActiveSupport::Rescuable::ClassMethods","classes/ActiveSupport/Rescuable/ClassMethods.html#method-i-rescue_from","(*klasses, &block)","<p>Rescue exceptions raised in controller actions.\n<p><code>rescue_from</code> receives a series of exception classes or …\n"],["rescue_template","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-rescue_template","()",""],["rescue_with_handler","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-rescue_with_handler","(exception)",""],["rescue_with_handler","ActiveSupport::Rescuable","classes/ActiveSupport/Rescuable.html#method-i-rescue_with_handler","(exception)","<p>Tries to rescue the exception by looking up and calling a registered\nhandler.\n"],["reset","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-reset","()",""],["reset!","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-reset-21","()","<p>Reset the current session. This is useful for testing multiple sessions in\na single test case.\n"],["reset!","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-reset-21","()","<p>Resets the instance. This can be used to reset the state information in an\nexisting session instance, …\n"],["reset!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-reset-21","()","<p>Reset the state of this connection, directing the DBMS to clear\ntransactions and other connection-related …\n"],["reset!","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-reset-21","()",""],["reset!","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-reset-21","()",""],["reset_cache","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-c-reset_cache","()",""],["reset_callbacks","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-reset_callbacks","(symbol)","<p>Remove all set callbacks for the given event.\n"],["reset_column_information","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-reset_column_information","()","<p>Resets all the cached information about columns, which will cause them to\nbe reloaded on the next request. …\n"],["reset_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-reset_counters","(id, *counters)","<p>Resets one or more counter caches to their correct value using an SQL count\nquery. This is useful when …\n"],["reset_cycle","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-reset_cycle","(name = \"default\")","<p>Resets a cycle so that it starts from the first element the next time it is\ncalled. Pass in <code>name</code> to reset …\n"],["reset_locking_column","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-reset_locking_column","()","<p>Reset the column used for optimistic locking back to the\n<code>lock_version</code> default.\n"],["reset_runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-reset_runtime","()",""],["reset_sequence!","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-reset_sequence-21","(table, column, sequence = nil)","<p>Set the sequence to the max value of the table&#39;s column.\n"],["reset_session","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-reset_session","()",""],["reset_session","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-reset_session","()","<p>TODO This should be broken apart into AD::Request::Session and probably be\nincluded by the session middleware. …\n"],["resolve","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-c-resolve","(uri)",""],["resolve","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-c-resolve","(uri)",""],["resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resource","(*resources, &block)","<p>Sometimes, you have a resource that clients always look up without\nreferencing an ID. A common example, …\n"],["resource_errors","ActionController::Responder","classes/ActionController/Responder.html#method-i-resource_errors","()",""],["resource_location","ActionController::Responder","classes/ActionController/Responder.html#method-i-resource_location","()","<p>Returns the resource location by retrieving it from the options or\nreturning the resources array.\n"],["resourceful?","ActionController::Responder","classes/ActionController/Responder.html#method-i-resourceful-3F","()","<p>Checks whether the resource responds to the current format or not.\n"],["resources","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources","(*resources, &block)","<p>In Rails, a resourceful route provides a mapping between HTTP verbs and\nURLs and controller actions. …\n"],["resources_path_names","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-resources_path_names","(options)",""],["respond","ActionController::Responder","classes/ActionController/Responder.html#method-i-respond","()","<p>Main entry point for responder responsible to dispatch to the proper\nformat.\n"],["respond_to","ActionController::MimeResponds","classes/ActionController/MimeResponds.html#method-i-respond_to","(*mimes, &block)","<p>Without web-service support, an action which collects the data for\ndisplaying a list of people might …\n"],["respond_to","ActionController::MimeResponds::ClassMethods","classes/ActionController/MimeResponds/ClassMethods.html#method-i-respond_to","(*mimes)","<p>Defines mime types that are rendered by default when invoking\n<code>respond_with</code>.\n\n<pre>respond_to :html, :xml, :json</pre>\n"],["respond_to?","ActionDispatch::Integration::Runner","classes/ActionDispatch/Integration/Runner.html#method-i-respond_to-3F","(method, include_private = false)",""],["respond_to?","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-respond_to-3F","(method)",""],["respond_to?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to-3F","(method, include_private_methods = false)",""],["respond_to?","ActiveRecord::AttributeMethods","classes/ActiveRecord/AttributeMethods.html#method-i-respond_to-3F","(name, include_private = false)","<p>A Person object with a name attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code>, …\n"],["respond_to?","Rails::Railtie::Configurable::ClassMethods","classes/Rails/Railtie/Configurable/ClassMethods.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-respond_to-3F","(name)",""],["respond_to_missing?","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-respond_to_missing-3F","(method, include_private)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method.\nPrivate methods are included in the search only if …\n"],["respond_to_missing?","ActiveSupport::OrderedOptions","classes/ActiveSupport/OrderedOptions.html#method-i-respond_to_missing-3F","(name, include_private)",""],["respond_to_missing?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-respond_to_missing-3F","(sym, include_priv)","<p>Ensure proxy class responds to all methods that underlying time instance\nresponds to.\n"],["respond_to_missing?","Mime::NullType","classes/Mime/NullType.html#method-i-respond_to_missing-3F","(method, include_private = false)",""],["respond_to_without_attributes?","ActiveModel::AttributeMethods","classes/ActiveModel/AttributeMethods.html#method-i-respond_to_without_attributes-3F","(method, include_private_methods = false)","<p>A <code>Person</code> instance with a <code>name</code> attribute can ask\n<code>person.respond_to?(:name)</code>,\n<code>person.respond_to?(:name=)</code> …\n"],["respond_with","ActionController::MimeResponds","classes/ActionController/MimeResponds.html#method-i-respond_with","(*resources, &block)","<p>For a given controller action, respond_with generates an appropriate\nresponse based on the mime-type …\n"],["response","ActionController::Base","classes/ActionController/Base.html#method-i-response","","<p>Returns an ActionDispatch::Response that represents the current response.\n"],["response","ActionController::MimeResponds::Collector","classes/ActionController/MimeResponds/Collector.html#method-i-response","()",""],["response_body=","ActionController::Live","classes/ActionController/Live.html#method-i-response_body-3D","(body)",""],["response_body=","ActionController::Metal","classes/ActionController/Metal.html#method-i-response_body-3D","(body)",""],["response_body=","ActionController::RackDelegation","classes/ActionController/RackDelegation.html#method-i-response_body-3D","(body)",""],["response_code","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-response_code","()","<p>The response code of the request.\n"],["response_from_page","ActionDispatch::Assertions::SelectorAssertions","classes/ActionDispatch/Assertions/SelectorAssertions.html#method-i-response_from_page","()","<p><code>assert_select</code> and <code>css_select</code> call this to obtain\nthe content in the HTML page.\n"],["response_overridden?","ActionController::Responder","classes/ActionController/Responder.html#method-i-response_overridden-3F","()",""],["result","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-result","()",""],["result","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-result","()",""],["result","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-result","()","<p>Extended in activerecord-deprecated_finders\n"],["retrieve_connection","ActiveRecord::ConnectionHandling","classes/ActiveRecord/ConnectionHandling.html#method-i-retrieve_connection","()",""],["retrieve_connection_pool","ActiveRecord::ConnectionAdapters::ConnectionHandler","classes/ActiveRecord/ConnectionAdapters/ConnectionHandler.html#method-i-retrieve_connection_pool","(klass)","<p>Retrieving the connection pool happens a lot so we cache it in\n@class_to_pool. This makes retrieving …\n"],["reverse","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-reverse","()","<p>Reverses all characters in the string.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;Café&#39;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">reverse</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; &#39;éfaC&#39;</span>\n</pre>\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],["reverse_merge","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge","(other_hash)","<p>Like <code>merge</code> but the other way around: Merges the receiver into\nthe argument and returns a new hash with …\n"],["reverse_merge","Hash","classes/Hash.html#method-i-reverse_merge","(other_hash)","<p>Merges the caller into <code>other_hash</code>. For example,\n\n<pre>options = options.reverse_merge(size: 25, velocity: 10)</pre>\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],["reverse_merge!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-reverse_merge-21","(other_hash)","<p>Same semantics as <code>reverse_merge</code> but modifies the receiver\nin-place.\n"],["reverse_merge!","Hash","classes/Hash.html#method-i-reverse_merge-21","(other_hash)","<p>Destructive <code>reverse_merge</code>.\n"],["reverse_order","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-reverse_order","()","<p>Reverse the existing order clause on the relation.\n\n<pre>User.order(&#39;name ASC&#39;).reverse_order # generated SQL ...</pre>\n"],["reverse_update","Hash","classes/Hash.html#method-i-reverse_update","(other_hash)",""],["reversible","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reversible","()","<p>Used to specify an operation that can be run in one direction or another.\nCall the methods <code>up</code> and <code>down</code> …\n"],["revert","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-revert","(*migration_classes)","<p>Reverses the migration commands for the given block and the given\nmigrations.\n<p>The following migration …\n"],["revert","ActiveRecord::Migration::CommandRecorder","classes/ActiveRecord/Migration/CommandRecorder.html#method-i-revert","()","<p>While executing the given block, the recorded will be in reverting mode.\nAll commands recorded will end …\n"],["reverting?","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-reverting-3F","()",""],["rewind","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-rewind","()","<p>Shortcut for <code>tempfile.rewind</code>.\n"],["rewrite_param_values","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-rewrite_param_values","(array_params)","<p>This removes the `“` characters wrapping the value.\n"],["rfc2822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc2822","()","<p>Returns a string of the object&#39;s date and time in the RFC 2822 standard\nformat.\n\n<pre>Time.zone.now.rfc2822 ...</pre>\n"],["rfc822","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-rfc822","()",""],["rollback_active_record_state!","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-rollback_active_record_state-21","()","<p>Reset id and @new_record if the transaction rolls back.\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Rolls back the transaction (and turns on auto-committing). Must be done if\nthe transaction block raises …\n"],["rollback_db_transaction","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-rollback_db_transaction","()","<p>Aborts a transaction.\n"],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-rollback_to_savepoint","()",""],["rollback_to_savepoint","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-rollback_to_savepoint","()",""],["rolledback?","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-rolledback-3F","()",""],["root","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root","(options = {})","<p>You can specify what Rails should route “/” to with the root method:\n\n<pre>root to: &#39;pages#main&#39;</pre>\n<p>For …\n"],["root","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-root","(path, options={})",""],["root","Rails","classes/Rails.html#method-c-root","()",""],["root=","Rails::Engine::Configuration","classes/Rails/Engine/Configuration.html#method-i-root-3D","(value)",""],["route","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-route","(routing_code)","<p>Make an entry in Rails routing file config/routes.rb\n\n<pre>route &quot;root &#39;welcome#index&#39;&quot;</pre>\n"],["route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["route_url","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-route_url","()",""],["routes","Rails::Engine","classes/Rails/Engine.html#method-c-routes","()","<p>Defines the routes for this engine. If a block is given to routes, it is\nappended to the engine.\n"],["run","ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper","classes/ActiveRecord/ConnectionAdapters/ConnectionPool/Reaper.html#method-i-run","()",""],["run","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-run","(*migration_classes)","<p>Runs the given migration classes. Last argument can specify options:\n<p>:direction (default is :up)\n<p>:revert …\n"],["run","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-run","(runner)",""],["run","Rails::Initializable::Initializer","classes/Rails/Initializable/Initializer.html#method-i-run","(*args)",""],["run_callbacks","ActiveSupport::Callbacks","classes/ActiveSupport/Callbacks.html#method-i-run_callbacks","(kind, &block)","<p>Runs the callbacks for the given event.\n<p>Calls the before and around callbacks in the order they were set, …\n"],["run_generator","Rails::Generators::Testing::Behaviour","classes/Rails/Generators/Testing/Behaviour.html#method-i-run_generator","(args=self.default_arguments, config={})","<p>Runs the generator configured for this class. The first argument is an\narray like command line arguments: …\n"],["run_in_isolation","ActiveSupport::Testing::Isolation::Forking","classes/ActiveSupport/Testing/Isolation/Forking.html#method-i-run_in_isolation","(&blk)",""],["run_in_isolation","ActiveSupport::Testing::Isolation::Subprocess","classes/ActiveSupport/Testing/Isolation/Subprocess.html#method-i-run_in_isolation","(&blk)","<p>Crazy H4X to get this working in windows / jruby with no forking.\n"],["run_in_transaction?","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-run_in_transaction-3F","()",""],["run_initializers","Rails::Initializable","classes/Rails/Initializable.html#method-i-run_initializers","(group=:default, *args)",""],["run_load_hooks","ActiveSupport","classes/ActiveSupport.html#method-c-run_load_hooks","(name, base = Object)",""],["runner","Rails::Railtie","classes/Rails/Railtie.html#method-c-runner","(&blk)",""],["runtime","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime","()",""],["runtime=","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-c-runtime-3D","(value)",""],["safe_concat","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-safe_concat","(string)",""],["safe_concat","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-safe_concat","(value)",""],["safe_constantize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-safe_constantize","(camel_cased_word)","<p>Tries to find a constant with the name specified in the argument string.\n\n<pre>&#39;Module&#39;.safe_constantize    ...</pre>\n"],["safe_constantize","String","classes/String.html#method-i-safe_constantize","()","<p><code>safe_constantize</code> tries to find a declared constant with the\nname specified in the string. It returns …\n"],["safe_get","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-safe_get","(key)",""],["safe_join","ActionView::Helpers::OutputSafetyHelper","classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-safe_join","(array, sep=$,)","<p>This method returns a html safe string similar to what\n<code>Array#join</code> would return. All items in the array, …\n"],["sandbox?","Rails::Console","classes/Rails/Console.html#method-i-sandbox-3F","()",""],["sanitize","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize","(html, options = {})","<p>This <code>sanitize</code> helper will html encode all tags and strip all\nattributes that aren&#39;t specifically …\n"],["sanitize","HTML::FullSanitizer","classes/HTML/FullSanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitize","(text, options = {})",""],["sanitize_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_conditions","(condition, table_name = self.table_name)",""],["sanitize_css","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of CSS code. Used by <code>sanitize</code> when it comes\nacross a style attribute.\n"],["sanitize_css","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-sanitize_css","(style)","<p>Sanitizes a block of css code. Used by #sanitize when it comes across a\nstyle attribute\n"],["sanitize_limit","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sanitize_limit","(limit)","<p>Sanitizes the given LIMIT parameter in order to prevent SQL injection.\n<p>The <code>limit</code> may be anything that …\n"],["sanitize_sql","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql","(condition, table_name = self.table_name)",""],["sanitize_sql_array","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_array","(ary)","<p>Accepts an array of conditions. The array has each value sanitized and\ninterpolated into the SQL statement. …\n"],["sanitize_sql_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_assignment","(assignments, default_table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_for_conditions","(condition, table_name = self.table_name)","<p>Accepts an array, hash, or string of SQL conditions and sanitizes them into\na valid SQL fragment for …\n"],["sanitize_sql_hash","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash","(attrs, default_table_name = self.table_name)",""],["sanitize_sql_hash_for_assignment","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_assignment","(attrs, table)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a SET\nclause.\n\n<pre>{ status: nil, group_id: ...</pre>\n"],["sanitize_sql_hash_for_conditions","ActiveRecord::Sanitization::ClassMethods","classes/ActiveRecord/Sanitization/ClassMethods.html#method-i-sanitize_sql_hash_for_conditions","(attrs, default_table_name = self.table_name)","<p>Sanitizes a hash of attribute/value pairs into SQL conditions for a WHERE\nclause.\n\n<pre>{ name: &quot;foo&#39;bar&quot;, group_id: ...</pre>\n"],["sanitizeable?","HTML::LinkSanitizer","classes/HTML/LinkSanitizer.html#method-i-sanitizeable-3F","(text)",""],["sanitizeable?","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-sanitizeable-3F","(text)",""],["save","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save","(options={})","<p>The validation process on save can be skipped by passing <code>validate:\nfalse</code>. The regular Base#save method …\n"],["save","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-save","()","<p>POST create\n"],["save!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-save-21","(*)","<p>Saves the model.\n<p>If the model is new a record gets created in the database, otherwise the\nexisting record …\n"],["save!","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-save-21","(options={})","<p>Attempts to save the record just like Base#save but will raise a\n<code>RecordInvalid</code> exception instead of returning …\n"],["say","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say","(message, subitem=false)",""],["say_with_time","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-say_with_time","(message)",""],["schema_cache=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_cache-3D","(cache)",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-schema_creation","()",""],["schema_creation","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-schema_creation","()",""],["schema_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_exists-3F","(name)","<p>Returns true if schema exists.\n"],["schema_names","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_names","()","<p>Returns an array of schema names.\n"],["schema_search_path","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path","()","<p>Returns the active schema search path.\n"],["schema_search_path=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-schema_search_path-3D","(schema_csv)","<p>Sets the schema search path to a string of comma-separated schema names.\nNames beginning with $ have …\n"],["scope","ActionDispatch::Routing::Mapper::Scoping","classes/ActionDispatch/Routing/Mapper/Scoping.html#method-i-scope","(*args)","<p>Scopes a set of routes to the given default options.\n<p>Take the following route definition as an example: …\n"],["scope","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scope","()","<p>Returns a <code>Relation</code> object for the records in this association\n"],["scope","ActiveRecord::Scoping::Named::ClassMethods","classes/ActiveRecord/Scoping/Named/ClassMethods.html#method-i-scope","(name, body, &block)","<p>Adds a class method for retrieving and querying objects. A scope represents\na narrowing of a database …\n"],["scope_for_create","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scope_for_create","()",""],["scoping","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-scoping","()","<p>We don&#39;t want this object to be put on the scoping stack, because that\ncould create an infinite loop …\n"],["scoping","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-scoping","()","<p>Scope all queries to the current scope.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">post_id</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-value\">1</span>).<span class=\"ruby-identifier\">scoping</span> <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-constant\">Comment</span>.<span class=\"ruby-identifier\">first</span>\n<span class=\"ruby-keyword\">end</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["search_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-search_field","(object_name, method, options = {})","<p>Returns an input of type “search” for accessing a specified attribute\n(identified by <code>method</code> …\n"],["search_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-search_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “search”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["second","Array","classes/Array.html#method-i-second","()","<p>Equal to <code>self[1]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">second</span> <span class=\"ruby-comment\"># =&gt; &quot;b&quot;</span>\n</pre>\n"],["second","Numeric","classes/Numeric.html#method-i-second","()",""],["seconds","Numeric","classes/Numeric.html#method-i-seconds","()","<p>Enables the use of time calculations and declarations, like 45.minutes +\n2.hours + 4.years.\n<p>These methods …\n"],["seconds_since_midnight","DateTime","classes/DateTime.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: DateTime.now.seconds_since_midnight.\n"],["seconds_since_midnight","Time","classes/Time.html#method-i-seconds_since_midnight","()","<p>Seconds since midnight: Time.now.seconds_since_midnight\n"],["seconds_to_utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-seconds_to_utc_offset","(seconds, colon = true)","<p>Assumes self represents an offset from UTC in seconds (as returned from\nTime#utc_offset) and turns this …\n"],["seconds_until_end_of_day","DateTime","classes/DateTime.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre>DateTime.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</pre>\n"],["seconds_until_end_of_day","Time","classes/Time.html#method-i-seconds_until_end_of_day","()","<p>Returns the number of seconds until 23:59:59.\n\n<pre>Time.new(2012, 8, 29,  0,  0,  0).seconds_until_end_of_day ...</pre>\n"],["secret_token","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-secret_token","(request)",""],["section","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-section","(routes)",""],["section","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section","(routes)",""],["section_title","ActionDispatch::Routing::ConsoleFormatter","classes/ActionDispatch/Routing/ConsoleFormatter.html#method-i-section_title","(title)",""],["section_title","ActionDispatch::Routing::HtmlTableFormatter","classes/ActionDispatch/Routing/HtmlTableFormatter.html#method-i-section_title","(title)",""],["select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-select","(method, choices, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#select for form builders:\n\n<pre>&lt;%= form_for @post do |f| %&gt;\n  ...</pre>\n"],["select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-select","(object, method, choices, options = {}, html_options = {})","<p>Create a select tag and a series of contained option tags for the provided\nobject and method. The option …\n"],["select","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-select","(select = nil, &block)","<p>Works in two ways.\n<p><strong>First:</strong> Specify a subset of fields to be selected from the\nresult set.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["select","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select","(sql, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-select","(*fields)","<p>Works in two unique ways.\n<p>First: takes a block so it can be used just like Array#select.\n\n<pre>Model.all.select ...</pre>\n"],["select","HTML::Selector","classes/HTML/Selector.html#method-i-select","(root)","<p>Selects and returns an array with all matching elements, beginning with one\nnode and traversing through …\n"],["select","HTML::Tag","classes/HTML/Tag.html#method-i-select","(selector, *values)",""],["select_all","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_all","(arel, name = nil, binds = [])","<p>Returns an array of record hashes with the column names as keys and column\nvalues as values.\n"],["select_all","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-select_all","(arel, name = nil, binds = [])",""],["select_date","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_date","(date = Date.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, and day)\npre-selected with the <code>date</code>. It&#39;s …\n"],["select_datetime","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_datetime","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for year, month, day, hour, minute,\nand second) pre-selected with …\n"],["select_day","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_day","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the days 1 through 31 with\nthe current day selected. The …\n"],["select_first","HTML::Selector","classes/HTML/Selector.html#method-i-select_first","(root)","<p>Similar to #select but returns the first matching element. Returns\n<code>nil</code> if no element matches the selector. …\n"],["select_hour","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_hour","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the hours 0 through 23 with\nthe current hour selected. …\n"],["select_minute","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_minute","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the minutes 0 through 59 with\nthe current minute selected. …\n"],["select_month","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_month","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the months January through\nDecember with the current month …\n"],["select_one","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_one","(arel, name = nil, binds = [])","<p>Returns a record hash with the column names as keys and column values as\nvalues.\n"],["select_rows","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-select_rows","(sql, name = nil)","<p>Returns an array of arrays containing the field values. Order is the same\nas that returned by <code>columns</code> …\n"],["select_rows","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-select_rows","(sql, name = nil)","<p>DATABASE STATEMENTS ======================================\n"],["select_rows","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-select_rows","(sql, name = nil)","<p>Executes a SELECT query and returns an array of rows. Each row is an array\nof field values.\n"],["select_rows","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-select_rows","(sql, name = nil)",""],["select_second","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_second","(datetime, options = {}, html_options = {})","<p>Returns a select tag with options for each of the seconds 0 through 59 with\nthe current second selected. …\n"],["select_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag","(name, option_tags = nil, options = {})","<p>Creates a dropdown selection box, or if the <code>:multiple</code> option\nis set to true, a multiple choice selection …\n"],["select_time","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_time","(datetime = Time.current, options = {}, html_options = {})","<p>Returns a set of html select-tags (one for hour and minute). You can set\n<code>:time_separator</code> key to format …\n"],["select_value","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_value","(arel, name = nil, binds = [])","<p>Returns a single value from a record\n"],["select_values","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-select_values","(arel, name = nil)","<p>Returns an array of the values of the first column in a select:\n\n<pre>select_values(&quot;SELECT id FROM companies ...</pre>\n"],["select_year","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-select_year","(date, options = {}, html_options = {})","<p>Returns a select tag with options for each of the five years on each side\nof the current, which is selected. …\n"],["selector","HTML","classes/HTML.html#method-c-selector","(statement, *values)","<p>See HTML::Selector.new\n"],["send_action","ActionController::ImplicitRender","classes/ActionController/ImplicitRender.html#method-i-send_action","(method, *args)",""],["send_data","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_data","(data, options = {})","<p>Sends the given binary data to the browser. This method is similar to\n<code>render text: data</code>, but also allows …\n"],["send_data","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_data","(data, options = {})",""],["send_data","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_data","(event)",""],["send_file","ActionController::DataStreaming","classes/ActionController/DataStreaming.html#method-i-send_file","(path, options = {})","<p>Sends the file. This uses a server-appropriate method (such as X-Sendfile)\nvia the Rack::Sendfile middleware. …\n"],["send_file","ActionController::Instrumentation","classes/ActionController/Instrumentation.html#method-i-send_file","(path, options={})",""],["send_file","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-send_file","(event)",""],["sequence_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name","()",""],["sequence_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-sequence_name-3D","(value)","<p>Sets the name of the sequence to use when generating ids to the given\nvalue, or (if the value is nil …\n"],["serial_sequence","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-serial_sequence","(table, column)",""],["serializable_hash","ActiveModel::Serialization","classes/ActiveModel/Serialization.html#method-i-serializable_hash","(options = nil)","<p>Returns a serialized hash of your object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Serialization</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["serializable_hash","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-serializable_hash","(options = nil)",""],["serialize","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialize","(attr_name, class_name = Object)","<p>If you have an attribute that needs to be saved to the database as an\nobject, and retrieved as the same …\n"],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization","classes/ActiveRecord/AttributeMethods/Serialization.html#method-i-serialized_attributes","()","<p><strong>DEPRECATED</strong>: Use\nActiveRecord::AttributeMethods::Serialization::ClassMethods#serialized_attributes\nclass …\n"],["serialized_attributes","ActiveRecord::AttributeMethods::Serialization::ClassMethods","classes/ActiveRecord/AttributeMethods/Serialization/ClassMethods.html#method-i-serialized_attributes","","<p>Returns a hash of all the attributes that have been specified for\nserialization as keys and their class …\n"],["server_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-server_port","()",""],["server_software","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-server_software","()","<p>Returns the lowercase name of the HTTP server software.\n"],["session","ActionDispatch::TestProcess","classes/ActionDispatch/TestProcess.html#method-i-session","()",""],["session_auth=","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-session_auth-3D","(user)","<p>Set the authorized user for this session\n"],["session_options=","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-session_options-3D","(options)",""],["session_store","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-session_store","(*args)",""],["set","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-set","(key, value)","<p>Set messages for <code>key</code> to <code>value</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">get</span>(:<span class=\"ruby-identifier\">name</span>) <span class=\"ruby-comment\"># =&gt; [&quot;can not be nil&quot;]</span>\n<span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">set</span>(:<span class=\"ruby-identifier\">name</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-set_callback","(name, *filter_list, &block)","<p>Install a callback for the given event.\n\n<pre>set_callback :save, :before, :before_meth\nset_callback :save, ...</pre>\n"],["set_content_type","ActionMailer::Base","classes/ActionMailer/Base.html#method-i-set_content_type","(m, user_content_type, class_default)",""],["set_cookie","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-set_cookie","(key, value)",""],["set_environment","Rails::Server","classes/Rails/Server.html#method-i-set_environment","()",""],["set_environment!","Rails::Console","classes/Rails/Console.html#method-i-set_environment-21","()",""],["set_expected_mail","ActionMailer::TestCase::Behavior","classes/ActionMailer/TestCase/Behavior.html#method-i-set_expected_mail","()",""],["set_fixture_class","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-set_fixture_class","(class_names = {})","<p>Sets the model class for a fixture when the class name cannot be inferred\nfrom the fixture name.\n<p>Examples: …\n"],["set_logger","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-set_logger","(logger)","<p>Overwrite if you use another logger in your log subscriber.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">logger</span>\n  <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>.<span class=\"ruby-identifier\">logger</span> = <span class=\"ruby-ivar\">@logger</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["set_member_mappings_for_resource","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-set_member_mappings_for_resource","()",""],["set_response!","ActionController::Live","classes/ActionController/Live.html#method-i-set_response-21","(request)",""],["set_session","ActionDispatch::Session::CacheStore","classes/ActionDispatch/Session/CacheStore.html#method-i-set_session","(env, sid, session, options)","<p>Set a session in the cache.\n"],["set_standard_conforming_strings","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-set_standard_conforming_strings","()","<p>Enable standard-conforming strings if available.\n"],["set_state","ActiveRecord::ConnectionAdapters::TransactionState","classes/ActiveRecord/ConnectionAdapters/TransactionState.html#method-i-set_state","(state)",""],["setup","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-setup","()",""],["setup","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-setup","(*args, &block)",""],["setup_controller_request_and_response","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-setup_controller_request_and_response","()",""],["setup_fixture_accessors","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-setup_fixture_accessors","(fixture_set_names = nil)",""],["setup_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-setup_fixtures","()",""],["setup_horo_variables","Rails::API::Task","classes/Rails/API/Task.html#method-i-setup_horo_variables","()",""],["setup_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-setup_subscriptions","()",""],["setup_with_controller","ActionView::TestCase::Behavior","classes/ActionView/TestCase/Behavior.html#method-i-setup_with_controller","()",""],["shallow","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow","()",""],["shallow?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-shallow-3F","()",""],["show_detailed_exceptions?","ActionController::Rescue","classes/ActionController/Rescue.html#method-i-show_detailed_exceptions-3F","()","<p>Override this method if you want to customize when detailed exceptions must\nbe shown. This method is …\n"],["show_exceptions_app","Rails::Application","classes/Rails/Application.html#method-i-show_exceptions_app","()",""],["show_variable","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-show_variable","(name)","<p>SHOW VARIABLES LIKE &#39;name&#39;\n"],["signature","ActiveRecord::DynamicMatchers::Finder","classes/ActiveRecord/DynamicMatchers/Finder.html#method-i-signature","()","<p>Extended in activerecord-deprecated_finders\n"],["signed","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed","()","<p>Returns a jar that&#39;ll automatically generate a signed representation of\ncookie value and verify it …\n"],["signed_or_encrypted","ActionDispatch::Cookies::ChainedCookieJars","classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed_or_encrypted","()","<p>Returns the <code>signed</code> or +encrypted jar, preferring\n<code>encrypted</code> if <code>secret_key_base</code> is set. Used by\nActionDispatch::Session::CookieStore …\n"],["silence","ActiveSupport::Benchmarkable","classes/ActiveSupport/Benchmarkable.html#method-i-silence","()","<p>Silence the logger during the execution of the block.\n"],["silence","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-silence","()","<p>Silence deprecation warnings within the block.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">ActiveSupport</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Deprecation</span>.<span class=\"ruby-identifier\">warn</span>(<span class=\"ruby-string\">&#39;something broke!&#39;</span>)\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["silence","Kernel","classes/Kernel.html#method-i-silence","(stream)",""],["silence","LoggerSilence","classes/LoggerSilence.html#method-i-silence","(temporary_level = Logger::ERROR)","<p>Silences the logger for the duration of the block.\n"],["silence!","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-silence-21","()","<p>Silence the logger.\n"],["silence_stream","Kernel","classes/Kernel.html#method-i-silence_stream","(stream)","<p>Silences any stream for the duration of the block.\n\n<pre>silence_stream(STDOUT) do\n  puts &#39;This will never be ...</pre>\n"],["silence_warnings","Kernel","classes/Kernel.html#method-i-silence_warnings","()","<p>Sets $VERBOSE to nil for the duration of the block and back to its original\nvalue afterwards.\n\n<pre>silence_warnings ...</pre>\n"],["simple_format","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-simple_format","(text, html_options = {}, options = {})","<p>Returns <code>text</code> transformed into HTML using simple formatting\nrules. Two or more consecutive newlines(<code>\\n\\n</code> …\n"],["simple_selector","HTML::Selector","classes/HTML/Selector.html#method-i-simple_selector","(statement, values, can_negate = true)","<p>Creates a simple selector given the statement and array of substitution\nvalues.\n<p>Returns a hash with the …\n"],["since","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-since","(time = ::Time.current)","<p>Calculates a new Time or Date that is as far in the future as this Duration\nrepresents.\n"],["since","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-since","(other)",""],["since","Date","classes/Date.html#method-i-since","(seconds)","<p>Converts Date to a Time (or DateTime if necessary) with the time portion\nset to the beginning of the …\n"],["since","DateTime","classes/DateTime.html#method-i-since","(seconds)","<p>Returns a new DateTime representing the time a number of seconds since the\ninstance time. Do not use …\n"],["since","Numeric","classes/Numeric.html#method-i-since","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.since(time)\n"],["since","Time","classes/Time.html#method-i-since","(seconds)","<p>Returns a new Time representing the time a number of seconds since the\ninstance time\n"],["singular","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular","(record_or_class)","<p>Returns the singular class name of a record or class.\n\n<pre>ActiveModel::Naming.singular(post)             # ...</pre>\n"],["singular","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-singular","(rule, replacement)","<p>Specifies a new singularization rule and its replacement. The rule can\neither be a string or a regular …\n"],["singular_route_key","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-singular_route_key","(record_or_class)","<p>Returns string to use while generating route names. It differs for\nnamespaced models regarding whether …\n"],["singular_table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-singular_table_name","()",""],["singularize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-singularize","(word, locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>If passed an optional <code>locale</code> …\n"],["singularize","String","classes/String.html#method-i-singularize","(locale = :en)","<p>The reverse of <code>pluralize</code>, returns the singular form of a word\nin a string.\n<p>If the optional parameter  …\n"],["size","ActionDispatch::Http::UploadedFile","classes/ActionDispatch/Http/UploadedFile.html#method-i-size","()","<p>Shortcut for <code>tempfile.size</code>.\n"],["size","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-size","()",""],["size","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-size","()","<p>Returns the number of error messages.\n\n<pre>person.errors.add(:name, &quot;can&#39;t be blank&quot;)\nperson.errors.size # ...</pre>\n"],["size","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-size","()","<p>Returns the size of the collection. If the collection hasn&#39;t been\nloaded, it executes a <code>SELECT COUNT(*)</code> …\n"],["size","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-size","()",""],["size","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-size","()",""],["size","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-size","()","<p>Returns size of the records.\n"],["skip_action_callback","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_action_callback","(*names)","<p>Skip before, after, and around action callbacks matching any of the names\nAliased as skip_filter.\n<p>Parameters …\n"],["skip_after_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_after_action","","<p>Skip a callback after actions. See _insert_callbacks for parameter details.\nAliased as skip_after_filter. …\n"],["skip_around_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_around_action","","<p>Skip a callback around actions. See _insert_callbacks for parameter\ndetails. Aliased as skip_around_filter. …\n"],["skip_before_action","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_before_action","","<p>Skip a callback before actions. See _insert_callbacks for parameter\ndetails. Aliased as skip_before_filter. …\n"],["skip_callback","ActiveSupport::Callbacks::ClassMethods","classes/ActiveSupport/Callbacks/ClassMethods.html#method-i-skip_callback","(name, *filter_list, &block)","<p>Skip a previously set callback. Like <code>set_callback</code>,\n<code>:if</code> or <code>:unless</code> options may be passed in order to\ncontrol …\n"],["skip_filter","AbstractController::Callbacks::ClassMethods","classes/AbstractController/Callbacks/ClassMethods.html#method-i-skip_filter","(*names)",""],["slice","ActionController::Parameters","classes/ActionController/Parameters.html#method-i-slice","(*keys)","<p>Returns a new <code>ActionController::Parameters</code> instance that\nincludes only the given <code>keys</code>. If the given  …\n"],["slice","ActiveRecord::Core","classes/ActiveRecord/Core.html#method-i-slice","(*methods)","<p>Returns a hash of the given methods with their names as keys and returned\nvalues as values.\n"],["slice","Hash","classes/Hash.html#method-i-slice","(*keys)","<p>Slice a hash to include only the given keys. This is useful for limiting an\noptions hash to valid keys …\n"],["slice!","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-slice-21","(*args)","<p>Works like like <code>String#slice!</code>, but returns an instance of\nChars, or nil if the string was not modified. …\n"],["slice!","Hash","classes/Hash.html#method-i-slice-21","(*keys)","<p>Replaces the hash with only the given keys. Returns a hash containing the\nremoved key/value pairs.\n\n<pre>{ a: ...</pre>\n"],["source_extract","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-source_extract","()",""],["source_root","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-source_root","(path=nil)","<p>Returns the source root for this generator using default_source_root as\ndefault.\n"],["split","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-split","(*args)","<p>Works just like <code>String#split</code>, with the exception that the\nitems in the resulting list are Chars instances …\n"],["split","Array","classes/Array.html#method-i-split","(value = nil, &block)","<p>Divides the array into one or more subarrays based on a delimiting\n<code>value</code> or the result of an optional …\n"],["sql","ActiveRecord::LogSubscriber","classes/ActiveRecord/LogSubscriber.html#method-i-sql","(event)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_for_insert","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-sql_for_insert","(sql, pk, id_value, sequence_name, binds)",""],["sql_query_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-sql_query_length","()","<p>Returns the maximum length of an SQL query.\n"],["sqlite_version","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-sqlite_version","()",""],["squish","String","classes/String.html#method-i-squish","()","<p>Returns the string, first removing all whitespace on both ends of the\nstring, and then changing remaining …\n"],["squish!","String","classes/String.html#method-i-squish-21","()","<p>Performs a destructive squish. See String#squish.\n"],["stale?","ActionController::ConditionalGet","classes/ActionController/ConditionalGet.html#method-i-stale-3F","(record_or_options, additional_options = {})","<p>Sets the <code>etag</code> and/or <code>last_modified</code> on the\nresponse and checks it against the client request. If the request …\n"],["stale_session_check!","ActionDispatch::Session::StaleSessionCheck","classes/ActionDispatch/Session/StaleSessionCheck.html#method-i-stale_session_check-21","()",""],["standard_port","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port","()","<p>Returns the standard port number for this request&#39;s protocol.\n"],["standard_port?","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-standard_port-3F","()","<p>Returns whether this request is using the standard port\n"],["start","ActiveSupport::LogSubscriber","classes/ActiveSupport/LogSubscriber.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Fanout::Subscribers::Timed","classes/ActiveSupport/Notifications/Fanout/Subscribers/Timed.html#method-i-start","(name, id, payload)",""],["start","ActiveSupport::Notifications::Instrumenter","classes/ActiveSupport/Notifications/Instrumenter.html#method-i-start","(name, payload)","<p>Send a start notification with <code>name</code> and <code>payload</code>.\n"],["start","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-i-start","(name, id, payload)",""],["start","Rails::Console","classes/Rails/Console.html#method-i-start","()",""],["start","Rails::Console","classes/Rails/Console.html#method-c-start","(*args)",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-i-start","()",""],["start","Rails::DBConsole","classes/Rails/DBConsole.html#method-c-start","()",""],["start","Rails::Server","classes/Rails/Server.html#method-i-start","()",""],["start_document","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_document","()",""],["start_element","ActiveSupport::XmlMini_NokogiriSAX::HashBuilder","classes/ActiveSupport/XmlMini_NokogiriSAX/HashBuilder.html#method-i-start_element","(name, attrs = [])",""],["start_processing","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-start_processing","(event)",""],["started_request_message","Rails::Rack::Logger","classes/Rails/Rack/Logger.html#method-i-started_request_message","(request)","<p>Started GET “/session/new” for 127.0.0.1 at 2012-09-26 14:51:42 -0700\n"],["stats","ActiveSupport::Cache::MemCacheStore","classes/ActiveSupport/Cache/MemCacheStore.html#method-i-stats","()","<p>Get the statistics from the memcached servers.\n"],["status","ActionController::Metal","classes/ActionController/Metal.html#method-i-status","()",""],["status=","ActionController::Metal","classes/ActionController/Metal.html#method-i-status-3D","(status)",""],["status=","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status-3D","(status)","<p>Sets the HTTP status code.\n"],["status_code","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-i-status_code","()",""],["status_code_for_exception","ActionDispatch::ExceptionWrapper","classes/ActionDispatch/ExceptionWrapper.html#method-c-status_code_for_exception","(class_name)",""],["status_message","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-status_message","()",""],["sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-sti_name","()",""],["store","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store","(store_attribute, options = {})",""],["store","ActiveSupport::Dependencies::ClassCache","classes/ActiveSupport/Dependencies/ClassCache.html#method-i-store","(klass)",""],["store_accessor","ActiveRecord::Store::ClassMethods","classes/ActiveRecord/Store/ClassMethods.html#method-i-store_accessor","(store_attribute, *keys)",""],["store_inherited","ActiveSupport::DescendantsTracker","classes/ActiveSupport/DescendantsTracker.html#method-c-store_inherited","(klass, descendant)","<p>This is the only method that is not thread safe, but is only ever called\nduring the eager loading phase. …\n"],["strftime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-strftime","(format)","<p>Replaces <code>%Z</code> and <code>%z</code> directives with\n<code>zone</code> and <code>formatted_offset</code>, respectively, before\npassing to Time#strftime …\n"],["strict_mode?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-strict_mode-3F","()",""],["string_to_array","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_array","(string, oid)",""],["string_to_bit","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_bit","(value)",""],["string_to_cidr","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_cidr","(string)",""],["string_to_hstore","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_hstore","(string)",""],["string_to_json","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_json","(string)",""],["string_to_point","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_point","(string)",""],["string_to_time","ActiveRecord::ConnectionAdapters::PostgreSQLColumn::Cast","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn/Cast.html#method-i-string_to_time","(string)",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys","()",""],["stringify_keys","Hash","classes/Hash.html#method-i-stringify_keys","()","<p>Return a new hash with all keys converted to strings.\n\n<pre>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; }\n\nhash.stringify_keys ...</pre>\n"],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-stringify_keys-21","()",""],["stringify_keys!","Hash","classes/Hash.html#method-i-stringify_keys-21","()","<p>Destructively convert all keys to strings. Same as\n<code>stringify_keys</code>, but modifies <code>self</code>.\n"],["strip_heredoc","String","classes/String.html#method-i-strip_heredoc","()","<p>Strips indentation in heredocs.\n<p>For example in\n\n<pre>if options[:usage]\n  puts &lt;&lt;-USAGE.strip_heredoc\n    This ...</pre>\n"],["strip_links","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_links","(html)","<p>Strips all link tags from <code>text</code> leaving just the link text.\n\n<pre>strip_links(&#39;&lt;a href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby ...</pre>\n"],["strip_tags","ActionView::Helpers::SanitizeHelper","classes/ActionView/Helpers/SanitizeHelper.html#method-i-strip_tags","(html)","<p>Strips all HTML tags from the <code>html</code>, including comments. This\nuses the html-scanner tokenizer and so its …\n"],["structure_dump","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_dump","(*arguments)",""],["structure_load","ActiveRecord::Tasks::DatabaseTasks","classes/ActiveRecord/Tasks/DatabaseTasks.html#method-i-structure_load","(*arguments)",""],["stylesheet_link_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-stylesheet_link_tag","(*sources)","<p>Returns a stylesheet link tag for the sources specified as arguments. If\nyou don&#39;t specify an extension, …\n"],["stylesheet_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_path","(source, options = {})","<p>Computes the path to a stylesheet asset in the public stylesheets\ndirectory. If the <code>source</code> filename has …\n"],["stylesheet_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-stylesheet_url","(source, options = {})","<p>Computes the full URL to a stylesheet asset in the public stylesheets\ndirectory. This will use <code>stylesheet_path</code> …\n"],["stylesheets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-stylesheets","()",""],["subclasses","Class","classes/Class.html#method-i-subclasses","()","<p>Returns an array with the direct children of <code>self</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Integer</span>.<span class=\"ruby-identifier\">subclasses</span> <span class=\"ruby-comment\"># =&gt; [Fixnum, Bignum]</span>\n\n<span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Foo</span>; <span class=\"ruby-operator\">...</span>\n</pre>\n"],["subclasses","Rails::Generators","classes/Rails/Generators.html#method-c-subclasses","()","<p>Track all generators subclasses.\n"],["subclasses","Rails::Railtie","classes/Rails/Railtie.html#method-c-subclasses","()",""],["subdomain","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomain","(tld_length = @@tld_length)","<p>Returns all the subdomains as a string, so <code>&quot;dev.www&quot;</code>\nwould be returned for “dev.www.rubyonrails.org …\n"],["subdomains","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-subdomains","(tld_length = @@tld_length)","<p>Returns all the subdomains as an array, so <code>[&quot;dev&quot;,\n&quot;www&quot;]</code> would be returned for “ …\n"],["submit","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-submit","(value=nil, options={})","<p>Add the submit button for the given form. When no value is given, it checks\nif the object is a new resource …\n"],["submit_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-submit_tag","(value = \"Save changes\", options = {})","<p>Creates a submit button with the text <code>value</code> as the caption.\n<p>Options\n<p><code>:data</code> - This option can be used to …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-subquery_for","(key, select)","<p>MySQL is too stupid to create a temporary table for use subquery, so we\nhave to give it some prompting …\n"],["subquery_for","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-subquery_for","(key, select)","<p>Return a subquery for the given key using the join information.\n"],["subscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribe","(*args, &block)",""],["subscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-subscribe","(pattern = nil, block = Proc.new)",""],["subscribed","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-subscribed","(callback, *args, &block)",""],["subscribers","ActiveSupport::Subscriber","classes/ActiveSupport/Subscriber.html#method-c-subscribers","()",""],["substitute_at","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-substitute_at","(column, index)","<p>Returns a bind substitution value given a <code>column</code> and list of\ncurrent <code>binds</code>.\n"],["substitute_at","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-substitute_at","(column, index)",""],["suffix","ActiveRecord::DynamicMatchers::FindByBang","classes/ActiveRecord/DynamicMatchers/FindByBang.html#method-c-suffix","()",""],["suffix","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-c-suffix","()",""],["sum","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-sum","(*args)","<p>Calculates the sum of values on a given column. The value is returned with\nthe same data type of the …\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(identity = 0, &block)","<p>Calculates a sum from the elements.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span> { <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">p</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">price</span> * <span class=\"ruby-identifier\">p</span>.<span class=\"ruby-identifier\">tax_rate</span> }\n<span class=\"ruby-identifier\">payments</span>.<span class=\"ruby-identifier\">sum</span>(&amp;:<span class=\"ruby-identifier\">price</span>)\n</pre>\n<p>The …\n"],["sunday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-sunday","()","<p>Returns Sunday of this week assuming that week starts on Monday.\n<code>DateTime</code> objects have their time set …\n"],["superclass_delegating_accessor","Class","classes/Class.html#method-i-superclass_delegating_accessor","(name, options = {})",""],["supports_add_column?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_add_column-3F","()","<p>Returns true\n"],["supports_bulk_alter?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_bulk_alter-3F","()",""],["supports_count_distinct?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_count_distinct-3F","()","<p>Does this adapter support using DISTINCT within COUNT? This is\n<code>true</code> for all adapters except sqlite.\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_ddl_transactions-3F","()","<p>Does this adapter support DDL rollbacks in transactions? That is, would\nCREATE TABLE or ALTER TABLE get …\n"],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ddl_transactions-3F","()",""],["supports_ddl_transactions?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_ddl_transactions-3F","()","<p>Returns true\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_explain-3F","()","<p>Does this adapter support explain? As of this writing sqlite3, mysql2, and\npostgresql are the only ones …\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::Mysql2Adapter","classes/ActiveRecord/ConnectionAdapters/Mysql2Adapter.html#method-i-supports_explain-3F","()",""],["supports_explain?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_explain?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_explain-3F","()","<p>Returns true.\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_extensions-3F","()","<p>Does this adapter support database extensions? As of this writing only\npostgresql does.\n"],["supports_extensions?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_extensions-3F","()","<p>Returns true if pg &gt; 9.2\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Does this adapter support index sort order?\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_index_sort_order-3F","()","<p>Technically MySQL allows to create indexes with the sort order syntax but\nat the moment (5.5) it doesn&#39;t …\n"],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_index_sort_order?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_index_sort_order-3F","()",""],["supports_insert_with_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_insert_with_returning-3F","()",""],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_migrations-3F","()","<p>Does this adapter support migrations? Backend specific, as the abstract\nadapter always returns <code>false</code> …\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_migrations?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_migrations-3F","()","<p>Returns true, since this connection adapter supports migrations.\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_partial_index-3F","()","<p>Does this adapter support partial indices?\n"],["supports_partial_index?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_partial_index-3F","()",""],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_primary_key-3F","()","<p>Can this adapter determine the primary key for tables not attached to an\nActive Record class, such as …\n"],["supports_primary_key?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_primary_key-3F","()",""],["supports_ranges?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_ranges-3F","()","<p>Range datatypes weren&#39;t introduced until PostgreSQL 9.2\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_savepoints-3F","()","<p>Does this adapter support savepoints? PostgreSQL and MySQL do, SQLite &lt;\n3.6.8 does not.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_savepoints-3F","()","<p>Returns true, since this connection adapter supports savepoints.\n"],["supports_savepoints?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_savepoints-3F","()","<p>Returns true if SQLite version is &#39;3.6.8&#39; or greater, false\notherwise.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code> when the connection adapter supports prepared\nstatement caching, otherwise returns <code>false</code> …\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_statement_cache-3F","()","<p>Returns <code>true</code>, since this connection adapter supports prepared\nstatement caching.\n"],["supports_statement_cache?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-supports_statement_cache-3F","()","<p>Returns true, since this connection adapter supports prepared statement\ncaching.\n"],["supports_streaming?","ActionView::Template","classes/ActionView/Template.html#method-i-supports_streaming-3F","()","<p>Returns if the underlying handler supports streaming. If so, a streaming\nbuffer <strong>may</strong> be passed when it …\n"],["supports_streaming?","ActionView::Template::Handlers::ERB","classes/ActionView/Template/Handlers/ERB.html#method-i-supports_streaming-3F","()",""],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>Does this adapter support setting the isolation level for a transaction?\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-supports_transaction_isolation-3F","()","<p>MySQL 4 technically support transaction isolation, but it is affected by a\nbug where the transaction …\n"],["supports_transaction_isolation?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-supports_transaction_isolation-3F","()",""],["suppress","Kernel","classes/Kernel.html#method-i-suppress","(*exception_classes)","<p>Blocks and ignores any exception passed as argument if raised within the\nblock.\n\n<pre>suppress(ZeroDivisionError) ...</pre>\n"],["suppress_messages","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-suppress_messages","()",""],["swap","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-swap","(target, *args, &block)",""],["swap","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-swap","(*args, &block)",""],["swapcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-swapcase","()","<p>Converts characters in the string to the opposite case.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&#39;El Cañón&quot;.mb_chars.swapcase.to_s # =&gt; &quot;eL cAÑÓN&quot;\n</span></pre>\n"],["swapcase","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-swapcase","(string)",""],["swapcase_mapping","ActiveSupport::Multibyte::Unicode::Codepoint","classes/ActiveSupport/Multibyte/Unicode/Codepoint.html#method-i-swapcase_mapping","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-symbolize_keys","()",""],["symbolize_keys","Hash","classes/Hash.html#method-i-symbolize_keys","()","<p>Return a new hash with all keys converted to symbols, as long as they\nrespond to <code>to_sym</code>.\n\n<pre>hash = { &#39;name&#39; ...</pre>\n"],["symbolize_keys!","Hash","classes/Hash.html#method-i-symbolize_keys-21","()","<p>Destructively convert all keys to symbols, as long as they respond to\n<code>to_sym</code>. Same as <code>symbolize_keys</code> …\n"],["symbolized_base_class","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_base_class","()",""],["symbolized_path_parameters","ActionDispatch::Http::Parameters","classes/ActionDispatch/Http/Parameters.html#method-i-symbolized_path_parameters","()","<p>The same as <code>path_parameters</code> with explicitly symbolized keys.\n"],["symbolized_sti_name","ActiveRecord::Inheritance::ClassMethods","classes/ActiveRecord/Inheritance/ClassMethods.html#method-i-symbolized_sti_name","()",""],["symbols","Mime::Mimes","classes/Mime/Mimes.html#method-i-symbols","()",""],["t","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-t","(*args)",""],["t","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-t","(key, options = {})",""],["table_alias_for","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_alias_for","(table_name)","<p>Truncates a table alias according to the limits of the current adapter.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_alias_length","()","<p>Returns the maximum length of a table alias.\n"],["table_alias_length","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-table_alias_length","()","<p>Returns the configured supported identifier length supported by PostgreSQL\n"],["table_exists?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-table_exists-3F","(name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-table_exists-3F","(name)","<p>Returns true if table exists. If the schema is not specified as part of\n<code>name</code> then it will only find tables …\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_exists-3F","(table_name)",""],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-table_exists-3F","(name)","<p>A cached lookup for table existence.\n"],["table_exists?","ActiveRecord::ConnectionAdapters::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-table_exists-3F","(table_name)","<p>Checks to see if the table <code>table_name</code> exists on the database.\n\n<pre>table_exists?(:developers)</pre>\n"],["table_exists?","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_exists-3F","()","<p>Indicates whether the table associated with this class exists\n"],["table_name","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name","()","<p>Guesses the table name (in forced lower-case) based on the name of the\nclass in the inheritance hierarchy …\n"],["table_name","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-c-table_name","()",""],["table_name","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-table_name","()",""],["table_name=","ActiveRecord::ModelSchema::ClassMethods","classes/ActiveRecord/ModelSchema/ClassMethods.html#method-i-table_name-3D","(value)","<p>Sets the table name explicitly. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Project</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">table_name</span> = <span class=\"ruby-string\">&quot;project&quot;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["table_name_length","ActiveRecord::ConnectionAdapters::DatabaseLimits","classes/ActiveRecord/ConnectionAdapters/DatabaseLimits.html#method-i-table_name_length","()","<p>Returns the maximum length of a table name.\n"],["table_rows","ActiveRecord::FixtureSet","classes/ActiveRecord/FixtureSet.html#method-i-table_rows","()","<p>Return a hash of rows to be inserted. The key is the table, the value is a\nlist of rows to insert to …\n"],["table_structure","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-table_structure","(table_name)",""],["tableize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-tableize","(class_name)","<p>Create the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tableize","String","classes/String.html#method-i-tableize","()","<p>Creates the name of a table like Rails does for models to table names. This\nmethod uses the <code>pluralize</code> …\n"],["tables","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-tables","(name = nil)","<p>Returns the list of all tables in the schema search path or a specified\nschema.\n"],["tables","ActiveRecord::ConnectionAdapters::SchemaCache","classes/ActiveRecord/ConnectionAdapters/SchemaCache.html#method-i-tables","(name = nil)",""],["tag","ActionView::Helpers::ActiveModelInstanceTag","classes/ActionView/Helpers/ActiveModelInstanceTag.html#method-i-tag","(type, options, *)",""],["tag","ActionView::Helpers::TagHelper","classes/ActionView/Helpers/TagHelper.html#method-i-tag","(name, options = nil, open = false, escape = true)","<p>Returns an empty HTML tag of type <code>name</code> which by default is\nXHTML compliant. Set <code>open</code> to true to create …\n"],["tagged","ActiveSupport::TaggedLogging","classes/ActiveSupport/TaggedLogging.html#method-i-tagged","(*tags)",""],["tail!","Rails::Rack::LogTailer","classes/Rails/Rack/LogTailer.html#method-i-tail-21","()",""],["take","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take","(limit = nil)","<p>Gives a record (or N records if a parameter is supplied) without any\nimplied order. The order will depend …\n"],["take!","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-take-21","()","<p>Same as <code>take</code> but raises\n<code>ActiveRecord::RecordNotFound</code> if no record is found. Note that\n<code>take!</code> accepts no …\n"],["target","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-target","()",""],["teardown","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-teardown","()",""],["teardown","ActiveSupport::Testing::SetupAndTeardown::ClassMethods","classes/ActiveSupport/Testing/SetupAndTeardown/ClassMethods.html#method-i-teardown","(*args, &block)",""],["teardown_fixtures","ActiveRecord::TestFixtures","classes/ActiveRecord/TestFixtures.html#method-i-teardown_fixtures","()",""],["teardown_subscriptions","ActionController::TemplateAssertions","classes/ActionController/TemplateAssertions.html#method-i-teardown_subscriptions","()",""],["telephone_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-telephone_field","(object_name, method, options = {})","<p>Returns a text_field of type “tel”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">telephone_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;phone&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_phone&quot; ...</span>\n</pre>\n"],["telephone_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-telephone_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “tel”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["template","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-template","(source, *args, &block)",""],["template_exists?","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-template_exists-3F","(name, prefixes = [], partial = false, keys = [], options = {})",""],["terabyte","Numeric","classes/Numeric.html#method-i-terabyte","()",""],["terabytes","Numeric","classes/Numeric.html#method-i-terabytes","()",""],["test","ActiveSupport::Testing::Declarative","classes/ActiveSupport/Testing/Declarative.html#method-i-test","(name, &block)","<p>test “verify something” do\n\n<pre>...</pre>\n<p>end\n"],["test","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-test","()",""],["test","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test","()",""],["test_dummy_assets","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_assets","()",""],["test_dummy_clean","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_clean","()",""],["test_dummy_config","Rails::PluginBuilder","classes/Rails/PluginBuilder.html#method-i-test_dummy_config","()",""],["test_errors_aref","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_errors_aref","()","<p>Errors Testing\n<p>Returns an object that implements [](attribute) defined which returns an\nArray of Strings …\n"],["test_methods","ActiveSupport::Testing::Isolation","classes/ActiveSupport/Testing/Isolation.html#method-i-test_methods","()",""],["test_model_naming","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_model_naming","()","<p>Naming\n<p>Model.model_name must return a string with some convenience methods:\n<code>:human</code>, <code>:singular</code> and <code>:plural</code> …\n"],["test_persisted?","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_persisted-3F","()","<p>Responds to <code>persisted?</code>\n<p>Returns a boolean that specifies whether the object has been persisted yet.\nThis …\n"],["test_to_key","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_key","()","<p>Responds to <code>to_key</code>\n<p>Returns an Enumerable of all (primary) key attributes or nil if\n<code>model.persisted?</code> is …\n"],["test_to_param","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_param","()","<p>Responds to <code>to_param</code>\n<p>Returns a string representing the object&#39;s key suitable for use in URLs\nor <code>nil</code> …\n"],["test_to_partial_path","ActiveModel::Lint::Tests","classes/ActiveModel/Lint/Tests.html#method-i-test_to_partial_path","()","<p>Responds to <code>to_partial_path</code>\n<p>Returns a string giving a relative path. This is used for looking up\npartials. …\n"],["tests","ActionController::TestCase::Behavior::ClassMethods","classes/ActionController/TestCase/Behavior/ClassMethods.html#method-i-tests","(controller_class)","<p>Sets the controller class name. Useful if the name can&#39;t be inferred\nfrom test class. Normalizes …\n"],["tests","ActionMailer::TestCase::Behavior::ClassMethods","classes/ActionMailer/TestCase/Behavior/ClassMethods.html#method-i-tests","(mailer)",""],["tests","ActionView::TestCase::Behavior::ClassMethods","classes/ActionView/TestCase/Behavior/ClassMethods.html#method-i-tests","(helper_class)",""],["tests","Rails::Generators::Testing::Behaviour::ClassMethods","classes/Rails/Generators/Testing/Behaviour/ClassMethods.html#method-i-tests","(klass)","<p>Sets which generator should be tested:\n\n<pre>tests AppGenerator</pre>\n"],["text_area","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_area","(object_name, method, options = {})","<p>Returns a textarea opening and closing tag set tailored for accessing a\nspecified attribute (identified …\n"],["text_area_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_area_tag","(name, content = nil, options = {})","<p>Creates a text input area; use a textarea for longer text inputs such as\nblog posts or descriptions. …\n"],["text_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-text_field","(object_name, method, options = {})","<p>Returns an input tag of the “text” type tailored for accessing a specified\nattribute (identified …\n"],["text_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-text_field_tag","(name, value = nil, options = {})","<p>Creates a standard text field; use these text fields to input smaller\nchunks of text like a username …\n"],["third","Array","classes/Array.html#method-i-third","()","<p>Equal to <code>self[2]</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d e )</span>.<span class=\"ruby-identifier\">third</span> <span class=\"ruby-comment\"># =&gt; &quot;c&quot;</span>\n</pre>\n"],["thread_variable?","Thread","classes/Thread.html#method-i-thread_variable-3F","(key)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre>me = Thread.current\nme.thread_variable_set(:oliver, ...</pre>\n"],["thread_variable_get","Thread","classes/Thread.html#method-i-thread_variable_get","(key)","<p>Returns the value of a thread local variable that has been set. Note that\nthese are different than fiber …\n"],["thread_variable_set","Thread","classes/Thread.html#method-i-thread_variable_set","(key, value)","<p>Sets a thread local with <code>key</code> to <code>value</code>. Note that\nthese are local to threads, and not to fibers. Please …\n"],["thread_variables","Thread","classes/Thread.html#method-i-thread_variables","()","<p>Returns an an array of the names of the thread-local variables (as\nSymbols).\n\n<pre>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</pre>\n"],["threadsafe!","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-threadsafe-21","()",""],["tidy_bytes","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-tidy_bytes","(force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["tidy_bytes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-tidy_bytes","(string, force = false)","<p>Replaces all ISO-8859-1 or CP1252 characters by their UTF-8 equivalent\nresulting in a valid UTF-8 string. …\n"],["time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-time","()","<p>Returns a Time or DateTime instance that represents the time in\n<code>time_zone</code>.\n"],["time_ago_in_words","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_ago_in_words","(from_time, include_seconds_or_options = {})","<p>Like <code>distance_of_time_in_words</code>, but where <code>to_time</code>\nis fixed to <code>Time.now</code>.\n\n<pre>time_ago_in_words(3.minutes.from_now) ...</pre>\n"],["time_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-time_field","(object_name, method, options = {})","<p>Returns a text_field of type “time”.\n<p>The default value is generated by trying to call <code>strftime</code> …\n"],["time_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-time_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “time”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["time_select","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_select","(object_name, method, options = {}, html_options = {})","<p>Returns a set of select tags (one for hour, minute and optionally second)\npre-selected for accessing …\n"],["time_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_select","(method, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::DateHelper#time_select for form builders:\n\n<pre>&lt;%= form_for @race do |f| %&gt;\n  &lt;%= ...</pre>\n"],["time_tag","ActionView::Helpers::DateHelper","classes/ActionView/Helpers/DateHelper.html#method-i-time_tag","(date_or_time, *args, &block)","<p>Returns an html time tag for the given date or time.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">time_tag</span> <span class=\"ruby-constant\">Date</span>.<span class=\"ruby-identifier\">today</span>  <span class=\"ruby-comment\"># =&gt;</span>\n  <span class=\"ruby-operator\">&lt;</span><span class=\"ruby-identifier\">time</span> <span class=\"ruby-identifier\">datetime</span>=<span class=\"ruby-string\">&quot;2010-11-04&quot;</span><span class=\"ruby-operator\">&gt;</span><span class=\"ruby-constant\">November</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["time_with_datetime_fallback","Time","classes/Time.html#method-c-time_with_datetime_fallback","(utc_or_local, year, month=1, day=1, hour=0, min=0, sec=0, usec=0)","<p><strong>DEPRECATED</strong>: Use +Time#utc+ or +Time#local+ instead.\n<p>Returns a new Time if requested year can be accommodated …\n"],["time_zone_options_for_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_options_for_select","(selected = nil, priority_zones = nil, model = ::ActiveSupport::TimeZone)","<p>Returns a string of option tags for pretty much any time zone in the world.\nSupply a ActiveSupport::TimeZone …\n"],["time_zone_select","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-time_zone_select","(method, priority_zones = nil, options = {}, html_options = {})","<p>Wraps ActionView::Helpers::FormOptionsHelper#time_zone_select for form\nbuilders:\n\n<pre>&lt;%= form_for @user do ...</pre>\n"],["time_zone_select","ActionView::Helpers::FormOptionsHelper","classes/ActionView/Helpers/FormOptionsHelper.html#method-i-time_zone_select","(object, method, priority_zones = nil, options = {}, html_options = {})","<p>Return select and option tags for the given object and method, using\n#time_zone_options_for_select to …\n"],["timestamps","ActiveRecord::ConnectionAdapters::Table","classes/ActiveRecord/ConnectionAdapters/Table.html#method-i-timestamps","()","<p>Adds timestamps (<code>created_at</code> and <code>updated_at</code>)\ncolumns to the table. See SchemaStatements#add_timestamps …\n"],["timestamps","ActiveRecord::ConnectionAdapters::TableDefinition","classes/ActiveRecord/ConnectionAdapters/TableDefinition.html#method-i-timestamps","(*args)","<p>Appends <code>:datetime</code> columns <code>:created_at</code> and\n<code>:updated_at</code> to the table.\n"],["titlecase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titlecase","()",""],["titlecase","String","classes/String.html#method-i-titlecase","()",""],["titleize","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-titleize","(word)","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["titleize","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-titleize","()","<p>Capitalizes the first letter of every word, when possible.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;ÉL QUE SE ENTERÓ&quot;</span>.<span class=\"ruby-identifier\">mb_chars</span>.<span class=\"ruby-identifier\">titleize</span>    <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["titleize","String","classes/String.html#method-i-titleize","()","<p>Capitalizes all the words and replaces some characters in the string to\ncreate a nicer looking title. …\n"],["tmp","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-tmp","()",""],["to","Array","classes/Array.html#method-i-to","(position)","<p>Returns the beginning of the array up to <code>position</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">0</span>)  <span class=\"ruby-comment\"># =&gt; [&quot;a&quot;]</span>\n<span class=\"ruby-node\">%w( a b c d )</span>.<span class=\"ruby-identifier\">to</span>(<span class=\"ruby-value\">2</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["to","String","classes/String.html#method-i-to","(position)","<p>Returns a substring from the beginning of the string to the given position.\nIf the position is negative, …\n"],["to_a","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_a","()",""],["to_a","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_a","()","<p>Returns an array of error messages, with the attribute name included.\n\n<pre>person.errors.add(:name, &quot;can&#39;t ...</pre>\n"],["to_a","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_a","()","<p>Converts relation objects to Array.\n"],["to_a","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_a","()",""],["to_a","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_a","()",""],["to_ary","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_ary","()",""],["to_ary","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_ary","()",""],["to_ary","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-to_ary","()",""],["to_cleanup","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-to_cleanup","(*args, &block)","<p>Add a cleanup callback. Cleanup callbacks are run after each request is\ncomplete (after #close is called …\n"],["to_d","BigDecimal","classes/BigDecimal.html#method-i-to_d","()",""],["to_date","Mysql::Time","classes/Mysql/Time.html#method-i-to_date","()",""],["to_date","String","classes/String.html#method-i-to_date","()","<p>Converts a string to a Date value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span>   <span class=\"ruby-comment\">#=&gt; Sun, 01 Jan 2012</span>\n<span class=\"ruby-string\">&quot;01/01/2012&quot;</span>.<span class=\"ruby-identifier\">to_date</span> <span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["to_datetime","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_datetime","()",""],["to_datetime","String","classes/String.html#method-i-to_datetime","()","<p>Converts a string to a DateTime value.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;1-1-2012&quot;</span>.<span class=\"ruby-identifier\">to_datetime</span>            <span class=\"ruby-comment\">#=&gt; Sun, 01 Jan 2012 00:00:00 ...</span>\n</pre>\n"],["to_default_s","Array","classes/Array.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Date","classes/Date.html#method-i-to_default_s","(format = :default)",""],["to_default_s","DateTime","classes/DateTime.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Range","classes/Range.html#method-i-to_default_s","(format = :default)",""],["to_default_s","Time","classes/Time.html#method-i-to_default_s","(format = :default)",""],["to_f","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_f","()",""],["to_f","DateTime","classes/DateTime.html#method-i-to_f","()","<p>Converts <code>self</code> to a floating-point number of seconds since the\nUnix epoch.\n"],["to_format","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_format","()","<p>All other formats follow the procedure below. First we try to render a\ntemplate, if the template is not …\n"],["to_formatted_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_formatted_s","(format = :default)",""],["to_formatted_s","Array","classes/Array.html#method-i-to_formatted_s","(format = :default)","<p>Converts a collection of elements into a formatted string by calling\n<code>to_s</code> on all elements and joining …\n"],["to_formatted_s","BigDecimal","classes/BigDecimal.html#method-i-to_formatted_s","(*args)",""],["to_formatted_s","Date","classes/Date.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See DATE_FORMATS for predefined formats.\n<p>This method is aliased to <code>to_s</code> …\n"],["to_formatted_s","DateTime","classes/DateTime.html#method-i-to_formatted_s","(format = :default)","<p>Convert to a formatted string. See Time::DATE_FORMATS for predefined\nformats.\n<p>This method is aliased to …\n"],["to_formatted_s","Numeric","classes/Numeric.html#method-i-to_formatted_s","(format = :default, options = {})","<p>Provides options for converting numbers into formatted strings. Options are\nprovided for phone numbers, …\n"],["to_formatted_s","Range","classes/Range.html#method-i-to_formatted_s","(format = :default)","<p>Gives a human readable format of the range.\n\n<pre class=\"ruby\">(<span class=\"ruby-value\">1</span><span class=\"ruby-operator\">..</span><span class=\"ruby-value\">100</span>).<span class=\"ruby-identifier\">to_formatted_s</span> <span class=\"ruby-comment\"># =&gt; &quot;1..100&quot;</span>\n</pre>\n"],["to_formatted_s","Time","classes/Time.html#method-i-to_formatted_s","(format = :default)","<p>Converts to a formatted string. See DATE_FORMATS for builtin formats.\n<p>This method is aliased to <code>to_s</code>. …\n"],["to_hash","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-to_hash","()",""],["to_hash","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_hash","(full_messages = false)","<p>Returns a Hash of attributes with their error messages. If\n<code>full_messages</code> is <code>true</code>, it will contain full …\n"],["to_hash","ActiveRecord::Result","classes/ActiveRecord/Result.html#method-i-to_hash","()",""],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_hash","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_hash","()","<p>Convert to a regular hash with string keys.\n"],["to_html","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_html","()","<p>HTML format does not render the resource, it always attempt to render a\ntemplate.\n"],["to_html","Rails::Info","classes/Rails/Info.html#method-c-to_html","()",""],["to_i","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_i","()",""],["to_i","DateTime","classes/DateTime.html#method-i-to_i","()","<p>Converts <code>self</code> to an integer number of seconds since the Unix\nepoch.\n"],["to_integer","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-to_integer","(value)",""],["to_js","ActionController::Responder","classes/ActionController/Responder.html#method-i-to_js","()","<p>to_js simply tries to render a template. If no template is found, raises\nthe error.\n"],["to_json","Object","classes/Object.html#method-i-to_json","(options = nil)","<p>Dumps object in JSON (JavaScript Object Notation). See www.json.org for\nmore info.\n"],["to_key","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_key","()","<p>Returns an Enumerable of all key attributes if any is set, regardless if\nthe object is persisted or not. …\n"],["to_key","ActiveRecord::AttributeMethods::PrimaryKey","classes/ActiveRecord/AttributeMethods/PrimaryKey.html#method-i-to_key","()","<p>Returns this record&#39;s primary key value wrapped in an Array if one is\navailable.\n"],["to_model","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_model","()",""],["to_model","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_model","()","<p>If your object is already designed to implement all of the Active Model you\ncan use the default <code>:to_model</code> …\n"],["to_options","Hash","classes/Hash.html#method-i-to_options","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-to_options-21","()",""],["to_options!","Hash","classes/Hash.html#method-i-to_options-21","()",""],["to_param","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_param","()","<p>Returns a <code>string</code> representing the object&#39;s key suitable\nfor use in URLs, or <code>nil</code> if <code>persisted?</code> is …\n"],["to_param","ActiveRecord::Integration","classes/ActiveRecord/Integration.html#method-i-to_param","()","<p>Returns a String, which Action Pack uses for constructing an URL to this\nobject. The default implementation …\n"],["to_param","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_param","()",""],["to_param","Array","classes/Array.html#method-i-to_param","()","<p>Calls <code>to_param</code> on all its elements and joins the result with\nslashes. This is used by <code>url_for</code> in Action …\n"],["to_param","FalseClass","classes/FalseClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Hash","classes/Hash.html#method-i-to_param","(namespace = nil)","<p>Returns a string representation of the receiver suitable for use as a URL\nquery string:\n\n<pre>{name: &#39;David&#39;, ...</pre>\n"],["to_param","NilClass","classes/NilClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_param","Object","classes/Object.html#method-i-to_param","()","<p>Alias of <code>to_s</code>.\n"],["to_param","TrueClass","classes/TrueClass.html#method-i-to_param","()","<p>Returns <code>self</code>.\n"],["to_partial_path","ActionView::Helpers::FormBuilder","classes/ActionView/Helpers/FormBuilder.html#method-i-to_partial_path","()",""],["to_partial_path","ActiveModel::Conversion","classes/ActiveModel/Conversion.html#method-i-to_partial_path","()","<p>Returns a <code>string</code> identifying the path associated with the\nobject. ActionPack uses this to find a suitable …\n"],["to_path","ActionDispatch::Response","classes/ActionDispatch/Response.html#method-i-to_path","()",""],["to_path","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_path","()",""],["to_prepare","ActionDispatch::Reloader","classes/ActionDispatch/Reloader.html#method-c-to_prepare","(*args, &block)","<p>Add a prepare callback. Prepare callbacks are run before each request,\nprior to ActionDispatch::Callback&#39;s …\n"],["to_prepare","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare","(&blk)","<p>Defines generic callbacks to run before #after_initialize. Useful for\nRails::Railtie subclasses.\n"],["to_prepare_blocks","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-to_prepare_blocks","()","<p>Array of callbacks defined by #to_prepare.\n"],["to_query","Array","classes/Array.html#method-i-to_query","(key)","<p>Converts an array into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_query","Hash","classes/Hash.html#method-i-to_query","(namespace = nil)",""],["to_query","Object","classes/Object.html#method-i-to_query","(key)","<p>Converts an object into a string suitable for use as a URL query string,\nusing the given <code>key</code> as the param …\n"],["to_r","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_r","()",""],["to_s","ActionDispatch::RemoteIp::GetIp","classes/ActionDispatch/RemoteIp/GetIp.html#method-i-to_s","()","<p>Memoizes the value returned by #calculate_ip and returns it for\nActionDispatch::Request to use.\n"],["to_s","ActionView::FileSystemResolver","classes/ActionView/FileSystemResolver.html#method-i-to_s","()",""],["to_s","ActionView::FixtureResolver","classes/ActionView/FixtureResolver.html#method-i-to_s","()",""],["to_s","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-i-to_s","()",""],["to_s","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_s","","<p>Returns the class name.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">BlogPost</span>\n  <span class=\"ruby-identifier\">extend</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Naming</span>\n<span class=\"ruby-keyword\">end</span>\n\n<span class=\"ruby-constant\">BlogPost</span>.<span class=\"ruby-identifier\">model_name</span>.<span class=\"ruby-identifier\">to_s</span> <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_s","ActiveSupport::SafeBuffer","classes/ActiveSupport/SafeBuffer.html#method-i-to_s","()",""],["to_s","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_s","(format = :default)","<p><code>:db</code> format outputs time in UTC; all others output time in\nlocal. Uses TimeWithZone&#39;s <code>strftime</code>, so …\n"],["to_s","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-to_s","()","<p>Returns a textual representation of this time zone.\n"],["to_s","Array","classes/Array.html#method-i-to_s","(format = :default)",""],["to_s","BigDecimal","classes/BigDecimal.html#method-i-to_s","(*args)",""],["to_s","Date","classes/Date.html#method-i-to_s","(format = :default)",""],["to_s","DateTime","classes/DateTime.html#method-i-to_s","(format = :default)",""],["to_s","Mime::Type","classes/Mime/Type.html#method-i-to_s","()",""],["to_s","Rails::Info","classes/Rails/Info.html#method-c-to_s","()",""],["to_s","Range","classes/Range.html#method-i-to_s","(format = :default)",""],["to_s","SourceAnnotationExtractor::Annotation","classes/SourceAnnotationExtractor/Annotation.html#method-i-to_s","(options={})","<p>Returns a representation of the annotation that looks like this:\n\n<pre>[126] [TODO] This algorithm is simple ...</pre>\n"],["to_s","Time","classes/Time.html#method-i-to_s","(format = :default)",""],["to_sentence","Array","classes/Array.html#method-i-to_sentence","(options = {})","<p>Converts the array to a comma-separated sentence where the last element is\njoined by the connector word. …\n"],["to_session_value","ActionDispatch::Flash::FlashHash","classes/ActionDispatch/Flash/FlashHash.html#method-i-to_session_value","()",""],["to_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-to_sql","(arel, binds = [])","<p>Converts an arel AST to SQL\n"],["to_sql","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-to_sql","()","<p>Returns sql statement for the relation.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">to_sql</span>\n<span class=\"ruby-comment\"># =&gt; SELECT &quot;users&quot;.* FROM &quot;users&quot; ...</span>\n</pre>\n"],["to_str","ActionView::Resolver::Path","classes/ActionView/Resolver/Path.html#method-i-to_str","()",""],["to_str","ActiveModel::Name","classes/ActiveModel/Name.html#method-i-to_str","","<p>Equivalent to <code>to_s</code>.\n"],["to_str","Mime::Type","classes/Mime/Type.html#method-i-to_str","()",""],["to_sym","Mime::Type","classes/Mime/Type.html#method-i-to_sym","()",""],["to_tag","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-to_tag","(key, value, options)",""],["to_time","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-to_time","()","<p>Return an instance of Time in the system timezone.\n"],["to_time","Date","classes/Date.html#method-i-to_time","(form = :local)","<p>Converts a Date instance to a Time, where the time is set to the beginning\nof the day. The timezone can …\n"],["to_time","String","classes/String.html#method-i-to_time","(form = :local)","<p>Converts a string to a Time value. The <code>form</code> can be either :utc\nor :local (default :local).\n<p>The time is …\n"],["to_time_in_current_zone","Date","classes/Date.html#method-i-to_time_in_current_zone","()","<p><strong>DEPRECATED</strong>: Use +Date#in_time_zone+ instead.\n<p>Converts Date to a TimeWithZone in the current zone if\n<code>Time.zone</code> …\n"],["to_xml","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-to_xml","(options={})","<p>Returns an xml formatted representation of the Errors hash.\n\n<pre>person.errors.add(:name, &quot;can&#39;t be blank&quot;) ...</pre>\n"],["to_xml","ActiveModel::Serializers::Xml","classes/ActiveModel/Serializers/Xml.html#method-i-to_xml","(options = {}, &block)","<p>Returns XML representing the model. Configuration can be passed through\n<code>options</code>.\n<p>Without any <code>options</code>, …\n"],["to_xml","ActiveRecord::Serialization","classes/ActiveRecord/Serialization.html#method-i-to_xml","(options = {}, &block)","<p>Builds an XML document to represent the model. Some configuration is\navailable through <code>options</code>. However …\n"],["to_xml","Array","classes/Array.html#method-i-to_xml","(options = {})","<p>Returns a string that represents the array in XML by invoking\n<code>to_xml</code> on each element. Active Record collections …\n"],["to_xml","Hash","classes/Hash.html#method-i-to_xml","(options = {})","<p>Returns a string containing an XML representation of its receiver:\n\n<pre class=\"ruby\">{<span class=\"ruby-string\">&#39;foo&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, <span class=\"ruby-string\">&#39;bar&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>}.<span class=\"ruby-identifier\">to_xml</span>\n<span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["to_yaml_type","ActiveSupport::OrderedHash","classes/ActiveSupport/OrderedHash.html#method-i-to_yaml_type","()",""],["today","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-today","()","<p>Return the current date in this time zone.\n"],["today?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-today-3F","()","<p>Returns true if the current object&#39;s time falls within the current day.\n"],["today?","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-today-3F","()","<p>Returns true if the date/time is today.\n"],["toggle","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle","(attribute)","<p>Assigns to <code>attribute</code> the boolean opposite of\n<code>attribute?</code>. So if the predicate returns <code>true</code> the\nattribute …\n"],["toggle!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-toggle-21","(attribute)","<p>Wrapper around <code>toggle</code> that saves the record. This method\ndiffers from its non-bang version in that it …\n"],["token_and_options","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-token_and_options","(request)","<p>Parses the token and options out of the token authorization header. If the\nheader looks like this:\n\n<pre>Authorization: ...</pre>\n"],["token_params_from","ActionController::HttpAuthentication::Token","classes/ActionController/HttpAuthentication/Token.html#method-i-token_params_from","(auth)",""],["tokenize","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-tokenize","(text, options)",""],["tokenize","HTML::WhiteListSanitizer","classes/HTML/WhiteListSanitizer.html#method-i-tokenize","(text, options)",""],["tomorrow","Date","classes/Date.html#method-c-tomorrow","()","<p>Returns a new Date representing the date 1 day after today (i.e.\ntomorrow&#39;s date).\n"],["tomorrow","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-tomorrow","()","<p>Returns a new date/time representing tomorrow.\n"],["touch","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-touch","(name = nil)","<p>Saves the record with the updated_at/on attributes set to the current time.\nPlease note that no validation …\n"],["transaction","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction","(options = {})","<p>Runs the given block in a database transaction, and returns the result of\nthe block.\n<p>Nested transactions …\n"],["transaction","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction","ActiveRecord::Transactions::ClassMethods","classes/ActiveRecord/Transactions/ClassMethods.html#method-i-transaction","(options = {}, &block)","<p>See ActiveRecord::Transactions::ClassMethods for detailed documentation.\n"],["transaction_isolation_levels","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_isolation_levels","()",""],["transaction_joinable=","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-transaction_joinable-3D","(joinable)",""],["transaction_open?","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-transaction_open-3F","()",""],["transform_keys","Hash","classes/Hash.html#method-i-transform_keys","()","<p>Return a new hash with all keys converted using the block operation.\n\n<pre>hash = { name: &#39;Rob&#39;, age: &#39;28&#39; } ...</pre>\n"],["transform_keys!","Hash","classes/Hash.html#method-i-transform_keys-21","()","<p>Destructively convert all keys using the block operations. Same as\ntransform_keys but modifies <code>self</code>. …\n"],["translate","AbstractController::Translation","classes/AbstractController/Translation.html#method-i-translate","(*args)","<p>Delegates to <code>I18n.translate</code>. Also aliased as <code>t</code>.\n<p>When the given key starts with a period, it will be scoped …\n"],["translate","ActionView::Helpers::TranslationHelper","classes/ActionView/Helpers/TranslationHelper.html#method-i-translate","(key, options = {})","<p>Delegates to <code>I18n#translate</code> but also performs three additional\nfunctions.\n<p>First, it&#39;ll pass the <code>rescue_format</code> …\n"],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-translate_exception","(exception, message)",""],["translate_exception","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-translate_exception","(exception, message)",""],["transliterate","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-transliterate","(string, replacement = \"?\")","<p>Replaces non-ASCII characters with an ASCII approximation, or if none\nexists, a replacement character …\n"],["trigger","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-i-trigger","(files)",""],["trigger","ActiveSupport::FileWatcher::Backend","classes/ActiveSupport/FileWatcher/Backend.html#method-i-trigger","(files)",""],["truncate","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-truncate","(text, options = {}, &block)","<p>Truncates a given <code>text</code> after a given <code>:length</code> if\n<code>text</code> is longer than <code>:length</code> (defaults to 30). The\nlast …\n"],["truncate","String","classes/String.html#method-i-truncate","(truncate_at, options = {})","<p>Truncates a given <code>text</code> after a given <code>length</code> if\n<code>text</code> is longer than <code>length</code>:\n\n<pre>&#39;Once upon a time in a world ...</pre>\n"],["try","NilClass","classes/NilClass.html#method-i-try","(*args)","<p>Calling <code>try</code> on <code>nil</code> always returns\n<code>nil</code>. It becomes specially helpful when navigating through\nassociations …\n"],["try","Object","classes/Object.html#method-i-try","(*a, &b)","<p>Invokes the public method whose name goes as first argument just like\n<code>public_send</code> does, except that if …\n"],["try!","NilClass","classes/NilClass.html#method-i-try-21","(*args)",""],["try!","Object","classes/Object.html#method-i-try-21","(*a, &b)","<p>Same as #try, but will raise a NoMethodError exception if the receiving is\nnot nil and does not implemented …\n"],["try_to_load_dependency","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-try_to_load_dependency","(file_name)",""],["tsort_each_child","Rails::Initializable::Collection","classes/Rails/Initializable/Collection.html#method-i-tsort_each_child","(initializer, &block)",""],["tsrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsrange","(name, options = {})",""],["tstzrange","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tstzrange","(name, options = {})",""],["tsvector","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-tsvector","(*args)",""],["tv_sec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-tv_sec","()",""],["type","ActionView::Template","classes/ActionView/Template.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type","()",""],["type","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html#method-i-type","()",""],["type_cast","ActiveRecord::Calculations","classes/ActiveRecord/Calculations.html#method-i-type_cast","(v)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter.html#method-i-type_cast","(value, column)","<p>QUOTING ==================================================\n"],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Boolean","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Date","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::DateTime","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/DateTime.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Decimal","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Float","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Identity","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Integer","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Time","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Array","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Array.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bit","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bit.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Boolean","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Boolean.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Bytea","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Bytea.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Cidr","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Cidr.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Date","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Date.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Decimal","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Decimal.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Float","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Float.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Hstore","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Hstore.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Identity","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Identity.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Integer.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Json","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Json.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Money","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Money.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Point","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Point.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Range","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Range.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Time","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Time.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Timestamp","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Timestamp.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Vector","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Vector.html#method-i-type_cast","(value)","<p>FIXME: this should probably split on <code>delim</code> and use\n<code>subtype</code> to cast the values.  Unfortunately, the current …\n"],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-type_cast","(value, column, array_member = false)",""],["type_cast","ActiveRecord::ConnectionAdapters::PostgreSQLColumn","classes/ActiveRecord/ConnectionAdapters/PostgreSQLColumn.html#method-i-type_cast","(value)",""],["type_cast","ActiveRecord::ConnectionAdapters::Quoting","classes/ActiveRecord/ConnectionAdapters/Quoting.html#method-i-type_cast","(value, column)","<p>Cast a <code>value</code> to a type that the database understands. For\nexample, SQLite does not understand dates, …\n"],["type_cast_config_to_boolean","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_boolean","(config)",""],["type_cast_config_to_integer","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-c-type_cast_config_to_integer","(config)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::MysqlAdapter::Fields::Type","classes/ActiveRecord/ConnectionAdapters/MysqlAdapter/Fields/Type.html#method-i-type_cast_for_write","(value)",""],["type_cast_for_write","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Type","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/OID/Type.html#method-i-type_cast_for_write","(value)",""],["type_to_sql","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to MySQL-specific data types.\n"],["type_to_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::SchemaStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/SchemaStatements.html#method-i-type_to_sql","(type, limit = nil, precision = nil, scale = nil)","<p>Maps logical Rails types to PostgreSQL-specific data types.\n"],["uncached","ActiveRecord::ConnectionAdapters::QueryCache","classes/ActiveRecord/ConnectionAdapters/QueryCache.html#method-i-uncached","()","<p>Disable the query cache within the block.\n"],["uncached","ActiveRecord::QueryCache::ClassMethods","classes/ActiveRecord/QueryCache/ClassMethods.html#method-i-uncached","(&block)","<p>Disable the query cache within the block if Active Record is configured. If\nit&#39;s not, it will execute …\n"],["uncountable","ActiveSupport::Inflector::Inflections","classes/ActiveSupport/Inflector/Inflections.html#method-i-uncountable","(*words)","<p>Add uncountable words that shouldn&#39;t be attempted inflected.\n\n<pre>uncountable &#39;money&#39;\nuncountable &#39;money&#39;, ...</pre>\n"],["uncountable?","ActiveModel::Naming","classes/ActiveModel/Naming.html#method-c-uncountable-3F","(record_or_class)","<p>Identifies whether the class name of a record or class is uncountable.\n\n<pre>ActiveModel::Naming.uncountable?(Sheep) ...</pre>\n"],["uncountable?","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-uncountable-3F","()",""],["undefine_attribute_methods","ActiveModel::AttributeMethods::ClassMethods","classes/ActiveModel/AttributeMethods/ClassMethods.html#method-i-undefine_attribute_methods","()","<p>Removes all the previously dynamically defined methods from the class.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">AttributeMethods</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["underscore","ActiveSupport::Inflector","classes/ActiveSupport/Inflector.html#method-i-underscore","(camel_cased_word)","<p>Makes an underscored, lowercase form from the expression in the string.\n<p>Changes &#39;::&#39; to &#39;/&#39; …\n"],["underscore","String","classes/String.html#method-i-underscore","()","<p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form\nfrom the expression in the string.\n<p><code>underscore</code> …\n"],["unescape","Object","classes/Object.html#method-i-unescape","(str, escaped = /%[a-fA-F\\d]{2}/)",""],["unescape_bytea","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::Quoting","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/Quoting.html#method-i-unescape_bytea","(value)","<p>Unescapes bytea output from a database to the binary string it represents.\nNOTE: This is NOT an inverse …\n"],["unescape_path","ActionDispatch::FileHandler","classes/ActionDispatch/FileHandler.html#method-i-unescape_path","(path)",""],["uniq","ActiveRecord::Associations::CollectionProxy","classes/ActiveRecord/Associations/CollectionProxy.html#method-i-uniq","()",""],["uniq","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-uniq","(value = true)",""],["uniq_by","Array","classes/Array.html#method-i-uniq_by","(&block)","<p><strong>DEPRECATED</strong>: Use <code>Array#uniq</code> instead.\n<p>Returns a unique array based on the criteria in the block.\n\n<pre>[1, 2, 3, ...</pre>\n"],["uniq_by!","Array","classes/Array.html#method-i-uniq_by-21","(&block)","<p><strong>DEPRECATED</strong>: Use <code>Array#uniq!</code> instead.\n<p>Same as <code>uniq_by</code>, but modifies <code>self</code>.\n"],["uniq_value","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-uniq_value","()","<p><code>uniq</code> and <code>uniq!</code> are silently deprecated.\n<code>uniq_value</code> delegates to <code>distinct_value</code> to\nmaintain backwards …\n"],["unpack_graphemes","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-unpack_graphemes","(string)","<p>Unpack the string at grapheme boundaries. Returns a list of character\nlists.\n\n<pre>Unicode.unpack_graphemes(&#39;क्षि&#39;) ...</pre>\n"],["unpermitted_parameters","ActionController::LogSubscriber","classes/ActionController/LogSubscriber.html#method-i-unpermitted_parameters","(event)",""],["unprepared_statement","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_statement","()",""],["unprepared_visitor","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-unprepared_visitor","()",""],["unregister","Mime::Type","classes/Mime/Type.html#method-c-unregister","(symbol)","<p>This method is opposite of register method.\n<p>Usage:\n\n<pre>Mime::Type.unregister(:mobile)</pre>\n"],["unscope","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-unscope","(*args)","<p>Removes an unwanted relation that is already defined on a chain of\nrelations. This is useful when passing …\n"],["unscoped","ActiveRecord::Scoping::Default::ClassMethods","classes/ActiveRecord/Scoping/Default/ClassMethods.html#method-i-unscoped","()","<p>Returns a scope for the model without the <code>default_scope</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Post</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">ActiveRecord</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Base</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-keyword\">self</span>.<span class=\"ruby-identifier\">default_scope</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["unshift","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-unshift","(*args, &block)",""],["unshift","Rails::Paths::Path","classes/Rails/Paths/Path.html#method-i-unshift","(path)",""],["unsubscribe","ActiveSupport::Notifications","classes/ActiveSupport/Notifications.html#method-c-unsubscribe","(args)",""],["unsubscribe","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-unsubscribe","(subscriber)",""],["until","ActiveSupport::Duration","classes/ActiveSupport/Duration.html#method-i-until","(time = ::Time.current)",""],["until","Numeric","classes/Numeric.html#method-i-until","(time = ::Time.current)","<p>Reads best with argument:  10.minutes.until(time)\n"],["up","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-up","()",""],["upcase","ActiveSupport::Multibyte::Chars","classes/ActiveSupport/Multibyte/Chars.html#method-i-upcase","()","<p>Converts characters in the string to uppercase.\n\n<pre>&#39;Laurent, où sont les tests ?&#39;.mb_chars.upcase.to_s # ...</pre>\n"],["upcase","ActiveSupport::Multibyte::Unicode","classes/ActiveSupport/Multibyte/Unicode.html#method-i-upcase","(string)",""],["update","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update","(arel, name = nil, binds = [])","<p>Executes the update statement and returns the number of rows affected.\n"],["update","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update","(attributes)","<p>Updates the attributes of the model from the passed-in hash and saves the\nrecord, all wrapped in a transaction. …\n"],["update","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update","(id, attributes)","<p>Updates an object (or multiple objects) and saves it to the database, if\nvalidations pass. The resulting …\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["update","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-update","(other_hash)","<p>Updates the receiver in-place, merging in the hash passed as argument:\n\n<pre>hash_1 = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["update","Rails::Generators::ActiveModel","classes/Rails/Generators/ActiveModel.html#method-i-update","(params=nil)","<p>PATCH/PUT update\n"],["update!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update-21","(attributes)","<p>Updates its receiver just like <code>update</code> but calls\n<code>save!</code> instead of <code>save</code>, so an exception is raised\nif the …\n"],["update_all","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-update_all","(updates)","<p>Updates all records with details given if they match a set of conditions\nsupplied, limits and order can …\n"],["update_attribute","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attribute","(name, value)","<p>Updates a single attribute and saves the record. This is especially useful\nfor boolean flags on existing …\n"],["update_attributes","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes","(attributes)",""],["update_attributes!","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_attributes-21","(attributes)",""],["update_column","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_column","(name, value)","<p>Equivalent to <code>update_columns(name =&gt; value)</code>.\n"],["update_columns","ActiveRecord::Persistence","classes/ActiveRecord/Persistence.html#method-i-update_columns","(attributes)","<p>Updates the attributes directly in the database issuing an UPDATE SQL\nstatement and sets them in the …\n"],["update_counters","ActiveRecord::CounterCache::ClassMethods","classes/ActiveRecord/CounterCache/ClassMethods.html#method-i-update_counters","(id, counters)","<p>A generic “counter updater” implementation, intended primarily to be used\nby increment_counter …\n"],["update_counters","ActiveRecord::Locking::Optimistic::ClassMethods","classes/ActiveRecord/Locking/Optimistic/ClassMethods.html#method-i-update_counters","(id, counters)","<p>Make sure the lock version column gets updated when counters are updated.\n"],["update_sql","ActiveRecord::ConnectionAdapters::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes the update statement and returns the number of rows affected.\n"],["update_sql","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::DatabaseStatements","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/DatabaseStatements.html#method-i-update_sql","(sql, name = nil)","<p>Executes an UPDATE query and returns the number of affected tuples.\n"],["updated?","ActiveSupport::FileUpdateChecker","classes/ActiveSupport/FileUpdateChecker.html#method-i-updated-3F","()","<p>Check if any of the entries were updated. If so, the watched and/or\nupdated_at values are cached until …\n"],["url","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-i-url","()","<p>Returns the complete URL used for this request.\n"],["url_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-url_field","(object_name, method, options = {})","<p>Returns a text_field of type “url”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">url_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;homepage&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_homepage&quot; ...</span>\n</pre>\n"],["url_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-url_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “url”.\n<p>Options\n<p>Accepts the same options as text_field_tag.\n"],["url_for","ActionController::Metal","classes/ActionController/Metal.html#method-i-url_for","(string)","<p>basic url_for that can be overridden for more robust functionality\n"],["url_for","ActionDispatch::Http::URL","classes/ActionDispatch/Http/URL.html#method-c-url_for","(options = {})",""],["url_for","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_for","(options = nil)","<p>Generate a url based on the options provided, default_url_options and the\nroutes defined in routes.rb. …\n"],["url_for","ActionView::RoutingUrlFor","classes/ActionView/RoutingUrlFor.html#method-i-url_for","(options = nil)","<p>Returns the URL for the set of <code>options</code> provided. This takes\nthe same options as <code>url_for</code> in Action Controller …\n"],["url_options","ActionController::UrlFor","classes/ActionController/UrlFor.html#method-i-url_options","()",""],["url_options","ActionDispatch::Integration::Session","classes/ActionDispatch/Integration/Session.html#method-i-url_options","()",""],["url_options","ActionDispatch::IntegrationTest","classes/ActionDispatch/IntegrationTest.html#method-i-url_options","()",""],["url_options","ActionDispatch::Routing::UrlFor","classes/ActionDispatch/Routing/UrlFor.html#method-i-url_options","()","<p>Hook overridden in controller to add request information with\n`default_url_options`. Application logic …\n"],["url_to_asset","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_asset","(source, options = {})",""],["url_to_audio","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_audio","(source, options = {})",""],["url_to_font","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_font","(source, options = {})",""],["url_to_image","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_image","(source, options = {})",""],["url_to_javascript","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_javascript","(source, options = {})",""],["url_to_stylesheet","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_stylesheet","(source, options = {})",""],["url_to_video","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-url_to_video","(source, options = {})",""],["us_zones","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-us_zones","()","<p>A convenience method for returning a collection of TimeZone objects for\ntime zones in the USA.\n"],["usage_path","Rails::Generators::Base","classes/Rails/Generators/Base.html#method-c-usage_path","()",""],["use","ActionController::Metal","classes/ActionController/Metal.html#method-c-use","(*args, &block)","<p>Pushes the given Rack middleware and its arguments to the bottom of the\nmiddleware stack.\n"],["use","ActionDispatch::MiddlewareStack","classes/ActionDispatch/MiddlewareStack.html#method-i-use","(*args, &block)",""],["use","Rails::Configuration::MiddlewareStackProxy","classes/Rails/Configuration/MiddlewareStackProxy.html#method-i-use","(*args, &block)",""],["use_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-use_accept_header","()",""],["use_insert_returning?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-use_insert_returning-3F","()",""],["use_renderer","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderer","(*args)",""],["use_renderers","ActionController::Renderers::ClassMethods","classes/ActionController/Renderers/ClassMethods.html#method-i-use_renderers","(*args)",""],["use_zone","Time","classes/Time.html#method-c-use_zone","(time_zone)","<p>Allows override of <code>Time.zone</code> locally inside supplied block;\nresets <code>Time.zone</code> to existing value when done. …\n"],["usec","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-usec","()",""],["user_agent=","ActionDispatch::TestRequest","classes/ActionDispatch/TestRequest.html#method-i-user_agent-3D","(user_agent)",""],["user_name_and_password","ActionController::HttpAuthentication::Basic","classes/ActionController/HttpAuthentication/Basic.html#method-i-user_name_and_password","(request)",""],["uses_transaction","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction","(*methods)",""],["uses_transaction?","ActiveRecord::TestFixtures::ClassMethods","classes/ActiveRecord/TestFixtures/ClassMethods.html#method-i-uses_transaction-3F","(method)",""],["using_limitable_reflections?","ActiveRecord::FinderMethods","classes/ActiveRecord/FinderMethods.html#method-i-using_limitable_reflections-3F","(reflections)",""],["using_match_shorthand?","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-using_match_shorthand-3F","(path, options)",""],["utc","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc","()","<p>Returns a Time or DateTime instance that represents the time in UTC.\n"],["utc","DateTime","classes/DateTime.html#method-i-utc","()","<p>Adjusts DateTime to UTC by adding its offset value; offset is set to 0.\n\n<pre>DateTime.civil(2005, 2, 21, 10, ...</pre>\n"],["utc?","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc-3F","()","<p>Returns true if the current time zone is set to UTC.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Time</span>.<span class=\"ruby-identifier\">zone</span> = <span class=\"ruby-string\">&#39;UTC&#39;</span>                           <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["utc?","DateTime","classes/DateTime.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <code>offset == 0</code>.\n"],["utc_offset","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-utc_offset","()","<p>Returns the offset from current time to UTC time in seconds.\n"],["utc_offset","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_offset","()","<p>Returns the offset of this time zone from UTC in seconds.\n"],["utc_offset","DateTime","classes/DateTime.html#method-i-utc_offset","()","<p>Returns the offset value in seconds.\n"],["utc_time","Time","classes/Time.html#method-c-utc_time","(*args)","<p><strong>DEPRECATED</strong>: Use +Time#utc+ instead.\n<p>Wraps class method <code>time_with_datetime_fallback</code> with\n<code>utc_or_local</code> set …\n"],["utc_to_local","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-i-utc_to_local","(time)","<p>Adjust the given time to the simultaneous time in the time zone represented\nby <code>self</code>. Returns a Time.utc() …\n"],["utf8_enforcer_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-utf8_enforcer_tag","()","<p>Creates the hidden UTF8 enforcer tag. Override this method in a helper to\ncustomize the tag.\n"],["uuid","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-uuid","()","<p>Returns the unique request id, which is based off either the X-Request-Id\nheader that can be generated …\n"],["uuid","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-uuid","(name, options = {})",""],["valid?","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the specified validations and returns <code>true</code> if no\nerrors were added otherwise <code>false</code>.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["valid?","ActiveRecord::DynamicMatchers::Method","classes/ActiveRecord/DynamicMatchers/Method.html#method-i-valid-3F","()",""],["valid?","ActiveRecord::Validations","classes/ActiveRecord/Validations.html#method-i-valid-3F","(context = nil)","<p>Runs all the validations within the specified context. Returns\n<code>true</code> if no errors are found, <code>false</code> otherwise. …\n"],["valid_accept_header","ActionDispatch::Http::MimeNegotiation","classes/ActionDispatch/Http/MimeNegotiation.html#method-i-valid_accept_header","()",""],["valid_alter_table_options","ActiveRecord::ConnectionAdapters::SQLite3Adapter","classes/ActiveRecord/ConnectionAdapters/SQLite3Adapter.html#method-i-valid_alter_table_options","( type, options)","<p>See: www.sqlite.org/lang_altertable.html SQLite has an additional\nrestriction on the ALTER TABLE statement …\n"],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractMysqlAdapter.html#method-i-valid_type-3F","(type)",""],["valid_type?","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter.html#method-i-valid_type-3F","(type)",""],["validate","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validate","(*args, &block)","<p>Adds a validation method or block to the class. This is useful when\noverriding the <code>validate</code> instance …\n"],["validate","ActiveModel::Validator","classes/ActiveModel/Validator.html#method-i-validate","(record)","<p>Override this method in subclasses with validation logic, adding errors to\nthe records <code>errors</code> array where …\n"],["validate_digest_response","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_digest_response","(request, realm, &password_procedure)","<p>Returns false unless the request credentials response value matches the\nexpected value. First try the …\n"],["validate_fallbacks","I18n::Railtie","classes/I18n/Railtie.html#method-c-validate_fallbacks","(fallbacks)",""],["validate_nonce","ActionController::HttpAuthentication::Digest","classes/ActionController/HttpAuthentication/Digest.html#method-i-validate_nonce","(secret_key, request, value, seconds_to_timeout=5*60)","<p>Might want a shorter timeout depending on whether the request is a PATCH,\nPUT, or POST, and if client …\n"],["validate_options","HTML::Sanitizer","classes/HTML/Sanitizer.html#method-i-validate_options","(options)",""],["validates","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates","(*attributes)","<p>This method is a shortcut to all default validators and any custom\nvalidator classes ending in &#39;Validator&#39;. …\n"],["validates!","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates-21","(*attributes)","<p>This method is used to define validations that cannot be corrected by end\nusers and are considered exceptional. …\n"],["validates_absence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_absence_of","(*attr_names)","<p>Validates that the specified attributes are blank (as defined by\nObject#blank?). Happens by default on …\n"],["validates_acceptance_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_acceptance_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate the acceptance of a terms\nof service check box (or similar …\n"],["validates_associated","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated","(*attr_names)","<p>Validates whether the associated object or objects are all valid. Works\nwith any kind of association. …\n"],["validates_confirmation_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_confirmation_of","(*attr_names)","<p>Encapsulates the pattern of wanting to validate a password or email address\nfield with a confirmation. …\n"],["validates_each","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_each","(*attr_names, &block)","<p>Validates each attribute against a block.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span>\n\n  <span class=\"ruby-identifier\">attr_accessor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_exclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_exclusion_of","(*attr_names)","<p>Validates that the value of the specified attribute is not in a particular\nenumerable object.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validates_format_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_format_of","(*attr_names)","<p>Validates whether the value of the specified attribute is of the correct\nform, going by the regular expression …\n"],["validates_inclusion_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_inclusion_of","(*attr_names)","<p>Validates whether the value of the specified attribute is available in a\nparticular enumerable object. …\n"],["validates_length_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_length_of","(*attr_names)","<p>Validates that the specified attribute matches the length restrictions\nsupplied. Only one option can …\n"],["validates_numericality_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_numericality_of","(*attr_names)","<p>Validates whether the value of the specified attribute is numeric by trying\nto convert it to a float …\n"],["validates_presence_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?). Happens by default …\n"],["validates_presence_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_presence_of","(*attr_names)","<p>Validates that the specified attributes are not blank (as defined by\nObject#blank?), and, if the attribute …\n"],["validates_size_of","ActiveModel::Validations::HelperMethods","classes/ActiveModel/Validations/HelperMethods.html#method-i-validates_size_of","(*attr_names)",""],["validates_uniqueness_of","ActiveRecord::Validations::ClassMethods","classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_uniqueness_of","(*attr_names)","<p>Validates whether the value of the specified attributes are unique across\nthe system. Useful for making …\n"],["validates_with","ActiveModel::Validations","classes/ActiveModel/Validations.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validates_with","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validates_with","(*args, &block)","<p>Passes the record off to the class or classes specified and allows them to\nadd errors based on more complex …\n"],["validators","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators","()","<p>List all validators that are being used to validate the model using\n<code>validates_with</code> method.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["validators_on","ActiveModel::Validations::ClassMethods","classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on","(*attributes)","<p>List all validators that are being used to validate a specific attribute.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">Person</span>\n  <span class=\"ruby-identifier\">include</span> <span class=\"ruby-constant\">ActiveModel</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Validations</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["values","ActiveModel::Errors","classes/ActiveModel/Errors.html#method-i-values","()","<p>Returns all message values.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">person</span>.<span class=\"ruby-identifier\">errors</span>.<span class=\"ruby-identifier\">messages</span> <span class=\"ruby-comment\"># =&gt; {:name=&gt;[&quot;can not be nil&quot;, &quot;must be specified&quot;]} ...</span>\n</pre>\n"],["values","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-values","()",""],["values","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values","()",""],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["values_at","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-values_at","(*indices)","<p>Returns an array of the values at the specified indices:\n\n<pre>hash = ActiveSupport::HashWithIndifferentAccess.new ...</pre>\n"],["values_at","Rails::Paths::Root","classes/Rails/Paths/Root.html#method-i-values_at","(*list)",""],["vendor","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor","()",""],["vendor","Rails::Generators::Actions","classes/Rails/Generators/Actions.html#method-i-vendor","(filename, data=nil, &block)","<p>Create a new file in the vendor/ directory. Code can be specified in a\nblock or a data string can be …\n"],["vendor_javascripts","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_javascripts","()",""],["vendor_stylesheets","Rails::AppBuilder","classes/Rails/AppBuilder.html#method-i-vendor_stylesheets","()",""],["verb","ActionDispatch::Routing::RouteWrapper","classes/ActionDispatch/Routing/RouteWrapper.html#method-i-verb","()",""],["verified_request?","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verified_request-3F","()","<p>Returns true or false if a request is verified. Checks:\n<p>is it a GET or HEAD request?  Gets should be safe …\n"],["verify","ActiveSupport::MessageVerifier","classes/ActiveSupport/MessageVerifier.html#method-i-verify","(signed_message)",""],["verify!","ActiveRecord::ConnectionAdapters::AbstractAdapter","classes/ActiveRecord/ConnectionAdapters/AbstractAdapter.html#method-i-verify-21","(*ignored)","<p>Checks whether the connection to the database is still active (i.e. not\nstale). This is done under the …\n"],["verify_and_upgrade_legacy_signed_message","ActionDispatch::Cookies::VerifyAndUpgradeLegacySignedMessage","classes/ActionDispatch/Cookies/VerifyAndUpgradeLegacySignedMessage.html#method-i-verify_and_upgrade_legacy_signed_message","(name, signed_message)",""],["verify_authenticity_token","ActionController::RequestForgeryProtection","classes/ActionController/RequestForgeryProtection.html#method-i-verify_authenticity_token","()","<p>The actual before_action that is used. Modify this to change how you handle\nunverified requests.\n"],["verify_request?","Mime::Type","classes/Mime/Type.html#method-i-verify_request-3F","()","<p>Returns true if Action Pack should check requests using this Mime Type for\npossible request forgery. …\n"],["version","ActionMailer","classes/ActionMailer.html#method-c-version","()","<p>Returns the version of the currently loaded ActionMailer as a Gem::Version\n"],["version","ActiveModel","classes/ActiveModel.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveModel as a Gem::Version\n"],["version","ActiveRecord","classes/ActiveRecord.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveRecord as a Gem::Version\n"],["version","ActiveRecord::SchemaMigration","classes/ActiveRecord/SchemaMigration.html#method-i-version","()",""],["version","ActiveSupport","classes/ActiveSupport.html#method-c-version","()","<p>Returns the version of the currently loaded ActiveSupport as a Gem::Version\n"],["version","Rails","classes/Rails.html#method-c-version","()",""],["video_path","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_path","(source, options = {})","<p>Computes the path to a video asset in the public videos directory. Full\npaths from the document root …\n"],["video_tag","ActionView::Helpers::AssetTagHelper","classes/ActionView/Helpers/AssetTagHelper.html#method-i-video_tag","(*sources)","<p>Returns an html video tag for the <code>sources</code>. If\n<code>sources</code> is a string, a single video tag will be returned. …\n"],["video_url","ActionView::Helpers::AssetUrlHelper","classes/ActionView/Helpers/AssetUrlHelper.html#method-i-video_url","(source, options = {})","<p>Computes the full URL to a video asset in the public videos directory. This\nwill use <code>video_path</code> internally, …\n"],["view_assigns","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_assigns","()","<p>This method should return a hash with assigns. You can overwrite this\nconfiguration per controller. :api: …\n"],["view_cache_dependencies","ActionController::Caching","classes/ActionController/Caching.html#method-i-view_cache_dependencies","()",""],["view_cache_dependency","ActionController::Caching::ClassMethods","classes/ActionController/Caching/ClassMethods.html#method-i-view_cache_dependency","(&dependency)",""],["view_context","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context","()","<p>An instance of a view class. The default view class is ActionView::Base\n<p>The view class must have the following …\n"],["view_context_class","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_context_class","()",""],["view_context_class","AbstractController::Rendering::ClassMethods","classes/AbstractController/Rendering/ClassMethods.html#method-i-view_context_class","()",""],["view_paths","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths","()","<p>A list of all of the default view paths for this controller.\n"],["view_paths=","AbstractController::ViewPaths::ClassMethods","classes/AbstractController/ViewPaths/ClassMethods.html#method-i-view_paths-3D","(paths)","<p>Set the view paths.\n<p>Parameters\n<p><code>paths</code> - If a PathSet is provided, use that; otherwise, process\nthe parameter …\n"],["view_paths=","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-view_paths-3D","(paths)","<p>Whenever setting view paths, makes a copy so we can manipulate then in\ninstance objects as we wish.\n"],["view_rendered?","ActionView::TestCase::Behavior::RenderedViewsCollection","classes/ActionView/TestCase/Behavior/RenderedViewsCollection.html#method-i-view_rendered-3F","(view, expected_locals)",""],["view_renderer","AbstractController::Rendering","classes/AbstractController/Rendering.html#method-i-view_renderer","()","<p>Returns an object that is able to render templates.\n"],["visible_action?","ActionController::HideActions::ClassMethods","classes/ActionController/HideActions/ClassMethods.html#method-i-visible_action-3F","(action_name)",""],["wait","ActiveSupport::LogSubscriber::TestHelper","classes/ActiveSupport/LogSubscriber/TestHelper.html#method-i-wait","()","<p>Wait notifications to be published.\n"],["wait","ActiveSupport::Notifications::Fanout","classes/ActiveSupport/Notifications/Fanout.html#method-i-wait","()","<p>This is a sync queue, so there is no waiting.\n"],["warn","ActiveSupport::Deprecation::Reporting","classes/ActiveSupport/Deprecation/Reporting.html#method-i-warn","(message = nil, callstack = nil)","<p>Outputs a deprecation warning to the output configured by\n<code>ActiveSupport::Deprecation.behavior</code>.\n\n<pre>ActiveSupport::Deprecation.warn(&#39;something ...</pre>\n"],["watch","ActiveSupport::FileWatcher","classes/ActiveSupport/FileWatcher.html#method-i-watch","(pattern, &block)",""],["watch_namespaces","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watch_namespaces","(namespaces)","<p>Add a set of modules to the watch stack, remembering the initial constants.\n"],["watchable_dirs","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_dirs","()","<p>Add directories that should be watched for change. The key of the hashes\nshould be directories and the …\n"],["watchable_files","Rails::Railtie::Configuration","classes/Rails/Railtie/Configuration.html#method-i-watchable_files","()","<p>Add files that should be watched for change.\n"],["watching?","ActiveSupport::Dependencies::WatchStack","classes/ActiveSupport/Dependencies/WatchStack.html#method-i-watching-3F","()",""],["week","Numeric","classes/Numeric.html#method-i-week","()",""],["week_field","ActionView::Helpers::FormHelper","classes/ActionView/Helpers/FormHelper.html#method-i-week_field","(object_name, method, options = {})","<p>Returns a text_field of type “week”.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">week_field</span>(<span class=\"ruby-string\">&quot;user&quot;</span>, <span class=\"ruby-string\">&quot;born_on&quot;</span>)\n<span class=\"ruby-comment\"># =&gt; &lt;input id=&quot;user_born_on&quot; ...</span>\n</pre>\n"],["week_field_tag","ActionView::Helpers::FormTagHelper","classes/ActionView/Helpers/FormTagHelper.html#method-i-week_field_tag","(name, value = nil, options = {})","<p>Creates a text field of type “week”.\n<p>Options\n<p><code>:min</code> - The minimum acceptable value.\n"],["weeks","Numeric","classes/Numeric.html#method-i-weeks","()",""],["weeks_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-weeks_ago","(weeks)","<p>Returns a new date/time the specified number of weeks ago.\n"],["weeks_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-weeks_since","(weeks)","<p>Returns a new date/time the specified number of weeks in the future.\n"],["where","ActiveRecord::QueryMethods","classes/ActiveRecord/QueryMethods.html#method-i-where","(opts = :chain, *rest)","<p>Returns a new relation, which is the result of filtering the current\nrelation according to the conditions …\n"],["where_values_hash","ActiveRecord::Relation","classes/ActiveRecord/Relation.html#method-i-where_values_hash","()","<p>Returns a hash of where conditions.\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">User</span>.<span class=\"ruby-identifier\">where</span>(<span class=\"ruby-identifier\">name</span><span class=\"ruby-operator\">:</span> <span class=\"ruby-string\">&#39;Oscar&#39;</span>).<span class=\"ruby-identifier\">where_values_hash</span>\n<span class=\"ruby-comment\"># =&gt; {name: &quot;Oscar&quot;}</span>\n</pre>\n"],["whiny_nils=","Rails::Application::Configuration","classes/Rails/Application/Configuration.html#method-i-whiny_nils-3D","(*)",""],["with","AbstractController::Railties::RoutesHelpers","classes/AbstractController/Railties/RoutesHelpers.html#method-c-with","(routes)",""],["with_backend","ActiveSupport::JSON","classes/ActiveSupport/JSON.html#method-c-with_backend","(name)",""],["with_backend","ActiveSupport::XmlMini","classes/ActiveSupport/XmlMini.html#method-i-with_backend","(name)",""],["with_connection","ActiveRecord::ConnectionAdapters::ConnectionPool","classes/ActiveRecord/ConnectionAdapters/ConnectionPool.html#method-i-with_connection","()","<p>If a connection already exists yield it to the block. If no connection\nexists checkout a connection, …\n"],["with_default_scope","ActionDispatch::Routing::Mapper::Base","classes/ActionDispatch/Routing/Mapper/Base.html#method-i-with_default_scope","(scope, &block)",""],["with_exclusive_scope","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_exclusive_scope","()",""],["with_fallbacks","ActionView::LookupContext::ViewPaths","classes/ActionView/LookupContext/ViewPaths.html#method-i-with_fallbacks","()","<p>Add fallbacks to the view paths. Useful in cases you are rendering a :file.\n"],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","ActiveSupport::HashWithIndifferentAccess","classes/ActiveSupport/HashWithIndifferentAccess.html#method-i-with_indifferent_access","()",""],["with_indifferent_access","Hash","classes/Hash.html#method-i-with_indifferent_access","()","<p>Returns an <code>ActiveSupport::HashWithIndifferentAccess</code> out of its\nreceiver:\n\n<pre>{ a: 1 }.with_indifferent_access[&#39;a&#39;] ...</pre>\n"],["with_local_cache","ActiveSupport::Cache::Strategy::LocalCache","classes/ActiveSupport/Cache/Strategy/LocalCache.html#method-i-with_local_cache","()","<p>Use a local cache for the duration of block.\n"],["with_lock","ActiveRecord::Locking::Pessimistic","classes/ActiveRecord/Locking/Pessimistic.html#method-i-with_lock","(lock = true)","<p>Wraps the passed block in a transaction, locking the object before\nyielding. You pass can the SQL locking …\n"],["with_options","Object","classes/Object.html#method-i-with_options","(options)","<p>An elegant way to factor duplication out of options passed to a series of\nmethod calls. Each method called …\n"],["with_routing","ActionDispatch::Assertions::RoutingAssertions","classes/ActionDispatch/Assertions/RoutingAssertions.html#method-i-with_routing","()","<p>A helper to make it easier to test different route configurations. This\nmethod temporarily replaces @routes …\n"],["with_scope_level","ActionDispatch::Routing::Mapper::Resources","classes/ActionDispatch/Routing/Mapper/Resources.html#method-i-with_scope_level","(kind, resource = parent_resource)",""],["with_transaction_returning_status","ActiveRecord::Transactions","classes/ActiveRecord/Transactions.html#method-i-with_transaction_returning_status","()","<p>Executes <code>method</code> within a transaction and captures its return\nvalue as a status flag. If the status is …\n"],["with_warnings","Kernel","classes/Kernel.html#method-i-with_warnings","(flag)","<p>Sets $VERBOSE for the duration of the block and back to its original value\nafterwards.\n"],["without_modules","ActionController::Base","classes/ActionController/Base.html#method-c-without_modules","(*modules)","<p>Shortcut helper that returns all the modules included in\nActionController::Base except the ones passed …\n"],["word_wrap","ActionView::Helpers::TextHelper","classes/ActionView/Helpers/TextHelper.html#method-i-word_wrap","(text, options = {})","<p>Wraps the <code>text</code> into lines no longer than\n<code>line_width</code> width. This method breaks on the first whitespace …\n"],["wrap","Array","classes/Array.html#method-c-wrap","(object)","<p>Wraps its argument in an array unless it is already an array (or\narray-like).\n<p>Specifically:\n<p>If the argument …\n"],["wrap_parameters","ActionController::ParamsWrapper::ClassMethods","classes/ActionController/ParamsWrapper/ClassMethods.html#method-i-wrap_parameters","(name_or_model_or_options, options = {})","<p>Sets the name of the wrapper key, or the model which\n<code>ParamsWrapper</code> would use to determine the attribute …\n"],["wrap_with_namespace","Rails::Generators::NamedBase","classes/Rails/Generators/NamedBase.html#method-i-wrap_with_namespace","(content)",""],["write","ActionDispatch::RailsEntityStore","classes/ActionDispatch/RailsEntityStore.html#method-i-write","(body)",""],["write","ActionDispatch::RailsMetaStore","classes/ActionDispatch/RailsMetaStore.html#method-i-write","(key, value)",""],["write","ActiveRecord::Migration","classes/ActiveRecord/Migration.html#method-i-write","(text=\"\")",""],["write","ActiveSupport::Cache::Store","classes/ActiveSupport/Cache/Store.html#method-i-write","(name, value, options = nil)","<p>Writes the value to the cache, with the key.\n<p>Options are passed to the underlying cache implementation. …\n"],["write_attribute","ActiveRecord::AttributeMethods::Write","classes/ActiveRecord/AttributeMethods/Write.html#method-i-write_attribute","(attr_name, value)","<p>Updates the attribute identified by <code>attr_name</code> with the\nspecified <code>value</code>. Empty strings for fixnum and …\n"],["write_entry","ActiveSupport::Cache::FileStore","classes/ActiveSupport/Cache/FileStore.html#method-i-write_entry","(key, entry, options)",""],["write_entry","ActiveSupport::Cache::Strategy::LocalCache::LocalStore","classes/ActiveSupport/Cache/Strategy/LocalCache/LocalStore.html#method-i-write_entry","(key, value, options)",""],["write_fragment","ActionController::Caching::Fragments","classes/ActionController/Caching/Fragments.html#method-i-write_fragment","(key, content, options = nil)","<p>Writes <code>content</code> to the location signified by <code>key</code>\n(see <code>expire_fragment</code> for acceptable formats).\n"],["write_store_attribute","ActiveRecord::Store","classes/ActiveRecord/Store.html#method-i-write_store_attribute","(store_attribute, key, value)",""],["xhr","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xhr","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xhr","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xhr","(request_method, path, parameters = nil, headers_or_env = nil)",""],["xhr?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xhr-3F","()",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::ColumnMethods","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/ColumnMethods.html#method-i-xml","(*args)",""],["xml","ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::TableDefinition","classes/ActiveRecord/ConnectionAdapters/PostgreSQLAdapter/TableDefinition.html#method-i-xml","(options = {})",""],["xml_http_request","ActionController::TestCase::Behavior","classes/ActionController/TestCase/Behavior.html#method-i-xml_http_request","(request_method, action, parameters = nil, session = nil, flash = nil)",""],["xml_http_request","ActionDispatch::Integration::RequestHelpers","classes/ActionDispatch/Integration/RequestHelpers.html#method-i-xml_http_request","(request_method, path, parameters = nil, headers_or_env = nil)","<p>Performs an XMLHttpRequest request with the given parameters, mirroring a\nrequest from the Prototype …\n"],["xml_http_request?","ActionDispatch::Request","classes/ActionDispatch/Request.html#method-i-xml_http_request-3F","()","<p>Returns true if the “X-Requested-With” header contains “XMLHttpRequest”\n(case-insensitive). …\n"],["xmlschema","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-xmlschema","(fraction_digits = 0)",""],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()",""],["year","Integer","classes/Integer.html#method-i-year","()",""],["years","Integer","classes/Integer.html#method-i-years","()",""],["years_ago","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-years_ago","(years)","<p>Returns a new date/time the specified number of years ago.\n"],["years_since","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-years_since","(years)","<p>Returns a new date/time the specified number of years in the future.\n"],["yesterday","Date","classes/Date.html#method-c-yesterday","()","<p>Returns a new Date representing the date 1 day ago (i.e. yesterday&#39;s\ndate).\n"],["yesterday","DateAndTime::Calculations","classes/DateAndTime/Calculations.html#method-i-yesterday","()","<p>Returns a new date/time representing yesterday.\n"],["zone","ActiveSupport::TimeWithZone","classes/ActiveSupport/TimeWithZone.html#method-i-zone","()","<p>Time uses <code>zone</code> to display the time zone abbreviation, so\nwe&#39;re duck-typing it.\n"],["zone","Time","classes/Time.html#method-c-zone","()","<p>Returns the TimeZone for the current request, if this has been set (via\nTime.zone=). If <code>Time.zone</code> has …\n"],["zone=","Time","classes/Time.html#method-c-zone-3D","(time_zone)","<p>Sets <code>Time.zone</code> to a TimeZone object for the current\nrequest/thread.\n<p>This method accepts any of the following: …\n"],["zones_map","ActiveSupport::TimeZone","classes/ActiveSupport/TimeZone.html#method-c-zones_map","()",""],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/actionmailer-4_0_0/README_rdoc.html","","<p>Action Mailer – Easy email delivery and testing\n<p>Action Mailer is a framework for designing email service …\n"],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/actionpack-4_0_0/README_rdoc.html","","<p>Action Pack – From request to response\n<p>Action Pack is a framework for handling and responding to web …\n"],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/activemodel-4_0_0/README_rdoc.html","","<p>Active Model – model interfaces for Rails\n<p>Active Model provides a known set of interfaces for usage in …\n"],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/activerecord-4_0_0/README_rdoc.html","","<p>Active Record – Object-relational mapping put on rails\n<p>Active Record connects classes to relational database …\n"],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/activesupport-4_0_0/README_rdoc.html","","<p>Active Support – Utility classes and Ruby extensions from Rails\n<p>Active Support is a collection of utility …\n"],["RDOC_MAIN","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/railties-4_0_0/RDOC_MAIN_rdoc.html","","<p>Welcome to Rails\n<p>Rails is a web-application framework that includes everything needed to\ncreate database-backed …\n"],["README","","files/usr/local/rvm/gems/ruby-2_0_0-p0/gems/railties-4_0_0/README_rdoc.html","","<p>Railties – Gluing the Engine to the Rails\n<p>Railties is responsible for gluing all frameworks together. …\n"]]}}